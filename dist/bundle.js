!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){var i;e.exports=function e(t,n,o){function s(a,l){if(!n[a]){if(!t[a]){var c="function"==typeof i&&i;if(!l&&c)return i(a,!0);if(r)return r(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var h=n[a]={exports:{}};t[a][0].call(h.exports,function(e){var n=t[a][1][e];return s(n||e)},h,h.exports,e,t,n,o)}return n[a].exports}for(var r="function"==typeof i&&i,a=0;a<o.length;a++)s(o[a]);return s}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=e("./util/throwIfMissing"),r=(i=s)&&i.__esModule?i:{default:i},a=e("./util/dom"),l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.isShowing=!1;var n=t.namespace,i=void 0===n?null:n,o=t.zoomFactor,s=void 0===o?(0,r.default)():o,a=t.containerEl,l=void 0===a?(0,r.default)():a;this.settings={namespace:i,zoomFactor:s,containerEl:l},this.openClasses=this._buildClasses("open"),this._buildElement()}return o(e,[{key:"_buildClasses",value:function(e){var t=["drift-"+e],n=this.settings.namespace;return n&&t.push(n+"-"+e),t}},{key:"_buildElement",value:function(){this.el=document.createElement("div"),(0,a.addClasses)(this.el,this._buildClasses("bounding-box"))}},{key:"show",value:function(e,t){this.isShowing=!0,this.settings.containerEl.appendChild(this.el);var n=this.el.style;n.width=Math.round(e/this.settings.zoomFactor)+"px",n.height=Math.round(t/this.settings.zoomFactor)+"px",(0,a.addClasses)(this.el,this.openClasses)}},{key:"hide",value:function(){this.isShowing&&this.settings.containerEl.removeChild(this.el),this.isShowing=!1,(0,a.removeClasses)(this.el,this.openClasses)}},{key:"setPosition",value:function(e,t,n){var i=window.pageXOffset,o=window.pageYOffset,s=n.left+e*n.width-this.el.clientWidth/2+i,r=n.top+t*n.height-this.el.clientHeight/2+o;this.el.getBoundingClientRect(),s<n.left+i?s=n.left+i:s+this.el.clientWidth>n.left+n.width+i&&(s=n.left+n.width-this.el.clientWidth+i),r<n.top+o?r=n.top+o:r+this.el.clientHeight>n.top+n.height+o&&(r=n.top+n.height-this.el.clientHeight+o),this.el.style.left=s+"px",this.el.style.top=r+"px"}}]),e}();n.default=l},{"./util/dom":6,"./util/throwIfMissing":7}],2:[function(e,t,n){"use strict";var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=e("./util/dom"),s=e("./injectBaseStylesheet"),r=h(s),a=e("./Trigger"),l=h(a),c=e("./ZoomPane"),u=h(c);function h(e){return e&&e.__esModule?e:{default:e}}t.exports=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.VERSION="1.2.0",this.destroy=function(){n.trigger._unbindEvents()},this.triggerEl=t,!(0,o.isDOMElement)(this.triggerEl))throw new TypeError("`new Drift` requires a DOM element as its first argument.");var s=i.namespace,a=void 0===s?null:s,l=i.showWhitespaceAtEdges,c=void 0!==l&&l,u=i.containInline,h=void 0!==u&&u,d=i.inlineOffsetX,f=void 0===d?0:d,p=i.inlineOffsetY,g=void 0===p?0:p,m=i.inlineContainer,v=void 0===m?document.body:m,b=i.sourceAttribute,y=void 0===b?"data-zoom":b,w=i.zoomFactor,E=void 0===w?3:w,_=i.paneContainer,x=void 0===_?document.body:_,C=i.inlinePane,I=void 0===C?375:C,S=i.handleTouch,O=void 0===S||S,z=i.onShow,M=void 0===z?null:z,k=i.onHide,T=void 0===k?null:k,L=i.injectBaseStyles,B=void 0===L||L,R=i.hoverDelay,A=void 0===R?0:R,P=i.touchDelay,H=void 0===P?0:P,F=i.hoverBoundingBox,j=void 0!==F&&F,D=i.touchBoundingBox,W=void 0!==D&&D;if(!0!==I&&!(0,o.isDOMElement)(x))throw new TypeError("`paneContainer` must be a DOM element when `inlinePane !== true`");if(!(0,o.isDOMElement)(v))throw new TypeError("`inlineContainer` must be a DOM element");this.settings={namespace:a,showWhitespaceAtEdges:c,containInline:h,inlineOffsetX:f,inlineOffsetY:g,inlineContainer:v,sourceAttribute:y,zoomFactor:E,paneContainer:x,inlinePane:I,handleTouch:O,onShow:M,onHide:T,injectBaseStyles:B,hoverDelay:A,touchDelay:H,hoverBoundingBox:j,touchBoundingBox:W},this.settings.injectBaseStyles&&(0,r.default)(),this._buildZoomPane(),this._buildTrigger()}return i(e,[{key:"_buildZoomPane",value:function(){this.zoomPane=new u.default({container:this.settings.paneContainer,zoomFactor:this.settings.zoomFactor,showWhitespaceAtEdges:this.settings.showWhitespaceAtEdges,containInline:this.settings.containInline,inline:this.settings.inlinePane,namespace:this.settings.namespace,inlineOffsetX:this.settings.inlineOffsetX,inlineOffsetY:this.settings.inlineOffsetY,inlineContainer:this.settings.inlineContainer})}},{key:"_buildTrigger",value:function(){this.trigger=new l.default({el:this.triggerEl,zoomPane:this.zoomPane,handleTouch:this.settings.handleTouch,onShow:this.settings.onShow,onHide:this.settings.onHide,sourceAttribute:this.settings.sourceAttribute,hoverDelay:this.settings.hoverDelay,touchDelay:this.settings.touchDelay,hoverBoundingBox:this.settings.hoverBoundingBox,touchBoundingBox:this.settings.touchBoundingBox,namespace:this.settings.namespace,zoomFactor:this.settings.zoomFactor})}},{key:"setZoomImageURL",value:function(e){this.zoomPane._setImageURL(e)}},{key:"disable",value:function(){this.trigger.enabled=!1}},{key:"enable",value:function(){this.trigger.enabled=!0}},{key:"isShowing",get:function(){return this.zoomPane.isShowing}},{key:"zoomFactor",get:function(){return this.settings.zoomFactor},set:function(e){this.settings.zoomFactor=e,this.zoomPane.settings.zoomFactor=e}}]),e}()},{"./Trigger":3,"./ZoomPane":4,"./injectBaseStylesheet":5,"./util/dom":6}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=e("./util/throwIfMissing"),s=l(o),r=e("./BoundingBox"),a=l(r);function l(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u.call(this);var n=t.el,i=void 0===n?(0,s.default)():n,o=t.zoomPane,r=void 0===o?(0,s.default)():o,l=t.sourceAttribute,c=void 0===l?(0,s.default)():l,h=t.handleTouch,d=void 0===h?(0,s.default)():h,f=t.onShow,p=void 0===f?null:f,g=t.onHide,m=void 0===g?null:g,v=t.hoverDelay,b=void 0===v?0:v,y=t.touchDelay,w=void 0===y?0:y,E=t.hoverBoundingBox,_=void 0===E?(0,s.default)():E,x=t.touchBoundingBox,C=void 0===x?(0,s.default)():x,I=t.namespace,S=void 0===I?null:I,O=t.zoomFactor,z=void 0===O?(0,s.default)():O;this.settings={el:i,zoomPane:r,sourceAttribute:c,handleTouch:d,onShow:p,onHide:m,hoverDelay:b,touchDelay:w,hoverBoundingBox:_,touchBoundingBox:C,namespace:S,zoomFactor:z},(this.settings.hoverBoundingBox||this.settings.touchBoundingBox)&&(this.boundingBox=new a.default({namespace:this.settings.namespace,zoomFactor:this.settings.zoomFactor,containerEl:this.settings.el.offsetParent})),this.enabled=!0,this._bindEvents()}return i(e,[{key:"_bindEvents",value:function(){this.settings.el.addEventListener("mouseenter",this._handleEntry,!1),this.settings.el.addEventListener("mouseleave",this._hide,!1),this.settings.el.addEventListener("mousemove",this._handleMovement,!1),this.settings.handleTouch&&(this.settings.el.addEventListener("touchstart",this._handleEntry,!1),this.settings.el.addEventListener("touchend",this._hide,!1),this.settings.el.addEventListener("touchmove",this._handleMovement,!1))}},{key:"_unbindEvents",value:function(){this.settings.el.removeEventListener("mouseenter",this._handleEntry,!1),this.settings.el.removeEventListener("mouseleave",this._hide,!1),this.settings.el.removeEventListener("mousemove",this._handleMovement,!1),this.settings.handleTouch&&(this.settings.el.removeEventListener("touchstart",this._handleEntry,!1),this.settings.el.removeEventListener("touchend",this._hide,!1),this.settings.el.removeEventListener("touchmove",this._handleMovement,!1))}},{key:"isShowing",get:function(){return this.settings.zoomPane.isShowing}}]),e}(),u=function(){var e=this;this._handleEntry=function(t){t.preventDefault(),e._lastMovement=t,"mouseenter"==t.type&&e.settings.hoverDelay?e.entryTimeout=setTimeout(e._show,e.settings.hoverDelay):e.settings.touchDelay?e.entryTimeout=setTimeout(e._show,e.settings.touchDelay):e._show()},this._show=function(){if(e.enabled){var t=e.settings.onShow;if(t&&"function"==typeof t&&t(),e.settings.zoomPane.show(e.settings.el.getAttribute(e.settings.sourceAttribute),e.settings.el.clientWidth,e.settings.el.clientHeight),e._lastMovement){var n=e._lastMovement.touches;(n&&e.settings.touchBoundingBox||!n&&e.settings.hoverBoundingBox)&&e.boundingBox.show(e.settings.zoomPane.el.clientWidth,e.settings.zoomPane.el.clientHeight)}e._handleMovement()}},this._hide=function(t){t.preventDefault(),e._lastMovement=null,e.entryTimeout&&clearTimeout(e.entryTimeout),e.boundingBox&&e.boundingBox.hide();var n=e.settings.onHide;n&&"function"==typeof n&&n(),e.settings.zoomPane.hide()},this._handleMovement=function(t){if(t)t.preventDefault(),e._lastMovement=t;else{if(!e._lastMovement)return;t=e._lastMovement}var n=void 0,i=void 0;if(t.touches){var o=t.touches[0];n=o.clientX,i=o.clientY}else n=t.clientX,i=t.clientY;var s=e.settings.el,r=s.getBoundingClientRect(),a=n-r.left,l=i-r.top,c=a/e.settings.el.clientWidth,u=l/e.settings.el.clientHeight;e.boundingBox&&e.boundingBox.setPosition(c,u,r),e.settings.zoomPane.setPosition(c,u,r)}};n.default=c},{"./BoundingBox":1,"./util/throwIfMissing":7}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=e("./util/throwIfMissing"),r=(i=s)&&i.__esModule?i:{default:i},a=e("./util/dom"),l=document.createElement("div").style,c="undefined"!=typeof document&&("animation"in l||"webkitAnimation"in l),u=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._completeShow=function(){t.el.removeEventListener("animationend",t._completeShow,!1),t.el.removeEventListener("webkitAnimationEnd",t._completeShow,!1),(0,a.removeClasses)(t.el,t.openingClasses)},this._completeHide=function(){t.el.removeEventListener("animationend",t._completeHide,!1),t.el.removeEventListener("webkitAnimationEnd",t._completeHide,!1),(0,a.removeClasses)(t.el,t.openClasses),(0,a.removeClasses)(t.el,t.closingClasses),(0,a.removeClasses)(t.el,t.inlineClasses),t.el.setAttribute("style",""),t.el.parentElement===t.settings.container?t.settings.container.removeChild(t.el):t.el.parentElement===t.settings.inlineContainer&&t.settings.inlineContainer.removeChild(t.el)},this._handleLoad=function(){t.imgEl.removeEventListener("load",t._handleLoad,!1),(0,a.removeClasses)(t.el,t.loadingClasses)},this.isShowing=!1;var i=n.container,o=void 0===i?null:i,s=n.zoomFactor,l=void 0===s?(0,r.default)():s,c=n.inline,u=void 0===c?(0,r.default)():c,h=n.namespace,d=void 0===h?null:h,f=n.showWhitespaceAtEdges,p=void 0===f?(0,r.default)():f,g=n.containInline,m=void 0===g?(0,r.default)():g,v=n.inlineOffsetX,b=void 0===v?0:v,y=n.inlineOffsetY,w=void 0===y?0:y,E=n.inlineContainer,_=void 0===E?document.body:E;this.settings={container:o,zoomFactor:l,inline:u,namespace:d,showWhitespaceAtEdges:p,containInline:m,inlineOffsetX:b,inlineOffsetY:w,inlineContainer:_},this.openClasses=this._buildClasses("open"),this.openingClasses=this._buildClasses("opening"),this.closingClasses=this._buildClasses("closing"),this.inlineClasses=this._buildClasses("inline"),this.loadingClasses=this._buildClasses("loading"),this._buildElement()}return o(e,[{key:"_buildClasses",value:function(e){var t=["drift-"+e],n=this.settings.namespace;return n&&t.push(n+"-"+e),t}},{key:"_buildElement",value:function(){this.el=document.createElement("div"),(0,a.addClasses)(this.el,this._buildClasses("zoom-pane"));var e=document.createElement("div");(0,a.addClasses)(e,this._buildClasses("zoom-pane-loader")),this.el.appendChild(e),this.imgEl=document.createElement("img"),this.el.appendChild(this.imgEl)}},{key:"_setImageURL",value:function(e){this.imgEl.setAttribute("src",e)}},{key:"_setImageSize",value:function(e,t){this.imgEl.style.width=e*this.settings.zoomFactor+"px",this.imgEl.style.height=t*this.settings.zoomFactor+"px"}},{key:"setPosition",value:function(e,t,n){var i=-(this.imgEl.clientWidth*e-this.el.clientWidth/2),o=-(this.imgEl.clientHeight*t-this.el.clientHeight/2),s=-(this.imgEl.clientWidth-this.el.clientWidth),r=-(this.imgEl.clientHeight-this.el.clientHeight);if(this.el.parentElement===this.settings.inlineContainer){var a=window.pageXOffset,l=window.pageYOffset,c=n.left+e*n.width-this.el.clientWidth/2+this.settings.inlineOffsetX+a,u=n.top+t*n.height-this.el.clientHeight/2+this.settings.inlineOffsetY+l;this.settings.containInline&&(this.el.getBoundingClientRect(),c<n.left+a?c=n.left+a:c+this.el.clientWidth>n.left+n.width+a&&(c=n.left+n.width-this.el.clientWidth+a),u<n.top+l?u=n.top+l:u+this.el.clientHeight>n.top+n.height+l&&(u=n.top+n.height-this.el.clientHeight+l)),this.el.style.left=c+"px",this.el.style.top=u+"px"}this.settings.showWhitespaceAtEdges||(i>0?i=0:i<s&&(i=s),o>0?o=0:o<r&&(o=r)),this.imgEl.style.transform="translate("+i+"px, "+o+"px)",this.imgEl.style.webkitTransform="translate("+i+"px, "+o+"px)"}},{key:"_removeListenersAndResetClasses",value:function(){this.el.removeEventListener("animationend",this._completeShow,!1),this.el.removeEventListener("animationend",this._completeHide,!1),this.el.removeEventListener("webkitAnimationEnd",this._completeShow,!1),this.el.removeEventListener("webkitAnimationEnd",this._completeHide,!1),(0,a.removeClasses)(this.el,this.openClasses),(0,a.removeClasses)(this.el,this.closingClasses)}},{key:"show",value:function(e,t,n){this._removeListenersAndResetClasses(),this.isShowing=!0,(0,a.addClasses)(this.el,this.openClasses),(0,a.addClasses)(this.el,this.loadingClasses),this.imgEl.addEventListener("load",this._handleLoad,!1),this._setImageURL(e),this._setImageSize(t,n),this._isInline?this._showInline():this._showInContainer(),c&&(this.el.addEventListener("animationend",this._completeShow,!1),this.el.addEventListener("webkitAnimationEnd",this._completeShow,!1),(0,a.addClasses)(this.el,this.openingClasses))}},{key:"_showInline",value:function(){this.settings.inlineContainer.appendChild(this.el),(0,a.addClasses)(this.el,this.inlineClasses)}},{key:"_showInContainer",value:function(){this.settings.container.appendChild(this.el)}},{key:"hide",value:function(){this._removeListenersAndResetClasses(),this.isShowing=!1,c?(this.el.addEventListener("animationend",this._completeHide,!1),this.el.addEventListener("webkitAnimationEnd",this._completeHide,!1),(0,a.addClasses)(this.el,this.closingClasses)):((0,a.removeClasses)(this.el,this.openClasses),(0,a.removeClasses)(this.el,this.inlineClasses))}},{key:"_isInline",get:function(){var e=this.settings.inline;return!0===e||"number"==typeof e&&window.innerWidth<=e}}]),e}();n.default=u},{"./util/dom":6,"./util/throwIfMissing":7}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){if(!document.querySelector(".drift-base-styles")){var e=document.createElement("style");e.type="text/css",e.classList.add("drift-base-styles"),e.appendChild(document.createTextNode(i));var t=document.head;t.insertBefore(e,t.firstChild)}};var i="\n@keyframes noop {\n  0% { zoom: 1; }\n}\n\n@-webkit-keyframes noop {\n  0% { zoom: 1; }\n}\n\n.drift-zoom-pane.drift-open {\n  display: block;\n}\n\n.drift-zoom-pane.drift-opening, .drift-zoom-pane.drift-closing {\n  animation: noop 1ms;\n  -webkit-animation: noop 1ms;\n}\n\n.drift-zoom-pane {\n  position: absolute;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n.drift-zoom-pane-loader {\n  display: none;\n}\n\n.drift-zoom-pane img {\n  position: absolute;\n  display: block;\n  max-width: none;\n  max-height: none;\n}\n\n.drift-bounding-box {\n  position: absolute;\n  pointer-events: none;\n}\n"},{}],6:[function(e,t,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":i(e)};n.isDOMElement=function(e){return s?e instanceof HTMLElement:e&&"object"===(void 0===e?"undefined":o(e))&&null!==e&&1===e.nodeType&&"string"==typeof e.nodeName},n.addClasses=function(e,t){t.forEach(function(t){e.classList.add(t)})},n.removeClasses=function(e,t){t.forEach(function(t){e.classList.remove(t)})};var s="object"===("undefined"==typeof HTMLElement?"undefined":o(HTMLElement))},{}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){throw new Error("Missing parameter")}},{}]},{},[2])(2)},function(e,t,n){e.exports=function(){"use strict";function e(e){for(var t=e.length,n=[],i=0;i<t;i+=1)n.push(e[i]);return n}function t(e){return e instanceof Element?e:"string"==typeof e?document.querySelector(e):null}function n(e){var t=e.id,n=e.i;return"scrollama__debug-step--"+t+"-"+n}function i(e){var t=e.id;return"scrollama__debug-offset--"+t}function o(e){var t=e.id,o=e.offsetVal,s=e.stepEl,r=s[0].getAttribute("class");s.forEach(function(e,i){return function(e){var t=e.id,i=e.i,o=n({id:t,i:i}),s=document.createElement("div");s.setAttribute("id",o+"_above"),s.setAttribute("class","scrollama__debug-step"),s.style.position="fixed",s.style.left="0",s.style.width="100%",s.style.backgroundImage="repeating-linear-gradient(45deg, green 0, green 2px, white 0, white 40px)",s.style.border="2px solid green",s.style.opacity="0.33",s.style.zIndex="9999",s.style.display="none",document.body.appendChild(s);var r=document.createElement("div");r.setAttribute("id",o+"_below"),r.setAttribute("class","scrollama__debug-step"),r.style.position="fixed",r.style.left="0",r.style.width="100%",r.style.backgroundImage="repeating-linear-gradient(135deg, orange 0, orange 2px, white 0, white 40px)",r.style.border="2px solid orange",r.style.opacity="0.33",r.style.zIndex="9999",r.style.display="none",document.body.appendChild(r)}({id:t,i:i})}),function(e){var t=e.id,n=e.offsetVal,o=e.stepClass,s=document.createElement("div");s.setAttribute("id",i({id:t})),s.setAttribute("class","scrollama__debug-offset"),s.style.position="fixed",s.style.left="0",s.style.width="100%",s.style.height="0px",s.style.borderTop="2px dashed black",s.style.zIndex="9999";var r=document.createElement("p");r.innerText='".'+o+'" trigger: '+n,r.style.fontSize="12px",r.style.fontFamily="monospace",r.style.color="black",r.style.margin="0",r.style.padding="6px",s.appendChild(r),document.body.appendChild(s)}({id:t,offsetVal:o,stepClass:r})}function s(e){var t=e.id,o=e.stepOffsetHeight,s=e.offsetMargin;e.offsetVal,o.forEach(function(e,i){return function(e){var t=e.id,i=e.h,o=e.i,s=e.offsetMargin,r=n({id:t,i:o}),a=document.querySelector("#"+r+"_above");a.style.height=i+"px",a.style.top=s-i+"px";var l=document.querySelector("#"+r+"_below");l.style.height=i+"px",l.style.top=s+"px"}({id:t,h:e,i:i,offsetMargin:s})}),function(e){var t=e.id,n=e.offsetMargin,o=(e.offsetVal,i({id:t}));document.querySelector("#"+o).style.top=n+"px"}({id:t,offsetMargin:s})}function r(e){var t=e.id,i=e.index,o=e.state,s=n({id:t,i:i}),r=document.querySelector("#"+s+"_above"),a=document.querySelector("#"+s+"_below"),l="enter"===o?"block":"none";r&&(r.style.display=l),a&&(a.style.display=l)}return function(){var n=1,i={},a={},l=null,c=null,u=null,h=null,d=0,f=0,p=0,g=0,m=null,v=null,b=null,y=!1,w=!1,E=!1,_=!1,x=0,C=!1,I=!1,S=null,O=null,z=-1,M=null,k=[];function T(e){var t=0;if(e.offsetParent)do{t+=e.offsetTop,e=e.offsetParent}while(e);return t<0?0:t}function L(e){return+e.getAttribute("data-scrollama-index")}function B(){window.pageYOffset>z?M="down":window.pageYOffset<z&&(M="up"),z=window.pageYOffset}function R(){var e,t;p=window.innerHeight,e=document.body,t=document.documentElement,g=Math.max(e.scrollHeight,e.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight),b=c?c.getBoundingClientRect():null,f=d*p,m=u?u.map(function(e){return e.offsetHeight}):[],v=u?u.map(T):[],w&&y&&G(),E&&s({id:h,stepOffsetHeight:m,offsetMargin:f,offsetVal:d})}function A(e){e&&!w?(y&&G(),w=!0):e||(a.top&&a.top.disconnect(),a.bottom&&a.bottom.disconnect(),a.stepAbove&&a.stepAbove.forEach(function(e){return e.disconnect()}),a.stepBelow&&a.stepBelow.forEach(function(e){return e.disconnect()}),a.stepProgress&&a.stepProgress.forEach(function(e){return e.disconnect()}),a.viewportAbove&&a.viewportAbove.forEach(function(e){return e.disconnect()}),a.viewportBelow&&a.viewportBelow.forEach(function(e){return e.disconnect()}),w=!1)}function P(e,t){if("above"===t)for(var n=0;n<e;n++){var i=S[n];"enter"===i.state&&F(u[n]),"up"===i.direction&&(H(u[n],"down"),F(u[n]))}else if("below"===t)for(var o=S.length-1;o>e;o--){var s=S[o];"enter"===s.state&&F(u[o]),"down"===s.direction&&(H(u[o],"up"),F(u[o]))}}function H(e,t){void 0===t&&(t=!0);var n=L(e),o={element:e,index:n,direction:M};S[n].direction=M,S[n].state="enter",C&&t&&"down"===M&&P(n,"above"),C&&t&&"up"===M&&P(n,"below"),i.stepEnter&&"function"==typeof i.stepEnter&&!k[n]&&(i.stepEnter(o,S),E&&r({id:h,index:n,state:"enter"}),I&&(k[n]=!0)),_&&j(e,"down"===M?0:1)}function F(e){var t=L(e),n={element:e,index:t,direction:M};S[t].direction=M,S[t].state="exit",_&&j(e,"down"===M?1:0),i.stepExit&&"function"==typeof i.stepExit&&(i.stepExit(n,S),E&&r({id:h,index:t,state:"exit"}))}function j(e,t){var n=L(e),o={element:e,index:n,progress:t};i.stepProgress&&"function"==typeof i.stepProgress&&i.stepProgress(o)}function D(){var e={direction:M};O.direction=M,O.state="enter",i.containerEnter&&"function"==typeof i.containerEnter&&i.containerEnter(e)}function W(){var e={direction:M};O.direction=M,O.state="exit",i.containerExit&&"function"==typeof i.containerExit&&i.containerExit(e)}function U(e){B(),e.forEach(function(e){var t=e.isIntersecting,i=e.boundingClientRect,o=e.target,s=i.bottom,r=i.height,a=s-f,l=L(o),c=S[l];a>=-n&&(t&&"down"===M&&"enter"!==c.state?H(o,M):t||"up"!==M||"enter"!==c.state?!t&&a>=r&&"down"===M&&"enter"===c.state&&F(o):F(o))})}function q(e){B(),e.forEach(function(e){var t=e.isIntersecting,i=e.boundingClientRect,o=e.target,s=i.bottom,r=i.height,a=s-f,l=L(o),c=S[l];a>=-n&&a<r&&t&&"up"===M&&"enter"!==c.state?H(o,M):a<=n&&!t&&"down"===M&&"enter"===c.state&&F(o)})}function N(e){B(),e.forEach(function(e){var t=e.isIntersecting,n=e.target,i=L(n),o=S[i];t&&"down"===M&&"enter"!==o.state&&"down"!==o.direction&&(H(n,"down"),F(n))})}function V(e){B(),e.forEach(function(e){var t=e.isIntersecting,n=e.target,i=L(n),o=S[i];t&&"up"===M&&"enter"!==o.state&&"up"!==o.direction&&(H(n,"up"),F(n))})}function Y(e){B(),e.forEach(function(e){var t=e.isIntersecting,i=e.intersectionRatio,o=e.boundingClientRect,s=e.target,r=o.bottom,a=r-f;t&&a>=-n&&j(s,+i.toFixed(3))})}function X(e){B();var t=e[0],i=t.isIntersecting,o=t.boundingClientRect,s=(o.top,o.bottom);s>-n&&(i?D():"enter"===O.state&&W())}function Z(e){B();var t=e[0],i=t.isIntersecting,o=t.boundingClientRect,s=o.top;s<n&&(i?D():"enter"===O.state&&W())}function $(){a.stepProgress&&a.stepProgress.forEach(function(e){return e.disconnect()}),a.stepProgress=u.map(function(e,t){var n=m[t]-f,i=-p+f,o=n+"px 0px "+i+"px 0px",s=function(e){for(var t=Math.ceil(e/x),n=[],i=1/t,o=0;o<t;o++)n.push(o*i);return n}(m[t]),r={root:null,rootMargin:o,threshold:s},a=new IntersectionObserver(Y,r);return a.observe(e),a})}function G(){a.viewportAbove&&a.viewportAbove.forEach(function(e){return e.disconnect()}),a.viewportAbove=u.map(function(e,t){var n=v[t],i=-(p-f+m[t]),o=n+"px 0px "+i+"px 0px",s={root:null,rootMargin:o,threshold:0},r=new IntersectionObserver(N,s);return r.observe(e),r}),a.viewportBelow&&a.viewportBelow.forEach(function(e){return e.disconnect()}),a.viewportBelow=u.map(function(e,t){var n=-(f+m[t]),i=g-v[t]-m[t]-f,o=n+"px 0px "+i+"px 0px",s={root:null,rootMargin:o,threshold:0},r=new IntersectionObserver(V,s);return r.observe(e),r}),a.stepAbove&&a.stepAbove.forEach(function(e){return e.disconnect()}),a.stepAbove=u.map(function(e,t){var n=m[t],i=-p+f,o=n+"px 0px "+i+"px 0px",s={root:null,rootMargin:o,threshold:0},r=new IntersectionObserver(U,s);return r.observe(e),r}),a.stepBelow&&a.stepBelow.forEach(function(e){return e.disconnect()}),a.stepBelow=u.map(function(e,t){var n=-f,i=g-p+m[t]+f,o=n+"px 0px "+i+"px 0px",s={root:null,rootMargin:o,threshold:0},r=new IntersectionObserver(q,s);return r.observe(e),r}),_&&$(),l&&c&&(function(){a.top&&a.top.unobserve(l);var e={root:null,rootMargin:p+"px 0px -"+p+"px 0px",threshold:0};a.top=new IntersectionObserver(X,e),a.top.observe(l)}(),function(){a.bottom&&a.bottom.unobserve(l);var e={root:null,rootMargin:"-"+b.height+"px 0px "+b.height+"px 0px",threshold:0};a.bottom=new IntersectionObserver(Z,e),a.bottom.observe(l)}())}var J={};return J.setup=function(n){var i=n.container,s=n.graphic,r=n.step,a=n.offset;void 0===a&&(a=.5);var f=n.progress;void 0===f&&(f=!1);var p=n.threshold;void 0===p&&(p=4);var g=n.debug;void 0===g&&(g=!1);var m=n.order;void 0===m&&(m=!0);var v,b,w,z,M,k=n.once;return void 0===k&&(k=!1),b=(v="abcdefghijklmnopqrstuv").length,w=(new Date).getTime(),h=""+[0,0,0].map(function(e){return v[Math.floor(Math.random()*b)]}).join("")+w,z=r,void 0===M&&(M=document),u="string"==typeof z?e(M.querySelectorAll(z)):z instanceof NodeList?e(z):z instanceof Array?z:[],l=i?t(i):null,c=s?t(s):null,u.length?(E=g,_=f,C=m,I=k,J.offsetTrigger(a),x=Math.max(1,+p),y=!0,E&&o({id:h,stepEl:u,offsetVal:d}),u.forEach(function(e,t){return e.setAttribute("data-scrollama-index",t)}),S=u.map(function(){return{direction:null,state:null}}),O={direction:null,state:null},R(),A(!0),J):(console.error("scrollama error: no step elements"),J)},J.resize=function(){return R(),J},J.enable=function(){return A(!0),J},J.disable=function(){return A(!1),J},J.destroy=function(){A(!1),Object.keys(i).forEach(function(e){return i[e]=null}),Object.keys(a).forEach(function(e){return a[e]=null})},J.offsetTrigger=function(e){return e&&(isNaN(e),1)?(d=Math.min(Math.max(0,e),1),J):d},J.onStepEnter=function(e){return i.stepEnter=e,J},J.onStepExit=function(e){return i.stepExit=e,J},J.onStepProgress=function(e){return i.stepProgress=e,J},J.onContainerEnter=function(e){return i.containerEnter=e,J},J.onContainerExit=function(e){return i.containerExit=e,J},J}}()},function(e,t,n){"use strict";n.r(t);n(9),n(8);var i=n(1),o=n.n(i),s=n(0),r=n.n(s);const a=document.getElementById("imagePane"),l="assets/graphs/",c=[{src:l+"Scatterplot_SnowWhite.png",zoom:l+"Scatterplot_SnowWhite.png",alt:"Scatterplot of Snow White"},{src:l+"Scatterplot_BlairWitchProject.png",zoom:l+"Scatterplot_BlairWitchProject.png",alt:"Scatterplot of Blair Witch Project"},{src:l+"Scatterplot_HarryPotter.png",zoom:l+"Scatterplot_HarryPotter.png",alt:"Scatterplot of Harry Potter"},{src:l+"Scatterplot_Halloweentown.png",zoom:l+"Scatterplot_Halloweentown.png",alt:"Scatterplot of Halloweentown"},{src:l+"Scatterplot_TheCraft.png",zoom:l+"Scatterplot_TheCraft.png",alt:"Scatterplot of Witches of Eastwick"},{src:l+"Scatterplot_WitchesOfEastwick.png",zoom:l+"Scatterplot_WitchesOfEastwick.png",alt:"Scatterplot of Witches of Eastwick"}],u=document.querySelector(".scroll__text");var h={namespace:null,showWhitespaceAtEdges:!1,containInline:!1,inlineOffsetX:0,inlineOffsetY:0,inlineContainer:document.body,sourceAttribute:"data-zoom",zoomFactor:3,paneContainer:document.querySelector(".scroll__graphic"),inlinePane:375,handleTouch:!0,onShow:function(){a.style.opacity=.5,a.classList.toggle("blurry"),u.classList.toggle("blurry")},onHide:function(){a.style.opacity=1,a.classList.toggle("blurry"),u.classList.toggle("blurry")},injectBaseStyles:!0,hoverDelay:0,touchDelay:0,hoverBoundingBox:!1,touchBoundingBox:!1};let d=new r.a(a,h);document.querySelector("#scroll");const f=document.querySelector(".scroll__graphic"),p=document.querySelector(".chart"),g=document.querySelector(".scroll__text"),m=document.querySelectorAll(".step"),v=o()();function b(){const e=Math.floor(.75*window.innerHeight);m.forEach(function(t){t.style.height=e+"px"}),f.style.height=window.innerHeight+"px",console.dir(g);const t=g.offsetWidth;console.dir(document.body);const n=document.body.offsetWidth,i=n-t-n/10;console.log(i,n,t);const o=Math.floor(window.innerHeight/1.5);p.style.width=i+"px",p.style.height=o+"px",d.zoomFactor=400/n*10,v.resize()}function y(e){m[e.index].classList.add("is-active"),a.src=c[e.index].src,a.dataset.zoom=c[e.index].zoom,a.alt=c[e.index].alt}function w(e){f.classList.add("is-fixed"),f.classList.remove("is-bottom")}function E(e){f.classList.remove("is-fixed"),"down"===e.direction?f.classList.add("is-bottom"):f.classList.remove("is-bottom")}window.addEventListener("load",function(){b(),v.setup({container:"#scroll",graphic:".scroll__graphic",text:".scroll__text",step:".scroll__text .step",offset:.7}).onStepEnter(y).onContainerEnter(w).onContainerExit(E),window.addEventListener("resize",b)});n(3);let _=new Array;!function(e){for(let t=0;t<e.length;t++)_[t]=new Image,_[t].src=e[t]}(c.map(e=>e.src))},function(e,t){window.addEventListener("load",function(){document.body.style.visibility="visible"})},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,s=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:i+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var i,o,s={},r=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=i.apply(this,arguments)),o}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,c=0,u=[],h=n(4);function d(e,t){for(var n=0;n<e.length;n++){var i=e[n],o=s[i.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](i.parts[r]);for(;r<i.parts.length;r++)o.parts.push(b(i.parts[r],t))}else{var a=[];for(r=0;r<i.parts.length;r++)a.push(b(i.parts[r],t));s[i.id]={id:i.id,refs:1,parts:a}}}}function f(e,t){for(var n=[],i={},o=0;o<e.length;o++){var s=e[o],r=t.base?s[0]+t.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};i[r]?i[r].parts.push(a):n.push(i[r]={id:r,parts:[a]})}return n}function p(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=u[u.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,i,o,s;if(t.transform&&e.css){if(!(s=t.transform(e.css)))return function(){};e.css=s}if(t.singleton){var r=c++;n=l||(l=m(t)),i=E.bind(null,n,r,!1),o=E.bind(null,n,r,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),i=function(e,t,n){var i=n.css,o=n.sourceMap,s=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||s)&&(i=h(i));o&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var r=new Blob([i],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}.bind(null,n,t),o=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),i=function(e,t){var n=t.css,i=t.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){g(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return d(n,t),function(e){for(var i=[],o=0;o<n.length;o++){var r=n[o];(a=s[r.id]).refs--,i.push(a)}e&&d(f(e,t),t);for(o=0;o<i.length;o++){var a;if(0===(a=i[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete s[a.id]}}}};var y,w=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function E(e,t,n,i){var o=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var s=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(r=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),s=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(s).concat([o]).join("\n")}var r;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(i[s]=!0)}for(o=0;o<e.length;o++){var r=e[o];"number"==typeof r[0]&&i[r[0]]||(n&&!r[2]?r[2]=n:n&&(r[2]="("+r[2]+") and ("+n+")"),t.push(r))}},t}},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,'/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',""])},function(e,t,n){var i=n(7);"string"==typeof i&&(i=[[e.i,i,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(i,o);i.locals&&(e.exports=i.locals)},function(e,t){!function(e,t){"use strict";if("IntersectionObserver"in e&&"IntersectionObserverEntry"in e&&"intersectionRatio"in e.IntersectionObserverEntry.prototype)"isIntersecting"in e.IntersectionObserverEntry.prototype||Object.defineProperty(e.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}});else{var n=[];o.prototype.THROTTLE_TIMEOUT=100,o.prototype.POLL_INTERVAL=null,o.prototype.USE_MUTATION_OBSERVER=!0,o.prototype.observe=function(e){if(!this._observationTargets.some(function(t){return t.element==e})){if(!e||1!=e.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:e,entry:null}),this._monitorIntersections(),this._checkForIntersections()}},o.prototype.unobserve=function(e){this._observationTargets=this._observationTargets.filter(function(t){return t.element!=e}),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},o.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},o.prototype.takeRecords=function(){var e=this._queuedEntries.slice();return this._queuedEntries=[],e},o.prototype._initThresholds=function(e){var t=e||[0];return Array.isArray(t)||(t=[t]),t.sort().filter(function(e,t,n){if("number"!=typeof e||isNaN(e)||e<0||e>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return e!==n[t-1]})},o.prototype._parseRootMargin=function(e){var t=(e||"0px").split(/\s+/).map(function(e){var t=/^(-?\d*\.?\d+)(px|%)$/.exec(e);if(!t)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(t[1]),unit:t[2]}});return t[1]=t[1]||t[0],t[2]=t[2]||t[0],t[3]=t[3]||t[1],t},o.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(s(e,"resize",this._checkForIntersections,!0),s(t,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in e&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(t,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},o.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,r(e,"resize",this._checkForIntersections,!0),r(t,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},o.prototype._checkForIntersections=function(){var t=this._rootIsInDom(),n=t?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach(function(o){var s=o.element,r=a(s),l=this._rootContainsTarget(s),c=o.entry,u=t&&l&&this._computeTargetAndRootIntersection(s,n),h=o.entry=new i({time:e.performance&&performance.now&&performance.now(),target:s,boundingClientRect:r,rootBounds:n,intersectionRect:u});c?t&&l?this._hasCrossedThreshold(c,h)&&this._queuedEntries.push(h):c&&c.isIntersecting&&this._queuedEntries.push(h):this._queuedEntries.push(h)},this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},o.prototype._computeTargetAndRootIntersection=function(n,i){if("none"!=e.getComputedStyle(n).display){for(var o,s,r,l,u,h,d,f,p=a(n),g=c(n),m=!1;!m;){var v=null,b=1==g.nodeType?e.getComputedStyle(g):{};if("none"==b.display)return;if(g==this.root||g==t?(m=!0,v=i):g!=t.body&&g!=t.documentElement&&"visible"!=b.overflow&&(v=a(g)),v&&(o=v,s=p,void 0,void 0,void 0,void 0,void 0,void 0,r=Math.max(o.top,s.top),l=Math.min(o.bottom,s.bottom),u=Math.max(o.left,s.left),h=Math.min(o.right,s.right),f=l-r,!(p=(d=h-u)>=0&&f>=0&&{top:r,bottom:l,left:u,right:h,width:d,height:f})))break;g=c(g)}return p}},o.prototype._getRootRect=function(){var e;if(this.root)e=a(this.root);else{var n=t.documentElement,i=t.body;e={top:0,left:0,right:n.clientWidth||i.clientWidth,width:n.clientWidth||i.clientWidth,bottom:n.clientHeight||i.clientHeight,height:n.clientHeight||i.clientHeight}}return this._expandRectByRootMargin(e)},o.prototype._expandRectByRootMargin=function(e){var t=this._rootMarginValues.map(function(t,n){return"px"==t.unit?t.value:t.value*(n%2?e.width:e.height)/100}),n={top:e.top-t[0],right:e.right+t[1],bottom:e.bottom+t[2],left:e.left-t[3]};return n.width=n.right-n.left,n.height=n.bottom-n.top,n},o.prototype._hasCrossedThreshold=function(e,t){var n=e&&e.isIntersecting?e.intersectionRatio||0:-1,i=t.isIntersecting?t.intersectionRatio||0:-1;if(n!==i)for(var o=0;o<this.thresholds.length;o++){var s=this.thresholds[o];if(s==n||s==i||s<n!=s<i)return!0}},o.prototype._rootIsInDom=function(){return!this.root||l(t,this.root)},o.prototype._rootContainsTarget=function(e){return l(this.root||t,e)},o.prototype._registerInstance=function(){n.indexOf(this)<0&&n.push(this)},o.prototype._unregisterInstance=function(){var e=n.indexOf(this);-1!=e&&n.splice(e,1)},e.IntersectionObserver=o,e.IntersectionObserverEntry=i}function i(e){this.time=e.time,this.target=e.target,this.rootBounds=e.rootBounds,this.boundingClientRect=e.boundingClientRect,this.intersectionRect=e.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!e.intersectionRect;var t=this.boundingClientRect,n=t.width*t.height,i=this.intersectionRect,o=i.width*i.height;this.intersectionRatio=n?o/n:this.isIntersecting?1:0}function o(e,t){var n,i,o,s=t||{};if("function"!=typeof e)throw new Error("callback must be a function");if(s.root&&1!=s.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(n=this._checkForIntersections.bind(this),i=this.THROTTLE_TIMEOUT,o=null,function(){o||(o=setTimeout(function(){n(),o=null},i))}),this._callback=e,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(s.rootMargin),this.thresholds=this._initThresholds(s.threshold),this.root=s.root||null,this.rootMargin=this._rootMarginValues.map(function(e){return e.value+e.unit}).join(" ")}function s(e,t,n,i){"function"==typeof e.addEventListener?e.addEventListener(t,n,i||!1):"function"==typeof e.attachEvent&&e.attachEvent("on"+t,n)}function r(e,t,n,i){"function"==typeof e.removeEventListener?e.removeEventListener(t,n,i||!1):"function"==typeof e.detatchEvent&&e.detatchEvent("on"+t,n)}function a(e){var t;try{t=e.getBoundingClientRect()}catch(e){}return t?(t.width&&t.height||(t={top:t.top,right:t.right,bottom:t.bottom,left:t.left,width:t.right-t.left,height:t.bottom-t.top}),t):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function l(e,t){for(var n=t;n;){if(n==e)return!0;n=c(n)}return!1}function c(e){var t=e.parentNode;return t&&11==t.nodeType&&t.host?t.host:t}}(window,document)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,