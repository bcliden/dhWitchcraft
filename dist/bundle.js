!function(n){var t={};function e(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:o})},e.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=13)}([function(n,t,e){var o,i,r={},s=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=o.apply(this,arguments)),i}),a=function(n){var t={};return function(n){if("function"==typeof n)return n();if(void 0===t[n]){var e=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}}(),l=null,c=0,f=[],d=e(45);function u(n,t){for(var e=0;e<n.length;e++){var o=n[e],i=r[o.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](o.parts[s]);for(;s<o.parts.length;s++)i.parts.push(b(o.parts[s],t))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(b(o.parts[s],t));r[o.id]={id:o.id,refs:1,parts:a}}}}function h(n,t){for(var e=[],o={},i=0;i<n.length;i++){var r=n[i],s=t.base?r[0]+t.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};o[s]?o[s].parts.push(a):e.push(o[s]={id:s,parts:[a]})}return e}function p(n,t){var e=a(n.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=f[f.length-1];if("top"===n.insertAt)o?o.nextSibling?e.insertBefore(t,o.nextSibling):e.appendChild(t):e.insertBefore(t,e.firstChild),f.push(t);else if("bottom"===n.insertAt)e.appendChild(t);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(n.insertInto+" "+n.insertAt.before);e.insertBefore(t,i)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var t=f.indexOf(n);t>=0&&f.splice(t,1)}function g(n){var t=document.createElement("style");return void 0===n.attrs.type&&(n.attrs.type="text/css"),v(t,n.attrs),p(n,t),t}function v(n,t){Object.keys(t).forEach(function(e){n.setAttribute(e,t[e])})}function b(n,t){var e,o,i,r;if(t.transform&&n.css){if(!(r=t.transform(n.css)))return function(){};n.css=r}if(t.singleton){var s=c++;e=l||(l=g(t)),o=x.bind(null,e,s,!1),i=x.bind(null,e,s,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(n){var t=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",v(t,n.attrs),p(n,t),t}(t),o=function(n,t,e){var o=e.css,i=e.sourceMap,r=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||r)&&(o=d(o));i&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([o],{type:"text/css"}),a=n.href;n.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,e,t),i=function(){m(e),e.href&&URL.revokeObjectURL(e.href)}):(e=g(t),o=function(n,t){var e=t.css,o=t.media;o&&n.setAttribute("media",o);if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){m(e)});return o(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;o(n=t)}else i()}}n.exports=function(n,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var e=h(n,t);return u(e,t),function(n){for(var o=[],i=0;i<e.length;i++){var s=e[i];(a=r[s.id]).refs--,o.push(a)}n&&u(h(n,t),t);for(i=0;i<o.length;i++){var a;if(0===(a=o[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete r[a.id]}}}};var y,w=(y=[],function(n,t){return y[n]=t,y.filter(Boolean).join("\n")});function x(n,t,e,o){var i=e?"":o.css;if(n.styleSheet)n.styleSheet.cssText=w(t,i);else{var r=document.createTextNode(i),s=n.childNodes;s[t]&&n.removeChild(s[t]),s.length?n.insertBefore(r,s[t]):n.appendChild(r)}}},function(n,t){n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",o=n[3];if(!o)return e;if(t&&"function"==typeof btoa){var i=(s=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),r=o.sources.map(function(n){return"/*# sourceURL="+o.sourceRoot+n+" */"});return[e].concat(r).concat([i]).join("\n")}var s;return[e].join("\n")}(t,n);return t[2]?"@media "+t[2]+"{"+e+"}":e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},i=0;i<this.length;i++){var r=this[i][0];"number"==typeof r&&(o[r]=!0)}for(i=0;i<n.length;i++){var s=n[i];"number"==typeof s[0]&&o[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="("+s[2]+") and ("+e+")"),t.push(s))}},t}},function(n,t){n.exports=function(n){return"string"!=typeof n?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),/["'() \t\n]/.test(n)?'"'+n.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':n)}},function(n,t,e){n.exports=e.p+"assets/fonts/873df2ee1b47fd0500f6a8553166d54a.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/d98afcae086245b03dbfd1acbf265032.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/907cc8d191da874aaeba202c22473249.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/f2160dd71ebd1ae35e459e06d7f811a9.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/62fb51e9e645f63599238881b9de15dd.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/f1a4a058fbba1e35a406188ae7eddaf8.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/0bb84ecaa8bbcd4877a5fa6ab91d0f99.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/50746a594c1b956a0eda6979af5feba3.woff2"},function(n,t,e){var o;n.exports=function n(t,e,i){function r(a,l){if(!e[a]){if(!t[a]){var c="function"==typeof o&&o;if(!l&&c)return o(a,!0);if(s)return s(a,!0);var f=new Error("Cannot find module '"+a+"'");throw f.code="MODULE_NOT_FOUND",f}var d=e[a]={exports:{}};t[a][0].call(d.exports,function(n){var e=t[a][1][n];return r(e||n)},d,d.exports,n,t,e,i)}return e[a].exports}for(var s="function"==typeof o&&o,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(n,t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o,i=function(){function n(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(t,e,o){return e&&n(t.prototype,e),o&&n(t,o),t}}(),r=n("./util/throwIfMissing"),s=(o=r)&&o.__esModule?o:{default:o},a=n("./util/dom"),l=function(){function n(t){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.isShowing=!1;var e=t.namespace,o=void 0===e?null:e,i=t.zoomFactor,r=void 0===i?(0,s.default)():i,a=t.containerEl,l=void 0===a?(0,s.default)():a;this.settings={namespace:o,zoomFactor:r,containerEl:l},this.openClasses=this._buildClasses("open"),this._buildElement()}return i(n,[{key:"_buildClasses",value:function(n){var t=["drift-"+n],e=this.settings.namespace;return e&&t.push(e+"-"+n),t}},{key:"_buildElement",value:function(){this.el=document.createElement("div"),(0,a.addClasses)(this.el,this._buildClasses("bounding-box"))}},{key:"show",value:function(n,t){this.isShowing=!0,this.settings.containerEl.appendChild(this.el);var e=this.el.style;e.width=Math.round(n/this.settings.zoomFactor)+"px",e.height=Math.round(t/this.settings.zoomFactor)+"px",(0,a.addClasses)(this.el,this.openClasses)}},{key:"hide",value:function(){this.isShowing&&this.settings.containerEl.removeChild(this.el),this.isShowing=!1,(0,a.removeClasses)(this.el,this.openClasses)}},{key:"setPosition",value:function(n,t,e){var o=window.pageXOffset,i=window.pageYOffset,r=e.left+n*e.width-this.el.clientWidth/2+o,s=e.top+t*e.height-this.el.clientHeight/2+i;this.el.getBoundingClientRect(),r<e.left+o?r=e.left+o:r+this.el.clientWidth>e.left+e.width+o&&(r=e.left+e.width-this.el.clientWidth+o),s<e.top+i?s=e.top+i:s+this.el.clientHeight>e.top+e.height+i&&(s=e.top+e.height-this.el.clientHeight+i),this.el.style.left=r+"px",this.el.style.top=s+"px"}}]),n}();e.default=l},{"./util/dom":6,"./util/throwIfMissing":7}],2:[function(n,t,e){"use strict";var o=function(){function n(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(t,e,o){return e&&n(t.prototype,e),o&&n(t,o),t}}(),i=n("./util/dom"),r=n("./injectBaseStylesheet"),s=d(r),a=n("./Trigger"),l=d(a),c=n("./ZoomPane"),f=d(c);function d(n){return n&&n.__esModule?n:{default:n}}t.exports=function(){function n(t){var e=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.VERSION="1.2.0",this.destroy=function(){e.trigger._unbindEvents()},this.triggerEl=t,!(0,i.isDOMElement)(this.triggerEl))throw new TypeError("`new Drift` requires a DOM element as its first argument.");var r=o.namespace,a=void 0===r?null:r,l=o.showWhitespaceAtEdges,c=void 0!==l&&l,f=o.containInline,d=void 0!==f&&f,u=o.inlineOffsetX,h=void 0===u?0:u,p=o.inlineOffsetY,m=void 0===p?0:p,g=o.inlineContainer,v=void 0===g?document.body:g,b=o.sourceAttribute,y=void 0===b?"data-zoom":b,w=o.zoomFactor,x=void 0===w?3:w,E=o.paneContainer,_=void 0===E?document.body:E,C=o.inlinePane,L=void 0===C?375:C,I=o.handleTouch,O=void 0===I||I,M=o.onShow,S=void 0===M?null:M,B=o.onHide,k=void 0===B?null:B,T=o.injectBaseStyles,R=void 0===T||T,z=o.hoverDelay,A=void 0===z?0:z,P=o.touchDelay,F=void 0===P?0:P,H=o.hoverBoundingBox,j=void 0!==H&&H,D=o.touchBoundingBox,U=void 0!==D&&D;if(!0!==L&&!(0,i.isDOMElement)(_))throw new TypeError("`paneContainer` must be a DOM element when `inlinePane !== true`");if(!(0,i.isDOMElement)(v))throw new TypeError("`inlineContainer` must be a DOM element");this.settings={namespace:a,showWhitespaceAtEdges:c,containInline:d,inlineOffsetX:h,inlineOffsetY:m,inlineContainer:v,sourceAttribute:y,zoomFactor:x,paneContainer:_,inlinePane:L,handleTouch:O,onShow:S,onHide:k,injectBaseStyles:R,hoverDelay:A,touchDelay:F,hoverBoundingBox:j,touchBoundingBox:U},this.settings.injectBaseStyles&&(0,s.default)(),this._buildZoomPane(),this._buildTrigger()}return o(n,[{key:"_buildZoomPane",value:function(){this.zoomPane=new f.default({container:this.settings.paneContainer,zoomFactor:this.settings.zoomFactor,showWhitespaceAtEdges:this.settings.showWhitespaceAtEdges,containInline:this.settings.containInline,inline:this.settings.inlinePane,namespace:this.settings.namespace,inlineOffsetX:this.settings.inlineOffsetX,inlineOffsetY:this.settings.inlineOffsetY,inlineContainer:this.settings.inlineContainer})}},{key:"_buildTrigger",value:function(){this.trigger=new l.default({el:this.triggerEl,zoomPane:this.zoomPane,handleTouch:this.settings.handleTouch,onShow:this.settings.onShow,onHide:this.settings.onHide,sourceAttribute:this.settings.sourceAttribute,hoverDelay:this.settings.hoverDelay,touchDelay:this.settings.touchDelay,hoverBoundingBox:this.settings.hoverBoundingBox,touchBoundingBox:this.settings.touchBoundingBox,namespace:this.settings.namespace,zoomFactor:this.settings.zoomFactor})}},{key:"setZoomImageURL",value:function(n){this.zoomPane._setImageURL(n)}},{key:"disable",value:function(){this.trigger.enabled=!1}},{key:"enable",value:function(){this.trigger.enabled=!0}},{key:"isShowing",get:function(){return this.zoomPane.isShowing}},{key:"zoomFactor",get:function(){return this.settings.zoomFactor},set:function(n){this.settings.zoomFactor=n,this.zoomPane.settings.zoomFactor=n}}]),n}()},{"./Trigger":3,"./ZoomPane":4,"./injectBaseStylesheet":5,"./util/dom":6}],3:[function(n,t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function n(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(t,e,o){return e&&n(t.prototype,e),o&&n(t,o),t}}(),i=n("./util/throwIfMissing"),r=l(i),s=n("./BoundingBox"),a=l(s);function l(n){return n&&n.__esModule?n:{default:n}}var c=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),f.call(this);var e=t.el,o=void 0===e?(0,r.default)():e,i=t.zoomPane,s=void 0===i?(0,r.default)():i,l=t.sourceAttribute,c=void 0===l?(0,r.default)():l,d=t.handleTouch,u=void 0===d?(0,r.default)():d,h=t.onShow,p=void 0===h?null:h,m=t.onHide,g=void 0===m?null:m,v=t.hoverDelay,b=void 0===v?0:v,y=t.touchDelay,w=void 0===y?0:y,x=t.hoverBoundingBox,E=void 0===x?(0,r.default)():x,_=t.touchBoundingBox,C=void 0===_?(0,r.default)():_,L=t.namespace,I=void 0===L?null:L,O=t.zoomFactor,M=void 0===O?(0,r.default)():O;this.settings={el:o,zoomPane:s,sourceAttribute:c,handleTouch:u,onShow:p,onHide:g,hoverDelay:b,touchDelay:w,hoverBoundingBox:E,touchBoundingBox:C,namespace:I,zoomFactor:M},(this.settings.hoverBoundingBox||this.settings.touchBoundingBox)&&(this.boundingBox=new a.default({namespace:this.settings.namespace,zoomFactor:this.settings.zoomFactor,containerEl:this.settings.el.offsetParent})),this.enabled=!0,this._bindEvents()}return o(n,[{key:"_bindEvents",value:function(){this.settings.el.addEventListener("mouseenter",this._handleEntry,!1),this.settings.el.addEventListener("mouseleave",this._hide,!1),this.settings.el.addEventListener("mousemove",this._handleMovement,!1),this.settings.handleTouch&&(this.settings.el.addEventListener("touchstart",this._handleEntry,!1),this.settings.el.addEventListener("touchend",this._hide,!1),this.settings.el.addEventListener("touchmove",this._handleMovement,!1))}},{key:"_unbindEvents",value:function(){this.settings.el.removeEventListener("mouseenter",this._handleEntry,!1),this.settings.el.removeEventListener("mouseleave",this._hide,!1),this.settings.el.removeEventListener("mousemove",this._handleMovement,!1),this.settings.handleTouch&&(this.settings.el.removeEventListener("touchstart",this._handleEntry,!1),this.settings.el.removeEventListener("touchend",this._hide,!1),this.settings.el.removeEventListener("touchmove",this._handleMovement,!1))}},{key:"isShowing",get:function(){return this.settings.zoomPane.isShowing}}]),n}(),f=function(){var n=this;this._handleEntry=function(t){t.preventDefault(),n._lastMovement=t,"mouseenter"==t.type&&n.settings.hoverDelay?n.entryTimeout=setTimeout(n._show,n.settings.hoverDelay):n.settings.touchDelay?n.entryTimeout=setTimeout(n._show,n.settings.touchDelay):n._show()},this._show=function(){if(n.enabled){var t=n.settings.onShow;if(t&&"function"==typeof t&&t(),n.settings.zoomPane.show(n.settings.el.getAttribute(n.settings.sourceAttribute),n.settings.el.clientWidth,n.settings.el.clientHeight),n._lastMovement){var e=n._lastMovement.touches;(e&&n.settings.touchBoundingBox||!e&&n.settings.hoverBoundingBox)&&n.boundingBox.show(n.settings.zoomPane.el.clientWidth,n.settings.zoomPane.el.clientHeight)}n._handleMovement()}},this._hide=function(t){t.preventDefault(),n._lastMovement=null,n.entryTimeout&&clearTimeout(n.entryTimeout),n.boundingBox&&n.boundingBox.hide();var e=n.settings.onHide;e&&"function"==typeof e&&e(),n.settings.zoomPane.hide()},this._handleMovement=function(t){if(t)t.preventDefault(),n._lastMovement=t;else{if(!n._lastMovement)return;t=n._lastMovement}var e=void 0,o=void 0;if(t.touches){var i=t.touches[0];e=i.clientX,o=i.clientY}else e=t.clientX,o=t.clientY;var r=n.settings.el,s=r.getBoundingClientRect(),a=e-s.left,l=o-s.top,c=a/n.settings.el.clientWidth,f=l/n.settings.el.clientHeight;n.boundingBox&&n.boundingBox.setPosition(c,f,s),n.settings.zoomPane.setPosition(c,f,s)}};e.default=c},{"./BoundingBox":1,"./util/throwIfMissing":7}],4:[function(n,t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o,i=function(){function n(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(t,e,o){return e&&n(t.prototype,e),o&&n(t,o),t}}(),r=n("./util/throwIfMissing"),s=(o=r)&&o.__esModule?o:{default:o},a=n("./util/dom"),l=document.createElement("div").style,c="undefined"!=typeof document&&("animation"in l||"webkitAnimation"in l),f=function(){function n(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this._completeShow=function(){t.el.removeEventListener("animationend",t._completeShow,!1),t.el.removeEventListener("webkitAnimationEnd",t._completeShow,!1),(0,a.removeClasses)(t.el,t.openingClasses)},this._completeHide=function(){t.el.removeEventListener("animationend",t._completeHide,!1),t.el.removeEventListener("webkitAnimationEnd",t._completeHide,!1),(0,a.removeClasses)(t.el,t.openClasses),(0,a.removeClasses)(t.el,t.closingClasses),(0,a.removeClasses)(t.el,t.inlineClasses),t.el.setAttribute("style",""),t.el.parentElement===t.settings.container?t.settings.container.removeChild(t.el):t.el.parentElement===t.settings.inlineContainer&&t.settings.inlineContainer.removeChild(t.el)},this._handleLoad=function(){t.imgEl.removeEventListener("load",t._handleLoad,!1),(0,a.removeClasses)(t.el,t.loadingClasses)},this.isShowing=!1;var o=e.container,i=void 0===o?null:o,r=e.zoomFactor,l=void 0===r?(0,s.default)():r,c=e.inline,f=void 0===c?(0,s.default)():c,d=e.namespace,u=void 0===d?null:d,h=e.showWhitespaceAtEdges,p=void 0===h?(0,s.default)():h,m=e.containInline,g=void 0===m?(0,s.default)():m,v=e.inlineOffsetX,b=void 0===v?0:v,y=e.inlineOffsetY,w=void 0===y?0:y,x=e.inlineContainer,E=void 0===x?document.body:x;this.settings={container:i,zoomFactor:l,inline:f,namespace:u,showWhitespaceAtEdges:p,containInline:g,inlineOffsetX:b,inlineOffsetY:w,inlineContainer:E},this.openClasses=this._buildClasses("open"),this.openingClasses=this._buildClasses("opening"),this.closingClasses=this._buildClasses("closing"),this.inlineClasses=this._buildClasses("inline"),this.loadingClasses=this._buildClasses("loading"),this._buildElement()}return i(n,[{key:"_buildClasses",value:function(n){var t=["drift-"+n],e=this.settings.namespace;return e&&t.push(e+"-"+n),t}},{key:"_buildElement",value:function(){this.el=document.createElement("div"),(0,a.addClasses)(this.el,this._buildClasses("zoom-pane"));var n=document.createElement("div");(0,a.addClasses)(n,this._buildClasses("zoom-pane-loader")),this.el.appendChild(n),this.imgEl=document.createElement("img"),this.el.appendChild(this.imgEl)}},{key:"_setImageURL",value:function(n){this.imgEl.setAttribute("src",n)}},{key:"_setImageSize",value:function(n,t){this.imgEl.style.width=n*this.settings.zoomFactor+"px",this.imgEl.style.height=t*this.settings.zoomFactor+"px"}},{key:"setPosition",value:function(n,t,e){var o=-(this.imgEl.clientWidth*n-this.el.clientWidth/2),i=-(this.imgEl.clientHeight*t-this.el.clientHeight/2),r=-(this.imgEl.clientWidth-this.el.clientWidth),s=-(this.imgEl.clientHeight-this.el.clientHeight);if(this.el.parentElement===this.settings.inlineContainer){var a=window.pageXOffset,l=window.pageYOffset,c=e.left+n*e.width-this.el.clientWidth/2+this.settings.inlineOffsetX+a,f=e.top+t*e.height-this.el.clientHeight/2+this.settings.inlineOffsetY+l;this.settings.containInline&&(this.el.getBoundingClientRect(),c<e.left+a?c=e.left+a:c+this.el.clientWidth>e.left+e.width+a&&(c=e.left+e.width-this.el.clientWidth+a),f<e.top+l?f=e.top+l:f+this.el.clientHeight>e.top+e.height+l&&(f=e.top+e.height-this.el.clientHeight+l)),this.el.style.left=c+"px",this.el.style.top=f+"px"}this.settings.showWhitespaceAtEdges||(o>0?o=0:o<r&&(o=r),i>0?i=0:i<s&&(i=s)),this.imgEl.style.transform="translate("+o+"px, "+i+"px)",this.imgEl.style.webkitTransform="translate("+o+"px, "+i+"px)"}},{key:"_removeListenersAndResetClasses",value:function(){this.el.removeEventListener("animationend",this._completeShow,!1),this.el.removeEventListener("animationend",this._completeHide,!1),this.el.removeEventListener("webkitAnimationEnd",this._completeShow,!1),this.el.removeEventListener("webkitAnimationEnd",this._completeHide,!1),(0,a.removeClasses)(this.el,this.openClasses),(0,a.removeClasses)(this.el,this.closingClasses)}},{key:"show",value:function(n,t,e){this._removeListenersAndResetClasses(),this.isShowing=!0,(0,a.addClasses)(this.el,this.openClasses),(0,a.addClasses)(this.el,this.loadingClasses),this.imgEl.addEventListener("load",this._handleLoad,!1),this._setImageURL(n),this._setImageSize(t,e),this._isInline?this._showInline():this._showInContainer(),c&&(this.el.addEventListener("animationend",this._completeShow,!1),this.el.addEventListener("webkitAnimationEnd",this._completeShow,!1),(0,a.addClasses)(this.el,this.openingClasses))}},{key:"_showInline",value:function(){this.settings.inlineContainer.appendChild(this.el),(0,a.addClasses)(this.el,this.inlineClasses)}},{key:"_showInContainer",value:function(){this.settings.container.appendChild(this.el)}},{key:"hide",value:function(){this._removeListenersAndResetClasses(),this.isShowing=!1,c?(this.el.addEventListener("animationend",this._completeHide,!1),this.el.addEventListener("webkitAnimationEnd",this._completeHide,!1),(0,a.addClasses)(this.el,this.closingClasses)):((0,a.removeClasses)(this.el,this.openClasses),(0,a.removeClasses)(this.el,this.inlineClasses))}},{key:"_isInline",get:function(){var n=this.settings.inline;return!0===n||"number"==typeof n&&window.innerWidth<=n}}]),n}();e.default=f},{"./util/dom":6,"./util/throwIfMissing":7}],5:[function(n,t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){if(!document.querySelector(".drift-base-styles")){var n=document.createElement("style");n.type="text/css",n.classList.add("drift-base-styles"),n.appendChild(document.createTextNode(o));var t=document.head;t.insertBefore(n,t.firstChild)}};var o="\n@keyframes noop {\n  0% { zoom: 1; }\n}\n\n@-webkit-keyframes noop {\n  0% { zoom: 1; }\n}\n\n.drift-zoom-pane.drift-open {\n  display: block;\n}\n\n.drift-zoom-pane.drift-opening, .drift-zoom-pane.drift-closing {\n  animation: noop 1ms;\n  -webkit-animation: noop 1ms;\n}\n\n.drift-zoom-pane {\n  position: absolute;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n.drift-zoom-pane-loader {\n  display: none;\n}\n\n.drift-zoom-pane img {\n  position: absolute;\n  display: block;\n  max-width: none;\n  max-height: none;\n}\n\n.drift-bounding-box {\n  position: absolute;\n  pointer-events: none;\n}\n"},{}],6:[function(n,t,e){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n};Object.defineProperty(e,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(n){return void 0===n?"undefined":o(n)}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":void 0===n?"undefined":o(n)};e.isDOMElement=function(n){return r?n instanceof HTMLElement:n&&"object"===(void 0===n?"undefined":i(n))&&null!==n&&1===n.nodeType&&"string"==typeof n.nodeName},e.addClasses=function(n,t){t.forEach(function(t){n.classList.add(t)})},e.removeClasses=function(n,t){t.forEach(function(t){n.classList.remove(t)})};var r="object"===("undefined"==typeof HTMLElement?"undefined":i(HTMLElement))},{}],7:[function(n,t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){throw new Error("Missing parameter")}},{}]},{},[2])(2)},function(n,t,e){n.exports=function(){"use strict";function n(n){for(var t=n.length,e=[],o=0;o<t;o+=1)e.push(n[o]);return e}function t(n){return n instanceof Element?n:"string"==typeof n?document.querySelector(n):null}function e(n){var t=n.id,e=n.i;return"scrollama__debug-step--"+t+"-"+e}function o(n){var t=n.id;return"scrollama__debug-offset--"+t}function i(n){var t=n.id,i=n.offsetVal,r=n.stepEl,s=r[0].getAttribute("class");r.forEach(function(n,o){return function(n){var t=n.id,o=n.i,i=e({id:t,i:o}),r=document.createElement("div");r.setAttribute("id",i+"_above"),r.setAttribute("class","scrollama__debug-step"),r.style.position="fixed",r.style.left="0",r.style.width="100%",r.style.backgroundImage="repeating-linear-gradient(45deg, green 0, green 2px, white 0, white 40px)",r.style.border="2px solid green",r.style.opacity="0.33",r.style.zIndex="9999",r.style.display="none",document.body.appendChild(r);var s=document.createElement("div");s.setAttribute("id",i+"_below"),s.setAttribute("class","scrollama__debug-step"),s.style.position="fixed",s.style.left="0",s.style.width="100%",s.style.backgroundImage="repeating-linear-gradient(135deg, orange 0, orange 2px, white 0, white 40px)",s.style.border="2px solid orange",s.style.opacity="0.33",s.style.zIndex="9999",s.style.display="none",document.body.appendChild(s)}({id:t,i:o})}),function(n){var t=n.id,e=n.offsetVal,i=n.stepClass,r=document.createElement("div");r.setAttribute("id",o({id:t})),r.setAttribute("class","scrollama__debug-offset"),r.style.position="fixed",r.style.left="0",r.style.width="100%",r.style.height="0px",r.style.borderTop="2px dashed black",r.style.zIndex="9999";var s=document.createElement("p");s.innerText='".'+i+'" trigger: '+e,s.style.fontSize="12px",s.style.fontFamily="monospace",s.style.color="black",s.style.margin="0",s.style.padding="6px",r.appendChild(s),document.body.appendChild(r)}({id:t,offsetVal:i,stepClass:s})}function r(n){var t=n.id,i=n.stepOffsetHeight,r=n.offsetMargin;n.offsetVal,i.forEach(function(n,o){return function(n){var t=n.id,o=n.h,i=n.i,r=n.offsetMargin,s=e({id:t,i:i}),a=document.querySelector("#"+s+"_above");a.style.height=o+"px",a.style.top=r-o+"px";var l=document.querySelector("#"+s+"_below");l.style.height=o+"px",l.style.top=r+"px"}({id:t,h:n,i:o,offsetMargin:r})}),function(n){var t=n.id,e=n.offsetMargin,i=(n.offsetVal,o({id:t}));document.querySelector("#"+i).style.top=e+"px"}({id:t,offsetMargin:r})}function s(n){var t=n.id,o=n.index,i=n.state,r=e({id:t,i:o}),s=document.querySelector("#"+r+"_above"),a=document.querySelector("#"+r+"_below"),l="enter"===i?"block":"none";s&&(s.style.display=l),a&&(a.style.display=l)}return function(){var e=1,o={},a={},l=null,c=null,f=null,d=null,u=0,h=0,p=0,m=0,g=null,v=null,b=null,y=!1,w=!1,x=!1,E=!1,_=0,C=!1,L=!1,I=null,O=null,M=-1,S=null,B=[];function k(n){var t=0;if(n.offsetParent)do{t+=n.offsetTop,n=n.offsetParent}while(n);return t<0?0:t}function T(n){return+n.getAttribute("data-scrollama-index")}function R(){window.pageYOffset>M?S="down":window.pageYOffset<M&&(S="up"),M=window.pageYOffset}function z(){var n,t;p=window.innerHeight,n=document.body,t=document.documentElement,m=Math.max(n.scrollHeight,n.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight),b=c?c.getBoundingClientRect():null,h=u*p,g=f?f.map(function(n){return n.offsetHeight}):[],v=f?f.map(k):[],w&&y&&Z(),x&&r({id:d,stepOffsetHeight:g,offsetMargin:h,offsetVal:u})}function A(n){n&&!w?(y&&Z(),w=!0):n||(a.top&&a.top.disconnect(),a.bottom&&a.bottom.disconnect(),a.stepAbove&&a.stepAbove.forEach(function(n){return n.disconnect()}),a.stepBelow&&a.stepBelow.forEach(function(n){return n.disconnect()}),a.stepProgress&&a.stepProgress.forEach(function(n){return n.disconnect()}),a.viewportAbove&&a.viewportAbove.forEach(function(n){return n.disconnect()}),a.viewportBelow&&a.viewportBelow.forEach(function(n){return n.disconnect()}),w=!1)}function P(n,t){if("above"===t)for(var e=0;e<n;e++){var o=I[e];"enter"===o.state&&H(f[e]),"up"===o.direction&&(F(f[e],"down"),H(f[e]))}else if("below"===t)for(var i=I.length-1;i>n;i--){var r=I[i];"enter"===r.state&&H(f[i]),"down"===r.direction&&(F(f[i],"up"),H(f[i]))}}function F(n,t){void 0===t&&(t=!0);var e=T(n),i={element:n,index:e,direction:S};I[e].direction=S,I[e].state="enter",C&&t&&"down"===S&&P(e,"above"),C&&t&&"up"===S&&P(e,"below"),o.stepEnter&&"function"==typeof o.stepEnter&&!B[e]&&(o.stepEnter(i,I),x&&s({id:d,index:e,state:"enter"}),L&&(B[e]=!0)),E&&j(n,"down"===S?0:1)}function H(n){var t=T(n),e={element:n,index:t,direction:S};I[t].direction=S,I[t].state="exit",E&&j(n,"down"===S?1:0),o.stepExit&&"function"==typeof o.stepExit&&(o.stepExit(e,I),x&&s({id:d,index:t,state:"exit"}))}function j(n,t){var e=T(n),i={element:n,index:e,progress:t};o.stepProgress&&"function"==typeof o.stepProgress&&o.stepProgress(i)}function D(){var n={direction:S};O.direction=S,O.state="enter",o.containerEnter&&"function"==typeof o.containerEnter&&o.containerEnter(n)}function U(){var n={direction:S};O.direction=S,O.state="exit",o.containerExit&&"function"==typeof o.containerExit&&o.containerExit(n)}function N(n){R(),n.forEach(function(n){var t=n.isIntersecting,o=n.boundingClientRect,i=n.target,r=o.bottom,s=o.height,a=r-h,l=T(i),c=I[l];a>=-e&&(t&&"down"===S&&"enter"!==c.state?F(i,S):t||"up"!==S||"enter"!==c.state?!t&&a>=s&&"down"===S&&"enter"===c.state&&H(i):H(i))})}function W(n){R(),n.forEach(function(n){var t=n.isIntersecting,o=n.boundingClientRect,i=n.target,r=o.bottom,s=o.height,a=r-h,l=T(i),c=I[l];a>=-e&&a<s&&t&&"up"===S&&"enter"!==c.state?F(i,S):a<=e&&!t&&"down"===S&&"enter"===c.state&&H(i)})}function q(n){R(),n.forEach(function(n){var t=n.isIntersecting,e=n.target,o=T(e),i=I[o];t&&"down"===S&&"enter"!==i.state&&"down"!==i.direction&&(F(e,"down"),H(e))})}function Y(n){R(),n.forEach(function(n){var t=n.isIntersecting,e=n.target,o=T(e),i=I[o];t&&"up"===S&&"enter"!==i.state&&"up"!==i.direction&&(F(e,"up"),H(e))})}function V(n){R(),n.forEach(function(n){var t=n.isIntersecting,o=n.intersectionRatio,i=n.boundingClientRect,r=n.target,s=i.bottom,a=s-h;t&&a>=-e&&j(r,+o.toFixed(3))})}function X(n){R();var t=n[0],o=t.isIntersecting,i=t.boundingClientRect,r=(i.top,i.bottom);r>-e&&(o?D():"enter"===O.state&&U())}function $(n){R();var t=n[0],o=t.isIntersecting,i=t.boundingClientRect,r=i.top;r<e&&(o?D():"enter"===O.state&&U())}function G(){a.stepProgress&&a.stepProgress.forEach(function(n){return n.disconnect()}),a.stepProgress=f.map(function(n,t){var e=g[t]-h,o=-p+h,i=e+"px 0px "+o+"px 0px",r=function(n){for(var t=Math.ceil(n/_),e=[],o=1/t,i=0;i<t;i++)e.push(i*o);return e}(g[t]),s={root:null,rootMargin:i,threshold:r},a=new IntersectionObserver(V,s);return a.observe(n),a})}function Z(){a.viewportAbove&&a.viewportAbove.forEach(function(n){return n.disconnect()}),a.viewportAbove=f.map(function(n,t){var e=v[t],o=-(p-h+g[t]),i=e+"px 0px "+o+"px 0px",r={root:null,rootMargin:i,threshold:0},s=new IntersectionObserver(q,r);return s.observe(n),s}),a.viewportBelow&&a.viewportBelow.forEach(function(n){return n.disconnect()}),a.viewportBelow=f.map(function(n,t){var e=-(h+g[t]),o=m-v[t]-g[t]-h,i=e+"px 0px "+o+"px 0px",r={root:null,rootMargin:i,threshold:0},s=new IntersectionObserver(Y,r);return s.observe(n),s}),a.stepAbove&&a.stepAbove.forEach(function(n){return n.disconnect()}),a.stepAbove=f.map(function(n,t){var e=g[t],o=-p+h,i=e+"px 0px "+o+"px 0px",r={root:null,rootMargin:i,threshold:0},s=new IntersectionObserver(N,r);return s.observe(n),s}),a.stepBelow&&a.stepBelow.forEach(function(n){return n.disconnect()}),a.stepBelow=f.map(function(n,t){var e=-h,o=m-p+g[t]+h,i=e+"px 0px "+o+"px 0px",r={root:null,rootMargin:i,threshold:0},s=new IntersectionObserver(W,r);return s.observe(n),s}),E&&G(),l&&c&&(function(){a.top&&a.top.unobserve(l);var n={root:null,rootMargin:p+"px 0px -"+p+"px 0px",threshold:0};a.top=new IntersectionObserver(X,n),a.top.observe(l)}(),function(){a.bottom&&a.bottom.unobserve(l);var n={root:null,rootMargin:"-"+b.height+"px 0px "+b.height+"px 0px",threshold:0};a.bottom=new IntersectionObserver($,n),a.bottom.observe(l)}())}var J={};return J.setup=function(e){var o=e.container,r=e.graphic,s=e.step,a=e.offset;void 0===a&&(a=.5);var h=e.progress;void 0===h&&(h=!1);var p=e.threshold;void 0===p&&(p=4);var m=e.debug;void 0===m&&(m=!1);var g=e.order;void 0===g&&(g=!0);var v,b,w,M,S,B=e.once;return void 0===B&&(B=!1),b=(v="abcdefghijklmnopqrstuv").length,w=(new Date).getTime(),d=""+[0,0,0].map(function(n){return v[Math.floor(Math.random()*b)]}).join("")+w,M=s,void 0===S&&(S=document),f="string"==typeof M?n(S.querySelectorAll(M)):M instanceof NodeList?n(M):M instanceof Array?M:[],l=o?t(o):null,c=r?t(r):null,f.length?(x=m,E=h,C=g,L=B,J.offsetTrigger(a),_=Math.max(1,+p),y=!0,x&&i({id:d,stepEl:f,offsetVal:u}),f.forEach(function(n,t){return n.setAttribute("data-scrollama-index",t)}),I=f.map(function(){return{direction:null,state:null}}),O={direction:null,state:null},z(),A(!0),J):(console.error("scrollama error: no step elements"),J)},J.resize=function(){return z(),J},J.enable=function(){return A(!0),J},J.disable=function(){return A(!1),J},J.destroy=function(){A(!1),Object.keys(o).forEach(function(n){return o[n]=null}),Object.keys(a).forEach(function(n){return a[n]=null})},J.offsetTrigger=function(n){return n&&(isNaN(n),1)?(u=Math.min(Math.max(0,n),1),J):u},J.onStepEnter=function(n){return o.stepEnter=n,J},J.onStepExit=function(n){return o.stepExit=n,J},J.onStepProgress=function(n){return o.stepProgress=n,J},J.onContainerEnter=function(n){return o.containerEnter=n,J},J.onContainerExit=function(n){return o.containerExit=n,J},J}}()},function(n,t,e){"use strict";e.r(t);e(50),e(49),e(44),e(24),e(18),e(16),e(14);var o=e(12),i=e.n(o),r=e(11),s=e.n(r);const a=Array.from(document.getElementsByClassName("driftImg")),l=document.querySelector(".chart");document.querySelector(".scroll__text");var c={namespace:null,showWhitespaceAtEdges:!1,containInline:!1,inlineOffsetX:0,inlineOffsetY:0,inlineContainer:document.body,sourceAttribute:"src",zoomFactor:3,paneContainer:document.querySelector(".chart"),inlinePane:375,handleTouch:!0,onShow:function(){a.forEach(function(n){n.classList.toggle("blurry")})},onHide:function(){a.forEach(function(n){n.classList.toggle("blurry")})},injectBaseStyles:!0,hoverDelay:0,touchDelay:0,hoverBoundingBox:!1,touchBoundingBox:!1};const f=[];for(let n of a){let t=new s.a(n,c);f.push(t)}document.querySelector("#scroll");const d=document.querySelector(".scroll__graphic"),u=document.querySelector(".scroll__text"),h=document.querySelectorAll(".step"),p=i()();function m(){const n=Math.floor(.25*window.innerHeight);h.forEach(function(t){t.style.marginBottom=`${n}px`}),d.style.height=window.innerHeight+"px";const t=u.offsetWidth,e=document.body.offsetWidth,o=e-t-32,i=Math.floor(.95*window.innerHeight);l.style.width=o+"px",l.style.height=i+"px",f.forEach(function(n){n.zoomFactor=400/e*10}),p.resize()}function g(n){h[n.index].classList.add("is-active"),a.forEach(function(t,e){e===n.index?t.classList.add("is-active"):t.classList.remove("is-active")})}function v(n){d.classList.add("is-fixed"),d.classList.remove("is-bottom")}function b(n){d.classList.remove("is-fixed"),"down"===n.direction?d.classList.add("is-bottom"):d.classList.remove("is-bottom")}window.addEventListener("load",function(){m(),p.setup({container:"#scroll",graphic:".scroll__graphic",text:".scroll__text",step:".scroll__text .step",offset:.7}).onStepEnter(g).onContainerEnter(v).onContainerExit(b),window.addEventListener("resize",m)})},function(n,t){window.addEventListener("load",function(){document.body.style.visibility="visible"})},function(n,t,e){var o=e(2);(n.exports=e(1)(!1)).push([n.i,"/* COLOR VARS */\n\n:root {\n    --chart-red: #c84b40;\n    --chart-red-darker: #993931;\n    --chart-blue: #41788e;\n\n    --main-font-900: #212121;\n    --main-font-800: #424242;\n    --main-font-700: #757575;\n\n    font-size: 16px;\n}\n\n/* FONT IMPORTS */\n\n@font-face {\n    font-family: 'Codystar';\n    src:    url("+o(e(10))+") format('woff2'),\n            url("+o(e(9))+") format('woff');\n    font-weight: 300;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: 'Lora';\n    src: url("+o(e(6))+") format('woff2'),\n         url("+o(e(5))+") format('woff');\n    font-weight: 400;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: 'Lora';\n    src: url("+o(e(4))+") format('woff2'),\n         url("+o(e(3))+") format('woff');\n    font-weight: 400;\n    font-style: italic;\n}\n\n@font-face {\n    font-family: 'Lato';\n    src:    url("+o(e(8))+") format('woff2'),\n            url("+o(e(7))+") format('woff');\n    font-weight: 400;\n    font-style: normal;\n}\n\n/* ANIMATIONS */\n\n@keyframes titlefadein {\n    from {\n        opacity: 0;\n        margin-left: 10rem\n    }\n    to {\n        opacity: 1;\n        margin-left: 0rem;\n    }\n}\n\n/* GENERAL STYLES */\n\nhtml {\n    font-family: 'Lora', serif;\n    color: var(--main-font-900);\n    line-height: 2;\n}\n\nh1, h2, h3, h4, h5, h6 {\n    font-family: 'Lato', sans-serif;\n}\n\nem {\n    font-style: italic;\n}\n\na {\n    transition: .75s all;\n    text-decoration: none;\n    border-bottom: 1px dashed var(--chart-red);  \n    color: var(--chart-red);  \n}\n\na:hover {\n    color: var(--chart-red-darker);\n    border-bottom: 1px solid var(--chart-red-darker);\n}\n\na:visited {\n\n}\n\n.contained {\n    width: 80%;\n    margin-left: auto;\n    margin-right: auto;\n}\n\nsection {\n    margin-top: 5rem;\n}\n\n.dropcap {\n    float: left;\n    font-family: 'Codystar';\n    font-size: 6rem;\n    line-height: 5rem;\n    padding: 6px 8px 0 4px;\n}\n\nblockquote {\n    border-left: 1px dashed var(--main-font-900);\n    padding-left: 1rem;\n}\n\n/* HEADER STYLES */\n\nheader {\n    /* padding-top: 2rem; */\n    position: absolute;\n    top: 2rem;\n    right: 1rem;\n    left: 50%;\n}\n\nnav {\n    text-align: right;\n    display: flex;\n    justify-content: flex-end;\n}\n\nnav a {\n    display: inline;\n    margin-right: 2rem;\n    color: var(--main-font-700);\n    /* border-bottom: 1px solid rgba(0, 0, 0, 0); */\n}\n\nnav a:hover {\n    /* border-bottom: 1px dashed black; */\n}\n\n/* HERO STYLES */\n\n.hero {\n    /* height: 87%; */\n    /* margin-top: 3%; */\n}\n\n.title-card {\n    /* max-width: 800px; */\n    /* line-height: 1.15; */\n\n    animation-name: titlefadein;\n    animation-duration: 1.5s;\n    animation-timing-function: ease-out;\n    animation-delay: .25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: both;\n}\n\n.title {\n    font-family: 'Codystar', sans-serif;\n    font-weight: 300;\n    font-size: 7rem;\n    letter-spacing: .5rem;\n    line-height: 1.15;\n    margin: 0;\n    padding: 1rem 0;\n}\n\n.title span {\n    display: block;\n}\n\n.byline {\n    padding-left: 2rem;\n    line-spacing: 1.8;\n}\n\n.byline span {\n    font-style: italic;\n}\n\n.byline p {\n    margin: 0;\n}\n\n.abstract-card {\n    line-height: 1.8;\n    margin-top: 5%;\n}\n\n.abstract-card p {\n    padding-left: 2rem;\n}\n\n@media screen and (max-width: 950px) {\n    .title {\n        font-size: 5rem;\n        overflow: hidden;\n    }\n    .byline {\n        max-width: 75%;\n    }\n\n}\n\n/* SCROLL SPECIFIC CSS */\n\n#scroll {\n    position: relative;\n    border-top: 1px dashed #000;\n    border-bottom: 1px dashed #000;\n}\n\n.scroll__graphic {\n    position: absolute;\n    top: 0;\n    /* left: 0; */\n    bottom: auto;\n    /* width: 100%; */\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n\n    right: 1rem;\n    width: 60%;\n}\n\n.scroll__graphic.is-fixed {\n    position: fixed;\n}\n\n.scroll__graphic.is-bottom {\n    bottom: 0;\n    top: auto;\n}\n\n.scroll__graphic .preview {\n    position: absolute;\n    right: 3rem;\n    top: 3rem;\n}\n\n.preview {\n    width: 50%;\n    height: 50%;\n    border: 1px dashed black;\n    background-color: #7575;\n}\n\n.scroll__graphic .chart {\n    position: absolute;\n    /* right: 5%; */\n    right: 1rem;\n    top: 50%;\n    -moz-transform: translateY(-50%);\n    -webkit-transform: translateY(-50%);\n    transform: translateY(-50%);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n/* .scroll__graphic .chart img {\n    border: 3px solid rgba(0, 0, 0, .2);\n    padding-right: 10px;\n    transition: .3s opacity,\n                .3s filter;\n} */\n\n.scroll__text {\n    padding: 0 1rem;\n    max-width: 30rem;\n\n    padding: 10% 0 0 5%;\n    transition: .3s filter;\n}\n\n.step {\n    opacity: .3;\n    transition: all 1.5s;\n}\n\n.step.is-active {\n    opacity: 1;\n}\n\n.blurry {\n    filter: blur(20px);\n    opacity: .5;\n}\n\n.driftImg {\n    transition: 1s all ease-out;\n    opacity: 0;\n    visibility: hidden;\n    display: none;\n    width: 95%;\n\n    border: 3px solid rgba(0, 0, 0, .2);\n    padding-right: 10px;\n    transition: .3s opacity,\n                .3s filter;\n}\n\n.driftImg.is-active {\n    opacity: 1;\n    visibility: visible;\n    display: block;\n}\n\n/* FULL OPACITY ON PRINT */\n@media print {\n    .step {\n        opacity: 1;\n    }\n}\n\n/* ACKNOWLEDGEMENTS */\n\n.acknowledgements {\n    margin: 5rem auto;\n    max-width: 600px;\n}\n\n/* FOOTNOTE POPUP CSS */\n\n.footnote {\n    position: relative;\n    /* display: inline-block; */\n    cursor: help;\n    /* border-bottom: 1px dotted var(--main-font-900); */\n\n    color: var(--chart-blue);\n    border-bottom: 1px solid var(--chart-blue);\n}\n\n.footnote .footnotetext {\n    visibility: hidden;\n    background-color: var(--main-font-800);\n    color: #fff;\n    text-align: left;\n    border-radius: 6px;\n    padding: .5rem 1rem;\n \n    /* Positioning for citation */\n    position: absolute;\n    z-index: 1;\n    opacity: 0;\n\n    top: 125%;\n    left: 25%;\n    width: 360px;\n\n    /* quarter of width: */\n    margin-left: -90px;\n    transition: .5s all;\n}\n\n.footnote:hover .footnotetext {\n    visibility: visible;\n    opacity: 1;\n}\n\n.footnote .footnotetext::after {\n    z-index: 1;\n    content: \" \";\n    position: absolute;\n    bottom: 100%;  /* At the top of the tooltip */\n    left: 25%;\n    margin-left: 5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent transparent black transparent;\n}",""])},function(n,t,e){var o=e(15);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(0)(o,i);o.locals&&(n.exports=o.locals)},function(n,t,e){(n.exports=e(1)(!1)).push([n.i,'/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',""])},function(n,t,e){var o=e(17);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(0)(o,i);o.locals&&(n.exports=o.locals)},function(n,t,e){n.exports=e.p+"assets/fonts/003abe8e6238d356cae0e7625c9357ec.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/b899bade4bf459740fa782b87100b6a1.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/5e6017b36ebf48a62f8b98a765f7d12c.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/8b3f2e49c47781bf9eca8148de97357a.woff2"},function(n,t,e){var o=e(2);(n.exports=e(1)(!1)).push([n.i,"/* lora-400normal - latin */\n@font-face {\n  font-family: 'Lora';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src:\n    local('Lora Regular '),\n    local('Lora-Regular'),\n    url("+o(e(6))+") format('woff2'), \n    url("+o(e(5))+") format('woff'); /* Modern Browsers */\n}\n\n/* lora-400italic - latin */\n@font-face {\n  font-family: 'Lora';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src:\n    local('Lora Regular italic'),\n    local('Lora-Regularitalic'),\n    url("+o(e(4))+") format('woff2'), \n    url("+o(e(3))+") format('woff'); /* Modern Browsers */\n}\n\n/* lora-700normal - latin */\n@font-face {\n  font-family: 'Lora';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src:\n    local('Lora Bold '),\n    local('Lora-Bold'),\n    url("+o(e(22))+") format('woff2'), \n    url("+o(e(21))+") format('woff'); /* Modern Browsers */\n}\n\n/* lora-700italic - latin */\n@font-face {\n  font-family: 'Lora';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src:\n    local('Lora Bold italic'),\n    local('Lora-Bolditalic'),\n    url("+o(e(20))+") format('woff2'), \n    url("+o(e(19))+") format('woff'); /* Modern Browsers */\n}\n\n",""])},function(n,t,e){var o=e(23);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(0)(o,i);o.locals&&(n.exports=o.locals)},function(n,t,e){n.exports=e.p+"assets/fonts/e792d6c62329e025ca1cbea793ba8de5.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/fd67cf72cde7716bdadf8a3992b37fa2.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/d79dd0661ba130ec7a7e7c060fcb7e09.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/f2de2c6ec69b0c11f1bc44c5348c2f35.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/0a06ba1bdf385495f2679324cfbedd13.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/c66215e09d2420885ad1a1f3eb2bac37.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/96759e32fdc800c78b527a3e53fe2be6.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/7fbbfd1610770d594aef639cfefdd0b0.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/c4082958a18f04bd32a3d3e1f5e390a5.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/b45e52f342dc29c8553f51a99f924871.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/06eb177ee6c1960bcd79f1cf8c812000.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/7d718d7299ab7f9fab17d7d4f13ded57.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/ba2452bdc790a4fee05202eac3c092b3.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/bbbd26aeee9c5b967e35933bce02d358.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/6ea8380326f67e10380953b188d96a2b.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/ef884f11c6adb5df51c446911612e7af.woff2"},function(n,t,e){n.exports=e.p+"assets/fonts/752c20224144760a496fb9e19a62f616.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/f8028e61362a54aa64dcb26e8063d0d7.woff2"},function(n,t,e){var o=e(2);(n.exports=e(1)(!1)).push([n.i,"/* lato-100normal - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 100;\n  src:\n    local('Lato Thin '),\n    local('Lato-Thin'),\n    url("+o(e(42))+") format('woff2'), \n    url("+o(e(41))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-100italic - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 100;\n  src:\n    local('Lato Thin italic'),\n    local('Lato-Thinitalic'),\n    url("+o(e(40))+") format('woff2'), \n    url("+o(e(39))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-300normal - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src:\n    local('Lato Light '),\n    local('Lato-Light'),\n    url("+o(e(38))+") format('woff2'), \n    url("+o(e(37))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-300italic - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 300;\n  src:\n    local('Lato Light italic'),\n    local('Lato-Lightitalic'),\n    url("+o(e(36))+") format('woff2'), \n    url("+o(e(35))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-400normal - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src:\n    local('Lato Regular '),\n    local('Lato-Regular'),\n    url("+o(e(8))+") format('woff2'), \n    url("+o(e(7))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-400italic - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src:\n    local('Lato Regular italic'),\n    local('Lato-Regularitalic'),\n    url("+o(e(34))+") format('woff2'), \n    url("+o(e(33))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-700normal - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src:\n    local('Lato Bold '),\n    local('Lato-Bold'),\n    url("+o(e(32))+") format('woff2'), \n    url("+o(e(31))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-700italic - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src:\n    local('Lato Bold italic'),\n    local('Lato-Bolditalic'),\n    url("+o(e(30))+") format('woff2'), \n    url("+o(e(29))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-900normal - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 900;\n  src:\n    local('Lato Black '),\n    local('Lato-Black'),\n    url("+o(e(28))+") format('woff2'), \n    url("+o(e(27))+") format('woff'); /* Modern Browsers */\n}\n\n/* lato-900italic - latin */\n@font-face {\n  font-family: 'Lato';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 900;\n  src:\n    local('Lato Black italic'),\n    local('Lato-Blackitalic'),\n    url("+o(e(26))+") format('woff2'), \n    url("+o(e(25))+") format('woff'); /* Modern Browsers */\n}\n\n",""])},function(n,t,e){var o=e(43);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(0)(o,i);o.locals&&(n.exports=o.locals)},function(n,t){n.exports=function(n){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var e=t.protocol+"//"+t.host,o=e+t.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,t){var i,r=t.trim().replace(/^"(.*)"$/,function(n,t){return t}).replace(/^'(.*)'$/,function(n,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?n:(i=0===r.indexOf("//")?r:0===r.indexOf("/")?e+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(n,t,e){n.exports=e.p+"assets/fonts/43adbf6de69310e1bca320bec8b9020d.woff"},function(n,t,e){n.exports=e.p+"assets/fonts/199183b2e096202591e96250d110d722.woff2"},function(n,t,e){var o=e(2);(n.exports=e(1)(!1)).push([n.i,"/* codystar-300normal - latin */\n@font-face {\n  font-family: 'Codystar';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src:\n    local('Codystar Light '),\n    local('Codystar-Light'),\n    url("+o(e(10))+") format('woff2'), \n    url("+o(e(9))+") format('woff'); /* Modern Browsers */\n}\n\n/* codystar-400normal - latin */\n@font-face {\n  font-family: 'Codystar';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src:\n    local('Codystar Regular '),\n    local('Codystar-Regular'),\n    url("+o(e(47))+") format('woff2'), \n    url("+o(e(46))+") format('woff'); /* Modern Browsers */\n}\n\n",""])},function(n,t,e){var o=e(48);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(0)(o,i);o.locals&&(n.exports=o.locals)},function(n,t){!function(n,t){"use strict";if("IntersectionObserver"in n&&"IntersectionObserverEntry"in n&&"intersectionRatio"in n.IntersectionObserverEntry.prototype)"isIntersecting"in n.IntersectionObserverEntry.prototype||Object.defineProperty(n.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}});else{var e=[];i.prototype.THROTTLE_TIMEOUT=100,i.prototype.POLL_INTERVAL=null,i.prototype.USE_MUTATION_OBSERVER=!0,i.prototype.observe=function(n){if(!this._observationTargets.some(function(t){return t.element==n})){if(!n||1!=n.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:n,entry:null}),this._monitorIntersections(),this._checkForIntersections()}},i.prototype.unobserve=function(n){this._observationTargets=this._observationTargets.filter(function(t){return t.element!=n}),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},i.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},i.prototype.takeRecords=function(){var n=this._queuedEntries.slice();return this._queuedEntries=[],n},i.prototype._initThresholds=function(n){var t=n||[0];return Array.isArray(t)||(t=[t]),t.sort().filter(function(n,t,e){if("number"!=typeof n||isNaN(n)||n<0||n>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return n!==e[t-1]})},i.prototype._parseRootMargin=function(n){var t=(n||"0px").split(/\s+/).map(function(n){var t=/^(-?\d*\.?\d+)(px|%)$/.exec(n);if(!t)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(t[1]),unit:t[2]}});return t[1]=t[1]||t[0],t[2]=t[2]||t[0],t[3]=t[3]||t[1],t},i.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(r(n,"resize",this._checkForIntersections,!0),r(t,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in n&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(t,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},i.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,s(n,"resize",this._checkForIntersections,!0),s(t,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},i.prototype._checkForIntersections=function(){var t=this._rootIsInDom(),e=t?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach(function(i){var r=i.element,s=a(r),l=this._rootContainsTarget(r),c=i.entry,f=t&&l&&this._computeTargetAndRootIntersection(r,e),d=i.entry=new o({time:n.performance&&performance.now&&performance.now(),target:r,boundingClientRect:s,rootBounds:e,intersectionRect:f});c?t&&l?this._hasCrossedThreshold(c,d)&&this._queuedEntries.push(d):c&&c.isIntersecting&&this._queuedEntries.push(d):this._queuedEntries.push(d)},this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},i.prototype._computeTargetAndRootIntersection=function(e,o){if("none"!=n.getComputedStyle(e).display){for(var i,r,s,l,f,d,u,h,p=a(e),m=c(e),g=!1;!g;){var v=null,b=1==m.nodeType?n.getComputedStyle(m):{};if("none"==b.display)return;if(m==this.root||m==t?(g=!0,v=o):m!=t.body&&m!=t.documentElement&&"visible"!=b.overflow&&(v=a(m)),v&&(i=v,r=p,void 0,void 0,void 0,void 0,void 0,void 0,s=Math.max(i.top,r.top),l=Math.min(i.bottom,r.bottom),f=Math.max(i.left,r.left),d=Math.min(i.right,r.right),h=l-s,!(p=(u=d-f)>=0&&h>=0&&{top:s,bottom:l,left:f,right:d,width:u,height:h})))break;m=c(m)}return p}},i.prototype._getRootRect=function(){var n;if(this.root)n=a(this.root);else{var e=t.documentElement,o=t.body;n={top:0,left:0,right:e.clientWidth||o.clientWidth,width:e.clientWidth||o.clientWidth,bottom:e.clientHeight||o.clientHeight,height:e.clientHeight||o.clientHeight}}return this._expandRectByRootMargin(n)},i.prototype._expandRectByRootMargin=function(n){var t=this._rootMarginValues.map(function(t,e){return"px"==t.unit?t.value:t.value*(e%2?n.width:n.height)/100}),e={top:n.top-t[0],right:n.right+t[1],bottom:n.bottom+t[2],left:n.left-t[3]};return e.width=e.right-e.left,e.height=e.bottom-e.top,e},i.prototype._hasCrossedThreshold=function(n,t){var e=n&&n.isIntersecting?n.intersectionRatio||0:-1,o=t.isIntersecting?t.intersectionRatio||0:-1;if(e!==o)for(var i=0;i<this.thresholds.length;i++){var r=this.thresholds[i];if(r==e||r==o||r<e!=r<o)return!0}},i.prototype._rootIsInDom=function(){return!this.root||l(t,this.root)},i.prototype._rootContainsTarget=function(n){return l(this.root||t,n)},i.prototype._registerInstance=function(){e.indexOf(this)<0&&e.push(this)},i.prototype._unregisterInstance=function(){var n=e.indexOf(this);-1!=n&&e.splice(n,1)},n.IntersectionObserver=i,n.IntersectionObserverEntry=o}function o(n){this.time=n.time,this.target=n.target,this.rootBounds=n.rootBounds,this.boundingClientRect=n.boundingClientRect,this.intersectionRect=n.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!n.intersectionRect;var t=this.boundingClientRect,e=t.width*t.height,o=this.intersectionRect,i=o.width*o.height;this.intersectionRatio=e?i/e:this.isIntersecting?1:0}function i(n,t){var e,o,i,r=t||{};if("function"!=typeof n)throw new Error("callback must be a function");if(r.root&&1!=r.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(e=this._checkForIntersections.bind(this),o=this.THROTTLE_TIMEOUT,i=null,function(){i||(i=setTimeout(function(){e(),i=null},o))}),this._callback=n,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(r.rootMargin),this.thresholds=this._initThresholds(r.threshold),this.root=r.root||null,this.rootMargin=this._rootMarginValues.map(function(n){return n.value+n.unit}).join(" ")}function r(n,t,e,o){"function"==typeof n.addEventListener?n.addEventListener(t,e,o||!1):"function"==typeof n.attachEvent&&n.attachEvent("on"+t,e)}function s(n,t,e,o){"function"==typeof n.removeEventListener?n.removeEventListener(t,e,o||!1):"function"==typeof n.detatchEvent&&n.detatchEvent("on"+t,e)}function a(n){var t;try{t=n.getBoundingClientRect()}catch(n){}return t?(t.width&&t.height||(t={top:t.top,right:t.right,bottom:t.bottom,left:t.left,width:t.right-t.left,height:t.bottom-t.top}),t):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function l(n,t){for(var e=t;e;){if(e==n)return!0;e=c(e)}return!1}function c(n){var t=n.parentNode;return t&&11==t.nodeType&&t.host?t.host:t}}(window,document)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,