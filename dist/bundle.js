!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){var i;e.exports=function e(t,n,o){function s(a,l){if(!n[a]){if(!t[a]){var c="function"==typeof i&&i;if(!l&&c)return i(a,!0);if(r)return r(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var h=n[a]={exports:{}};t[a][0].call(h.exports,function(e){var n=t[a][1][e];return s(n||e)},h,h.exports,e,t,n,o)}return n[a].exports}for(var r="function"==typeof i&&i,a=0;a<o.length;a++)s(o[a]);return s}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=e("./util/throwIfMissing"),r=(i=s)&&i.__esModule?i:{default:i},a=e("./util/dom"),l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.isShowing=!1;var n=t.namespace,i=void 0===n?null:n,o=t.zoomFactor,s=void 0===o?(0,r.default)():o,a=t.containerEl,l=void 0===a?(0,r.default)():a;this.settings={namespace:i,zoomFactor:s,containerEl:l},this.openClasses=this._buildClasses("open"),this._buildElement()}return o(e,[{key:"_buildClasses",value:function(e){var t=["drift-"+e],n=this.settings.namespace;return n&&t.push(n+"-"+e),t}},{key:"_buildElement",value:function(){this.el=document.createElement("div"),(0,a.addClasses)(this.el,this._buildClasses("bounding-box"))}},{key:"show",value:function(e,t){this.isShowing=!0,this.settings.containerEl.appendChild(this.el);var n=this.el.style;n.width=Math.round(e/this.settings.zoomFactor)+"px",n.height=Math.round(t/this.settings.zoomFactor)+"px",(0,a.addClasses)(this.el,this.openClasses)}},{key:"hide",value:function(){this.isShowing&&this.settings.containerEl.removeChild(this.el),this.isShowing=!1,(0,a.removeClasses)(this.el,this.openClasses)}},{key:"setPosition",value:function(e,t,n){var i=window.pageXOffset,o=window.pageYOffset,s=n.left+e*n.width-this.el.clientWidth/2+i,r=n.top+t*n.height-this.el.clientHeight/2+o;this.el.getBoundingClientRect(),s<n.left+i?s=n.left+i:s+this.el.clientWidth>n.left+n.width+i&&(s=n.left+n.width-this.el.clientWidth+i),r<n.top+o?r=n.top+o:r+this.el.clientHeight>n.top+n.height+o&&(r=n.top+n.height-this.el.clientHeight+o),this.el.style.left=s+"px",this.el.style.top=r+"px"}}]),e}();n.default=l},{"./util/dom":6,"./util/throwIfMissing":7}],2:[function(e,t,n){"use strict";var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=e("./util/dom"),s=e("./injectBaseStylesheet"),r=h(s),a=e("./Trigger"),l=h(a),c=e("./ZoomPane"),u=h(c);function h(e){return e&&e.__esModule?e:{default:e}}t.exports=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.VERSION="1.2.0",this.destroy=function(){n.trigger._unbindEvents()},this.triggerEl=t,!(0,o.isDOMElement)(this.triggerEl))throw new TypeError("`new Drift` requires a DOM element as its first argument.");var s=i.namespace,a=void 0===s?null:s,l=i.showWhitespaceAtEdges,c=void 0!==l&&l,u=i.containInline,h=void 0!==u&&u,d=i.inlineOffsetX,f=void 0===d?0:d,p=i.inlineOffsetY,m=void 0===p?0:p,g=i.inlineContainer,v=void 0===g?document.body:g,b=i.sourceAttribute,y=void 0===b?"data-zoom":b,w=i.zoomFactor,E=void 0===w?3:w,_=i.paneContainer,x=void 0===_?document.body:_,C=i.inlinePane,I=void 0===C?375:C,O=i.handleTouch,S=void 0===O||O,M=i.onShow,k=void 0===M?null:M,L=i.onHide,T=void 0===L?null:L,z=i.injectBaseStyles,B=void 0===z||z,R=i.hoverDelay,A=void 0===R?0:R,P=i.touchDelay,H=void 0===P?0:P,F=i.hoverBoundingBox,j=void 0!==F&&F,D=i.touchBoundingBox,U=void 0!==D&&D;if(!0!==I&&!(0,o.isDOMElement)(x))throw new TypeError("`paneContainer` must be a DOM element when `inlinePane !== true`");if(!(0,o.isDOMElement)(v))throw new TypeError("`inlineContainer` must be a DOM element");this.settings={namespace:a,showWhitespaceAtEdges:c,containInline:h,inlineOffsetX:f,inlineOffsetY:m,inlineContainer:v,sourceAttribute:y,zoomFactor:E,paneContainer:x,inlinePane:I,handleTouch:S,onShow:k,onHide:T,injectBaseStyles:B,hoverDelay:A,touchDelay:H,hoverBoundingBox:j,touchBoundingBox:U},this.settings.injectBaseStyles&&(0,r.default)(),this._buildZoomPane(),this._buildTrigger()}return i(e,[{key:"_buildZoomPane",value:function(){this.zoomPane=new u.default({container:this.settings.paneContainer,zoomFactor:this.settings.zoomFactor,showWhitespaceAtEdges:this.settings.showWhitespaceAtEdges,containInline:this.settings.containInline,inline:this.settings.inlinePane,namespace:this.settings.namespace,inlineOffsetX:this.settings.inlineOffsetX,inlineOffsetY:this.settings.inlineOffsetY,inlineContainer:this.settings.inlineContainer})}},{key:"_buildTrigger",value:function(){this.trigger=new l.default({el:this.triggerEl,zoomPane:this.zoomPane,handleTouch:this.settings.handleTouch,onShow:this.settings.onShow,onHide:this.settings.onHide,sourceAttribute:this.settings.sourceAttribute,hoverDelay:this.settings.hoverDelay,touchDelay:this.settings.touchDelay,hoverBoundingBox:this.settings.hoverBoundingBox,touchBoundingBox:this.settings.touchBoundingBox,namespace:this.settings.namespace,zoomFactor:this.settings.zoomFactor})}},{key:"setZoomImageURL",value:function(e){this.zoomPane._setImageURL(e)}},{key:"disable",value:function(){this.trigger.enabled=!1}},{key:"enable",value:function(){this.trigger.enabled=!0}},{key:"isShowing",get:function(){return this.zoomPane.isShowing}},{key:"zoomFactor",get:function(){return this.settings.zoomFactor},set:function(e){this.settings.zoomFactor=e,this.zoomPane.settings.zoomFactor=e}}]),e}()},{"./Trigger":3,"./ZoomPane":4,"./injectBaseStylesheet":5,"./util/dom":6}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=e("./util/throwIfMissing"),s=l(o),r=e("./BoundingBox"),a=l(r);function l(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u.call(this);var n=t.el,i=void 0===n?(0,s.default)():n,o=t.zoomPane,r=void 0===o?(0,s.default)():o,l=t.sourceAttribute,c=void 0===l?(0,s.default)():l,h=t.handleTouch,d=void 0===h?(0,s.default)():h,f=t.onShow,p=void 0===f?null:f,m=t.onHide,g=void 0===m?null:m,v=t.hoverDelay,b=void 0===v?0:v,y=t.touchDelay,w=void 0===y?0:y,E=t.hoverBoundingBox,_=void 0===E?(0,s.default)():E,x=t.touchBoundingBox,C=void 0===x?(0,s.default)():x,I=t.namespace,O=void 0===I?null:I,S=t.zoomFactor,M=void 0===S?(0,s.default)():S;this.settings={el:i,zoomPane:r,sourceAttribute:c,handleTouch:d,onShow:p,onHide:g,hoverDelay:b,touchDelay:w,hoverBoundingBox:_,touchBoundingBox:C,namespace:O,zoomFactor:M},(this.settings.hoverBoundingBox||this.settings.touchBoundingBox)&&(this.boundingBox=new a.default({namespace:this.settings.namespace,zoomFactor:this.settings.zoomFactor,containerEl:this.settings.el.offsetParent})),this.enabled=!0,this._bindEvents()}return i(e,[{key:"_bindEvents",value:function(){this.settings.el.addEventListener("mouseenter",this._handleEntry,!1),this.settings.el.addEventListener("mouseleave",this._hide,!1),this.settings.el.addEventListener("mousemove",this._handleMovement,!1),this.settings.handleTouch&&(this.settings.el.addEventListener("touchstart",this._handleEntry,!1),this.settings.el.addEventListener("touchend",this._hide,!1),this.settings.el.addEventListener("touchmove",this._handleMovement,!1))}},{key:"_unbindEvents",value:function(){this.settings.el.removeEventListener("mouseenter",this._handleEntry,!1),this.settings.el.removeEventListener("mouseleave",this._hide,!1),this.settings.el.removeEventListener("mousemove",this._handleMovement,!1),this.settings.handleTouch&&(this.settings.el.removeEventListener("touchstart",this._handleEntry,!1),this.settings.el.removeEventListener("touchend",this._hide,!1),this.settings.el.removeEventListener("touchmove",this._handleMovement,!1))}},{key:"isShowing",get:function(){return this.settings.zoomPane.isShowing}}]),e}(),u=function(){var e=this;this._handleEntry=function(t){t.preventDefault(),e._lastMovement=t,"mouseenter"==t.type&&e.settings.hoverDelay?e.entryTimeout=setTimeout(e._show,e.settings.hoverDelay):e.settings.touchDelay?e.entryTimeout=setTimeout(e._show,e.settings.touchDelay):e._show()},this._show=function(){if(e.enabled){var t=e.settings.onShow;if(t&&"function"==typeof t&&t(),e.settings.zoomPane.show(e.settings.el.getAttribute(e.settings.sourceAttribute),e.settings.el.clientWidth,e.settings.el.clientHeight),e._lastMovement){var n=e._lastMovement.touches;(n&&e.settings.touchBoundingBox||!n&&e.settings.hoverBoundingBox)&&e.boundingBox.show(e.settings.zoomPane.el.clientWidth,e.settings.zoomPane.el.clientHeight)}e._handleMovement()}},this._hide=function(t){t.preventDefault(),e._lastMovement=null,e.entryTimeout&&clearTimeout(e.entryTimeout),e.boundingBox&&e.boundingBox.hide();var n=e.settings.onHide;n&&"function"==typeof n&&n(),e.settings.zoomPane.hide()},this._handleMovement=function(t){if(t)t.preventDefault(),e._lastMovement=t;else{if(!e._lastMovement)return;t=e._lastMovement}var n=void 0,i=void 0;if(t.touches){var o=t.touches[0];n=o.clientX,i=o.clientY}else n=t.clientX,i=t.clientY;var s=e.settings.el,r=s.getBoundingClientRect(),a=n-r.left,l=i-r.top,c=a/e.settings.el.clientWidth,u=l/e.settings.el.clientHeight;e.boundingBox&&e.boundingBox.setPosition(c,u,r),e.settings.zoomPane.setPosition(c,u,r)}};n.default=c},{"./BoundingBox":1,"./util/throwIfMissing":7}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=e("./util/throwIfMissing"),r=(i=s)&&i.__esModule?i:{default:i},a=e("./util/dom"),l=document.createElement("div").style,c="undefined"!=typeof document&&("animation"in l||"webkitAnimation"in l),u=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._completeShow=function(){t.el.removeEventListener("animationend",t._completeShow,!1),t.el.removeEventListener("webkitAnimationEnd",t._completeShow,!1),(0,a.removeClasses)(t.el,t.openingClasses)},this._completeHide=function(){t.el.removeEventListener("animationend",t._completeHide,!1),t.el.removeEventListener("webkitAnimationEnd",t._completeHide,!1),(0,a.removeClasses)(t.el,t.openClasses),(0,a.removeClasses)(t.el,t.closingClasses),(0,a.removeClasses)(t.el,t.inlineClasses),t.el.setAttribute("style",""),t.el.parentElement===t.settings.container?t.settings.container.removeChild(t.el):t.el.parentElement===t.settings.inlineContainer&&t.settings.inlineContainer.removeChild(t.el)},this._handleLoad=function(){t.imgEl.removeEventListener("load",t._handleLoad,!1),(0,a.removeClasses)(t.el,t.loadingClasses)},this.isShowing=!1;var i=n.container,o=void 0===i?null:i,s=n.zoomFactor,l=void 0===s?(0,r.default)():s,c=n.inline,u=void 0===c?(0,r.default)():c,h=n.namespace,d=void 0===h?null:h,f=n.showWhitespaceAtEdges,p=void 0===f?(0,r.default)():f,m=n.containInline,g=void 0===m?(0,r.default)():m,v=n.inlineOffsetX,b=void 0===v?0:v,y=n.inlineOffsetY,w=void 0===y?0:y,E=n.inlineContainer,_=void 0===E?document.body:E;this.settings={container:o,zoomFactor:l,inline:u,namespace:d,showWhitespaceAtEdges:p,containInline:g,inlineOffsetX:b,inlineOffsetY:w,inlineContainer:_},this.openClasses=this._buildClasses("open"),this.openingClasses=this._buildClasses("opening"),this.closingClasses=this._buildClasses("closing"),this.inlineClasses=this._buildClasses("inline"),this.loadingClasses=this._buildClasses("loading"),this._buildElement()}return o(e,[{key:"_buildClasses",value:function(e){var t=["drift-"+e],n=this.settings.namespace;return n&&t.push(n+"-"+e),t}},{key:"_buildElement",value:function(){this.el=document.createElement("div"),(0,a.addClasses)(this.el,this._buildClasses("zoom-pane"));var e=document.createElement("div");(0,a.addClasses)(e,this._buildClasses("zoom-pane-loader")),this.el.appendChild(e),this.imgEl=document.createElement("img"),this.el.appendChild(this.imgEl)}},{key:"_setImageURL",value:function(e){this.imgEl.setAttribute("src",e)}},{key:"_setImageSize",value:function(e,t){this.imgEl.style.width=e*this.settings.zoomFactor+"px",this.imgEl.style.height=t*this.settings.zoomFactor+"px"}},{key:"setPosition",value:function(e,t,n){var i=-(this.imgEl.clientWidth*e-this.el.clientWidth/2),o=-(this.imgEl.clientHeight*t-this.el.clientHeight/2),s=-(this.imgEl.clientWidth-this.el.clientWidth),r=-(this.imgEl.clientHeight-this.el.clientHeight);if(this.el.parentElement===this.settings.inlineContainer){var a=window.pageXOffset,l=window.pageYOffset,c=n.left+e*n.width-this.el.clientWidth/2+this.settings.inlineOffsetX+a,u=n.top+t*n.height-this.el.clientHeight/2+this.settings.inlineOffsetY+l;this.settings.containInline&&(this.el.getBoundingClientRect(),c<n.left+a?c=n.left+a:c+this.el.clientWidth>n.left+n.width+a&&(c=n.left+n.width-this.el.clientWidth+a),u<n.top+l?u=n.top+l:u+this.el.clientHeight>n.top+n.height+l&&(u=n.top+n.height-this.el.clientHeight+l)),this.el.style.left=c+"px",this.el.style.top=u+"px"}this.settings.showWhitespaceAtEdges||(i>0?i=0:i<s&&(i=s),o>0?o=0:o<r&&(o=r)),this.imgEl.style.transform="translate("+i+"px, "+o+"px)",this.imgEl.style.webkitTransform="translate("+i+"px, "+o+"px)"}},{key:"_removeListenersAndResetClasses",value:function(){this.el.removeEventListener("animationend",this._completeShow,!1),this.el.removeEventListener("animationend",this._completeHide,!1),this.el.removeEventListener("webkitAnimationEnd",this._completeShow,!1),this.el.removeEventListener("webkitAnimationEnd",this._completeHide,!1),(0,a.removeClasses)(this.el,this.openClasses),(0,a.removeClasses)(this.el,this.closingClasses)}},{key:"show",value:function(e,t,n){this._removeListenersAndResetClasses(),this.isShowing=!0,(0,a.addClasses)(this.el,this.openClasses),(0,a.addClasses)(this.el,this.loadingClasses),this.imgEl.addEventListener("load",this._handleLoad,!1),this._setImageURL(e),this._setImageSize(t,n),this._isInline?this._showInline():this._showInContainer(),c&&(this.el.addEventListener("animationend",this._completeShow,!1),this.el.addEventListener("webkitAnimationEnd",this._completeShow,!1),(0,a.addClasses)(this.el,this.openingClasses))}},{key:"_showInline",value:function(){this.settings.inlineContainer.appendChild(this.el),(0,a.addClasses)(this.el,this.inlineClasses)}},{key:"_showInContainer",value:function(){this.settings.container.appendChild(this.el)}},{key:"hide",value:function(){this._removeListenersAndResetClasses(),this.isShowing=!1,c?(this.el.addEventListener("animationend",this._completeHide,!1),this.el.addEventListener("webkitAnimationEnd",this._completeHide,!1),(0,a.addClasses)(this.el,this.closingClasses)):((0,a.removeClasses)(this.el,this.openClasses),(0,a.removeClasses)(this.el,this.inlineClasses))}},{key:"_isInline",get:function(){var e=this.settings.inline;return!0===e||"number"==typeof e&&window.innerWidth<=e}}]),e}();n.default=u},{"./util/dom":6,"./util/throwIfMissing":7}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){if(!document.querySelector(".drift-base-styles")){var e=document.createElement("style");e.type="text/css",e.classList.add("drift-base-styles"),e.appendChild(document.createTextNode(i));var t=document.head;t.insertBefore(e,t.firstChild)}};var i="\n@keyframes noop {\n  0% { zoom: 1; }\n}\n\n@-webkit-keyframes noop {\n  0% { zoom: 1; }\n}\n\n.drift-zoom-pane.drift-open {\n  display: block;\n}\n\n.drift-zoom-pane.drift-opening, .drift-zoom-pane.drift-closing {\n  animation: noop 1ms;\n  -webkit-animation: noop 1ms;\n}\n\n.drift-zoom-pane {\n  position: absolute;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n.drift-zoom-pane-loader {\n  display: none;\n}\n\n.drift-zoom-pane img {\n  position: absolute;\n  display: block;\n  max-width: none;\n  max-height: none;\n}\n\n.drift-bounding-box {\n  position: absolute;\n  pointer-events: none;\n}\n"},{}],6:[function(e,t,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":i(e)};n.isDOMElement=function(e){return s?e instanceof HTMLElement:e&&"object"===(void 0===e?"undefined":o(e))&&null!==e&&1===e.nodeType&&"string"==typeof e.nodeName},n.addClasses=function(e,t){t.forEach(function(t){e.classList.add(t)})},n.removeClasses=function(e,t){t.forEach(function(t){e.classList.remove(t)})};var s="object"===("undefined"==typeof HTMLElement?"undefined":o(HTMLElement))},{}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){throw new Error("Missing parameter")}},{}]},{},[2])(2)},function(e,t,n){e.exports=function(){"use strict";function e(e){for(var t=e.length,n=[],i=0;i<t;i+=1)n.push(e[i]);return n}function t(e){return e instanceof Element?e:"string"==typeof e?document.querySelector(e):null}function n(e){var t=e.id,n=e.i;return"scrollama__debug-step--"+t+"-"+n}function i(e){var t=e.id;return"scrollama__debug-offset--"+t}function o(e){var t=e.id,o=e.offsetVal,s=e.stepEl,r=s[0].getAttribute("class");s.forEach(function(e,i){return function(e){var t=e.id,i=e.i,o=n({id:t,i:i}),s=document.createElement("div");s.setAttribute("id",o+"_above"),s.setAttribute("class","scrollama__debug-step"),s.style.position="fixed",s.style.left="0",s.style.width="100%",s.style.backgroundImage="repeating-linear-gradient(45deg, green 0, green 2px, white 0, white 40px)",s.style.border="2px solid green",s.style.opacity="0.33",s.style.zIndex="9999",s.style.display="none",document.body.appendChild(s);var r=document.createElement("div");r.setAttribute("id",o+"_below"),r.setAttribute("class","scrollama__debug-step"),r.style.position="fixed",r.style.left="0",r.style.width="100%",r.style.backgroundImage="repeating-linear-gradient(135deg, orange 0, orange 2px, white 0, white 40px)",r.style.border="2px solid orange",r.style.opacity="0.33",r.style.zIndex="9999",r.style.display="none",document.body.appendChild(r)}({id:t,i:i})}),function(e){var t=e.id,n=e.offsetVal,o=e.stepClass,s=document.createElement("div");s.setAttribute("id",i({id:t})),s.setAttribute("class","scrollama__debug-offset"),s.style.position="fixed",s.style.left="0",s.style.width="100%",s.style.height="0px",s.style.borderTop="2px dashed black",s.style.zIndex="9999";var r=document.createElement("p");r.innerText='".'+o+'" trigger: '+n,r.style.fontSize="12px",r.style.fontFamily="monospace",r.style.color="black",r.style.margin="0",r.style.padding="6px",s.appendChild(r),document.body.appendChild(s)}({id:t,offsetVal:o,stepClass:r})}function s(e){var t=e.id,o=e.stepOffsetHeight,s=e.offsetMargin;e.offsetVal,o.forEach(function(e,i){return function(e){var t=e.id,i=e.h,o=e.i,s=e.offsetMargin,r=n({id:t,i:o}),a=document.querySelector("#"+r+"_above");a.style.height=i+"px",a.style.top=s-i+"px";var l=document.querySelector("#"+r+"_below");l.style.height=i+"px",l.style.top=s+"px"}({id:t,h:e,i:i,offsetMargin:s})}),function(e){var t=e.id,n=e.offsetMargin,o=(e.offsetVal,i({id:t}));document.querySelector("#"+o).style.top=n+"px"}({id:t,offsetMargin:s})}function r(e){var t=e.id,i=e.index,o=e.state,s=n({id:t,i:i}),r=document.querySelector("#"+s+"_above"),a=document.querySelector("#"+s+"_below"),l="enter"===o?"block":"none";r&&(r.style.display=l),a&&(a.style.display=l)}return function(){var n=1,i={},a={},l=null,c=null,u=null,h=null,d=0,f=0,p=0,m=0,g=null,v=null,b=null,y=!1,w=!1,E=!1,_=!1,x=0,C=!1,I=!1,O=null,S=null,M=-1,k=null,L=[];function T(e){var t=0;if(e.offsetParent)do{t+=e.offsetTop,e=e.offsetParent}while(e);return t<0?0:t}function z(e){return+e.getAttribute("data-scrollama-index")}function B(){window.pageYOffset>M?k="down":window.pageYOffset<M&&(k="up"),M=window.pageYOffset}function R(){var e,t;p=window.innerHeight,e=document.body,t=document.documentElement,m=Math.max(e.scrollHeight,e.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight),b=c?c.getBoundingClientRect():null,f=d*p,g=u?u.map(function(e){return e.offsetHeight}):[],v=u?u.map(T):[],w&&y&&G(),E&&s({id:h,stepOffsetHeight:g,offsetMargin:f,offsetVal:d})}function A(e){e&&!w?(y&&G(),w=!0):e||(a.top&&a.top.disconnect(),a.bottom&&a.bottom.disconnect(),a.stepAbove&&a.stepAbove.forEach(function(e){return e.disconnect()}),a.stepBelow&&a.stepBelow.forEach(function(e){return e.disconnect()}),a.stepProgress&&a.stepProgress.forEach(function(e){return e.disconnect()}),a.viewportAbove&&a.viewportAbove.forEach(function(e){return e.disconnect()}),a.viewportBelow&&a.viewportBelow.forEach(function(e){return e.disconnect()}),w=!1)}function P(e,t){if("above"===t)for(var n=0;n<e;n++){var i=O[n];"enter"===i.state&&F(u[n]),"up"===i.direction&&(H(u[n],"down"),F(u[n]))}else if("below"===t)for(var o=O.length-1;o>e;o--){var s=O[o];"enter"===s.state&&F(u[o]),"down"===s.direction&&(H(u[o],"up"),F(u[o]))}}function H(e,t){void 0===t&&(t=!0);var n=z(e),o={element:e,index:n,direction:k};O[n].direction=k,O[n].state="enter",C&&t&&"down"===k&&P(n,"above"),C&&t&&"up"===k&&P(n,"below"),i.stepEnter&&"function"==typeof i.stepEnter&&!L[n]&&(i.stepEnter(o,O),E&&r({id:h,index:n,state:"enter"}),I&&(L[n]=!0)),_&&j(e,"down"===k?0:1)}function F(e){var t=z(e),n={element:e,index:t,direction:k};O[t].direction=k,O[t].state="exit",_&&j(e,"down"===k?1:0),i.stepExit&&"function"==typeof i.stepExit&&(i.stepExit(n,O),E&&r({id:h,index:t,state:"exit"}))}function j(e,t){var n=z(e),o={element:e,index:n,progress:t};i.stepProgress&&"function"==typeof i.stepProgress&&i.stepProgress(o)}function D(){var e={direction:k};S.direction=k,S.state="enter",i.containerEnter&&"function"==typeof i.containerEnter&&i.containerEnter(e)}function U(){var e={direction:k};S.direction=k,S.state="exit",i.containerExit&&"function"==typeof i.containerExit&&i.containerExit(e)}function W(e){B(),e.forEach(function(e){var t=e.isIntersecting,i=e.boundingClientRect,o=e.target,s=i.bottom,r=i.height,a=s-f,l=z(o),c=O[l];a>=-n&&(t&&"down"===k&&"enter"!==c.state?H(o,k):t||"up"!==k||"enter"!==c.state?!t&&a>=r&&"down"===k&&"enter"===c.state&&F(o):F(o))})}function q(e){B(),e.forEach(function(e){var t=e.isIntersecting,i=e.boundingClientRect,o=e.target,s=i.bottom,r=i.height,a=s-f,l=z(o),c=O[l];a>=-n&&a<r&&t&&"up"===k&&"enter"!==c.state?H(o,k):a<=n&&!t&&"down"===k&&"enter"===c.state&&F(o)})}function N(e){B(),e.forEach(function(e){var t=e.isIntersecting,n=e.target,i=z(n),o=O[i];t&&"down"===k&&"enter"!==o.state&&"down"!==o.direction&&(H(n,"down"),F(n))})}function V(e){B(),e.forEach(function(e){var t=e.isIntersecting,n=e.target,i=z(n),o=O[i];t&&"up"===k&&"enter"!==o.state&&"up"!==o.direction&&(H(n,"up"),F(n))})}function Y(e){B(),e.forEach(function(e){var t=e.isIntersecting,i=e.intersectionRatio,o=e.boundingClientRect,s=e.target,r=o.bottom,a=r-f;t&&a>=-n&&j(s,+i.toFixed(3))})}function X(e){B();var t=e[0],i=t.isIntersecting,o=t.boundingClientRect,s=(o.top,o.bottom);s>-n&&(i?D():"enter"===S.state&&U())}function Z(e){B();var t=e[0],i=t.isIntersecting,o=t.boundingClientRect,s=o.top;s<n&&(i?D():"enter"===S.state&&U())}function $(){a.stepProgress&&a.stepProgress.forEach(function(e){return e.disconnect()}),a.stepProgress=u.map(function(e,t){var n=g[t]-f,i=-p+f,o=n+"px 0px "+i+"px 0px",s=function(e){for(var t=Math.ceil(e/x),n=[],i=1/t,o=0;o<t;o++)n.push(o*i);return n}(g[t]),r={root:null,rootMargin:o,threshold:s},a=new IntersectionObserver(Y,r);return a.observe(e),a})}function G(){a.viewportAbove&&a.viewportAbove.forEach(function(e){return e.disconnect()}),a.viewportAbove=u.map(function(e,t){var n=v[t],i=-(p-f+g[t]),o=n+"px 0px "+i+"px 0px",s={root:null,rootMargin:o,threshold:0},r=new IntersectionObserver(N,s);return r.observe(e),r}),a.viewportBelow&&a.viewportBelow.forEach(function(e){return e.disconnect()}),a.viewportBelow=u.map(function(e,t){var n=-(f+g[t]),i=m-v[t]-g[t]-f,o=n+"px 0px "+i+"px 0px",s={root:null,rootMargin:o,threshold:0},r=new IntersectionObserver(V,s);return r.observe(e),r}),a.stepAbove&&a.stepAbove.forEach(function(e){return e.disconnect()}),a.stepAbove=u.map(function(e,t){var n=g[t],i=-p+f,o=n+"px 0px "+i+"px 0px",s={root:null,rootMargin:o,threshold:0},r=new IntersectionObserver(W,s);return r.observe(e),r}),a.stepBelow&&a.stepBelow.forEach(function(e){return e.disconnect()}),a.stepBelow=u.map(function(e,t){var n=-f,i=m-p+g[t]+f,o=n+"px 0px "+i+"px 0px",s={root:null,rootMargin:o,threshold:0},r=new IntersectionObserver(q,s);return r.observe(e),r}),_&&$(),l&&c&&(function(){a.top&&a.top.unobserve(l);var e={root:null,rootMargin:p+"px 0px -"+p+"px 0px",threshold:0};a.top=new IntersectionObserver(X,e),a.top.observe(l)}(),function(){a.bottom&&a.bottom.unobserve(l);var e={root:null,rootMargin:"-"+b.height+"px 0px "+b.height+"px 0px",threshold:0};a.bottom=new IntersectionObserver(Z,e),a.bottom.observe(l)}())}var J={};return J.setup=function(n){var i=n.container,s=n.graphic,r=n.step,a=n.offset;void 0===a&&(a=.5);var f=n.progress;void 0===f&&(f=!1);var p=n.threshold;void 0===p&&(p=4);var m=n.debug;void 0===m&&(m=!1);var g=n.order;void 0===g&&(g=!0);var v,b,w,M,k,L=n.once;return void 0===L&&(L=!1),b=(v="abcdefghijklmnopqrstuv").length,w=(new Date).getTime(),h=""+[0,0,0].map(function(e){return v[Math.floor(Math.random()*b)]}).join("")+w,M=r,void 0===k&&(k=document),u="string"==typeof M?e(k.querySelectorAll(M)):M instanceof NodeList?e(M):M instanceof Array?M:[],l=i?t(i):null,c=s?t(s):null,u.length?(E=m,_=f,C=g,I=L,J.offsetTrigger(a),x=Math.max(1,+p),y=!0,E&&o({id:h,stepEl:u,offsetVal:d}),u.forEach(function(e,t){return e.setAttribute("data-scrollama-index",t)}),O=u.map(function(){return{direction:null,state:null}}),S={direction:null,state:null},R(),A(!0),J):(console.error("scrollama error: no step elements"),J)},J.resize=function(){return R(),J},J.enable=function(){return A(!0),J},J.disable=function(){return A(!1),J},J.destroy=function(){A(!1),Object.keys(i).forEach(function(e){return i[e]=null}),Object.keys(a).forEach(function(e){return a[e]=null})},J.offsetTrigger=function(e){return e&&(isNaN(e),1)?(d=Math.min(Math.max(0,e),1),J):d},J.onStepEnter=function(e){return i.stepEnter=e,J},J.onStepExit=function(e){return i.stepExit=e,J},J.onStepProgress=function(e){return i.stepProgress=e,J},J.onContainerEnter=function(e){return i.containerEnter=e,J},J.onContainerExit=function(e){return i.containerExit=e,J},J}}()},function(e,t,n){"use strict";n.r(t);n(9),n(8),n(3);var i=n(1),o=n.n(i),s=n(0),r=n.n(s);const a=Array.from(document.getElementsByClassName("driftImg")),l=document.querySelector(".chart");document.querySelector(".scroll__text");var c={namespace:null,showWhitespaceAtEdges:!1,containInline:!1,inlineOffsetX:0,inlineOffsetY:0,inlineContainer:document.body,sourceAttribute:"src",zoomFactor:3,paneContainer:document.querySelector(".chart"),inlinePane:375,handleTouch:!0,onShow:function(){a.forEach(function(e){e.classList.toggle("blurry")})},onHide:function(){a.forEach(function(e){e.classList.toggle("blurry")})},injectBaseStyles:!0,hoverDelay:0,touchDelay:0,hoverBoundingBox:!1,touchBoundingBox:!1};const u=[];for(let e of a){let t=new r.a(e,c);u.push(t)}document.querySelector("#scroll");const h=document.querySelector(".scroll__graphic"),d=document.querySelector(".scroll__text"),f=document.querySelectorAll(".step"),p=o()();function m(){const e=Math.floor(.75*window.innerHeight);f.forEach(function(t){t.style.height=e+"px"}),h.style.height=window.innerHeight+"px";const t=d.offsetWidth,n=document.body.offsetWidth,i=n-t-32,o=Math.floor(.95*window.innerHeight);l.style.width=i+"px",l.style.height=o+"px",u.forEach(function(e){e.zoomFactor=400/n*10}),p.resize()}function g(e){f[e.index].classList.add("is-active"),a.forEach(function(t,n){n===e.index?t.classList.add("is-active"):t.classList.remove("is-active")})}function v(e){h.classList.add("is-fixed"),h.classList.remove("is-bottom")}function b(e){h.classList.remove("is-fixed"),"down"===e.direction?h.classList.add("is-bottom"):h.classList.remove("is-bottom")}window.addEventListener("load",function(){m(),p.setup({container:"#scroll",graphic:".scroll__graphic",text:".scroll__text",step:".scroll__text .step",offset:.7}).onStepEnter(g).onContainerEnter(v).onContainerExit(b),window.addEventListener("resize",m)})},function(e,t){window.addEventListener("load",function(){document.body.style.visibility="visible"})},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,s=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:i+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var i,o,s={},r=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=i.apply(this,arguments)),o}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,c=0,u=[],h=n(4);function d(e,t){for(var n=0;n<e.length;n++){var i=e[n],o=s[i.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](i.parts[r]);for(;r<i.parts.length;r++)o.parts.push(b(i.parts[r],t))}else{var a=[];for(r=0;r<i.parts.length;r++)a.push(b(i.parts[r],t));s[i.id]={id:i.id,refs:1,parts:a}}}}function f(e,t){for(var n=[],i={},o=0;o<e.length;o++){var s=e[o],r=t.base?s[0]+t.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};i[r]?i[r].parts.push(a):n.push(i[r]={id:r,parts:[a]})}return n}function p(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=u[u.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function g(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,i,o,s;if(t.transform&&e.css){if(!(s=t.transform(e.css)))return function(){};e.css=s}if(t.singleton){var r=c++;n=l||(l=g(t)),i=E.bind(null,n,r,!1),o=E.bind(null,n,r,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),i=function(e,t,n){var i=n.css,o=n.sourceMap,s=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||s)&&(i=h(i));o&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var r=new Blob([i],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),i=function(e,t){var n=t.css,i=t.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return d(n,t),function(e){for(var i=[],o=0;o<n.length;o++){var r=n[o];(a=s[r.id]).refs--,i.push(a)}e&&d(f(e,t),t);for(o=0;o<i.length;o++){var a;if(0===(a=i[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete s[a.id]}}}};var y,w=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function E(e,t,n,i){var o=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var s=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(r=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),s=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(s).concat([o]).join("\n")}var r;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(i[s]=!0)}for(o=0;o<e.length;o++){var r=e[o];"number"==typeof r[0]&&i[r[0]]||(n&&!r[2]?r[2]=n:n&&(r[2]="("+r[2]+") and ("+n+")"),t.push(r))}},t}},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,'/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',""])},function(e,t,n){var i=n(7);"string"==typeof i&&(i=[[e.i,i,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(i,o);i.locals&&(e.exports=i.locals)},function(e,t){!function(e,t){"use strict";if("IntersectionObserver"in e&&"IntersectionObserverEntry"in e&&"intersectionRatio"in e.IntersectionObserverEntry.prototype)"isIntersecting"in e.IntersectionObserverEntry.prototype||Object.defineProperty(e.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}});else{var n=[];o.prototype.THROTTLE_TIMEOUT=100,o.prototype.POLL_INTERVAL=null,o.prototype.USE_MUTATION_OBSERVER=!0,o.prototype.observe=function(e){if(!this._observationTargets.some(function(t){return t.element==e})){if(!e||1!=e.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:e,entry:null}),this._monitorIntersections(),this._checkForIntersections()}},o.prototype.unobserve=function(e){this._observationTargets=this._observationTargets.filter(function(t){return t.element!=e}),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},o.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},o.prototype.takeRecords=function(){var e=this._queuedEntries.slice();return this._queuedEntries=[],e},o.prototype._initThresholds=function(e){var t=e||[0];return Array.isArray(t)||(t=[t]),t.sort().filter(function(e,t,n){if("number"!=typeof e||isNaN(e)||e<0||e>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return e!==n[t-1]})},o.prototype._parseRootMargin=function(e){var t=(e||"0px").split(/\s+/).map(function(e){var t=/^(-?\d*\.?\d+)(px|%)$/.exec(e);if(!t)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(t[1]),unit:t[2]}});return t[1]=t[1]||t[0],t[2]=t[2]||t[0],t[3]=t[3]||t[1],t},o.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(s(e,"resize",this._checkForIntersections,!0),s(t,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in e&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(t,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},o.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,r(e,"resize",this._checkForIntersections,!0),r(t,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},o.prototype._checkForIntersections=function(){var t=this._rootIsInDom(),n=t?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach(function(o){var s=o.element,r=a(s),l=this._rootContainsTarget(s),c=o.entry,u=t&&l&&this._computeTargetAndRootIntersection(s,n),h=o.entry=new i({time:e.performance&&performance.now&&performance.now(),target:s,boundingClientRect:r,rootBounds:n,intersectionRect:u});c?t&&l?this._hasCrossedThreshold(c,h)&&this._queuedEntries.push(h):c&&c.isIntersecting&&this._queuedEntries.push(h):this._queuedEntries.push(h)},this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},o.prototype._computeTargetAndRootIntersection=function(n,i){if("none"!=e.getComputedStyle(n).display){for(var o,s,r,l,u,h,d,f,p=a(n),m=c(n),g=!1;!g;){var v=null,b=1==m.nodeType?e.getComputedStyle(m):{};if("none"==b.display)return;if(m==this.root||m==t?(g=!0,v=i):m!=t.body&&m!=t.documentElement&&"visible"!=b.overflow&&(v=a(m)),v&&(o=v,s=p,void 0,void 0,void 0,void 0,void 0,void 0,r=Math.max(o.top,s.top),l=Math.min(o.bottom,s.bottom),u=Math.max(o.left,s.left),h=Math.min(o.right,s.right),f=l-r,!(p=(d=h-u)>=0&&f>=0&&{top:r,bottom:l,left:u,right:h,width:d,height:f})))break;m=c(m)}return p}},o.prototype._getRootRect=function(){var e;if(this.root)e=a(this.root);else{var n=t.documentElement,i=t.body;e={top:0,left:0,right:n.clientWidth||i.clientWidth,width:n.clientWidth||i.clientWidth,bottom:n.clientHeight||i.clientHeight,height:n.clientHeight||i.clientHeight}}return this._expandRectByRootMargin(e)},o.prototype._expandRectByRootMargin=function(e){var t=this._rootMarginValues.map(function(t,n){return"px"==t.unit?t.value:t.value*(n%2?e.width:e.height)/100}),n={top:e.top-t[0],right:e.right+t[1],bottom:e.bottom+t[2],left:e.left-t[3]};return n.width=n.right-n.left,n.height=n.bottom-n.top,n},o.prototype._hasCrossedThreshold=function(e,t){var n=e&&e.isIntersecting?e.intersectionRatio||0:-1,i=t.isIntersecting?t.intersectionRatio||0:-1;if(n!==i)for(var o=0;o<this.thresholds.length;o++){var s=this.thresholds[o];if(s==n||s==i||s<n!=s<i)return!0}},o.prototype._rootIsInDom=function(){return!this.root||l(t,this.root)},o.prototype._rootContainsTarget=function(e){return l(this.root||t,e)},o.prototype._registerInstance=function(){n.indexOf(this)<0&&n.push(this)},o.prototype._unregisterInstance=function(){var e=n.indexOf(this);-1!=e&&n.splice(e,1)},e.IntersectionObserver=o,e.IntersectionObserverEntry=i}function i(e){this.time=e.time,this.target=e.target,this.rootBounds=e.rootBounds,this.boundingClientRect=e.boundingClientRect,this.intersectionRect=e.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!e.intersectionRect;var t=this.boundingClientRect,n=t.width*t.height,i=this.intersectionRect,o=i.width*i.height;this.intersectionRatio=n?o/n:this.isIntersecting?1:0}function o(e,t){var n,i,o,s=t||{};if("function"!=typeof e)throw new Error("callback must be a function");if(s.root&&1!=s.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(n=this._checkForIntersections.bind(this),i=this.THROTTLE_TIMEOUT,o=null,function(){o||(o=setTimeout(function(){n(),o=null},i))}),this._callback=e,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(s.rootMargin),this.thresholds=this._initThresholds(s.threshold),this.root=s.root||null,this.rootMargin=this._rootMarginValues.map(function(e){return e.value+e.unit}).join(" ")}function s(e,t,n,i){"function"==typeof e.addEventListener?e.addEventListener(t,n,i||!1):"function"==typeof e.attachEvent&&e.attachEvent("on"+t,n)}function r(e,t,n,i){"function"==typeof e.removeEventListener?e.removeEventListener(t,n,i||!1):"function"==typeof e.detatchEvent&&e.detatchEvent("on"+t,n)}function a(e){var t;try{t=e.getBoundingClientRect()}catch(e){}return t?(t.width&&t.height||(t={top:t.top,right:t.right,bottom:t.bottom,left:t.left,width:t.right-t.left,height:t.bottom-t.top}),t):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function l(e,t){for(var n=t;n;){if(n==e)return!0;n=c(n)}return!1}function c(e){var t=e.parentNode;return t&&11==t.nodeType&&t.host?t.host:t}}(window,document)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyaWZ0LXpvb20vZGlzdC9EcmlmdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2Nyb2xsYW1hL2J1aWxkL3Njcm9sbGFtYS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9pbWFnZVBhbmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvZHJpZnRab29tLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL3Njcm9sbGFtYS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9vbkxvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUuY3NzL25vcm1hbGl6ZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplLmNzcz8yNDkzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIvaW50ZXJzZWN0aW9uLW9ic2VydmVyLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyZXF1aXJlIiwiZSIsInQiLCJ1IiwiYSIsImYiLCJFcnJvciIsImNvZGUiLCJsZW5ndGgiLCIxIiwib2JqIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsIndyaXRhYmxlIiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfdGhyb3dJZk1pc3NpbmciLCJfdGhyb3dJZk1pc3NpbmcyIiwiZGVmYXVsdCIsIl9kb20iLCJCb3VuZGluZ0JveCIsIm9wdGlvbnMiLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJpc1Nob3dpbmciLCJfb3B0aW9ucyRuYW1lc3BhY2UiLCJuYW1lc3BhY2UiLCJ1bmRlZmluZWQiLCJfb3B0aW9ucyR6b29tRmFjdG9yIiwiem9vbUZhY3RvciIsIl9vcHRpb25zJGNvbnRhaW5lckVsIiwiY29udGFpbmVyRWwiLCJzZXR0aW5ncyIsIm9wZW5DbGFzc2VzIiwiX2J1aWxkQ2xhc3NlcyIsIl9idWlsZEVsZW1lbnQiLCJzdWZmaXgiLCJjbGFzc2VzIiwibnMiLCJwdXNoIiwiZWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhZGRDbGFzc2VzIiwiem9vbVBhbmVXaWR0aCIsInpvb21QYW5lSGVpZ2h0IiwiYXBwZW5kQ2hpbGQiLCJzdHlsZSIsIndpZHRoIiwiTWF0aCIsInJvdW5kIiwiaGVpZ2h0IiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVDbGFzc2VzIiwicGVyY2VudGFnZU9mZnNldFgiLCJwZXJjZW50YWdlT2Zmc2V0WSIsInRyaWdnZXJSZWN0IiwicGFnZVhPZmZzZXQiLCJ3aW5kb3ciLCJwYWdlWU9mZnNldCIsImlubGluZUxlZnQiLCJsZWZ0IiwiY2xpZW50V2lkdGgiLCJpbmxpbmVUb3AiLCJ0b3AiLCJjbGllbnRIZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCIuL3V0aWwvZG9tIiwiLi91dGlsL3Rocm93SWZNaXNzaW5nIiwiMiIsIl9pbmplY3RCYXNlU3R5bGVzaGVldCIsIl9pbmplY3RCYXNlU3R5bGVzaGVldDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1RyaWdnZXIiLCJfVHJpZ2dlcjIiLCJfWm9vbVBhbmUiLCJfWm9vbVBhbmUyIiwiRHJpZnQiLCJ0cmlnZ2VyRWwiLCJfdGhpcyIsImFyZ3VtZW50cyIsIlZFUlNJT04iLCJkZXN0cm95IiwidHJpZ2dlciIsIl91bmJpbmRFdmVudHMiLCJpc0RPTUVsZW1lbnQiLCJfb3B0aW9ucyRzaG93V2hpdGVzcGEiLCJzaG93V2hpdGVzcGFjZUF0RWRnZXMiLCJfb3B0aW9ucyRjb250YWluSW5saW4iLCJjb250YWluSW5saW5lIiwiX29wdGlvbnMkaW5saW5lT2Zmc2V0IiwiaW5saW5lT2Zmc2V0WCIsIl9vcHRpb25zJGlubGluZU9mZnNldDIiLCJpbmxpbmVPZmZzZXRZIiwiX29wdGlvbnMkaW5saW5lQ29udGFpIiwiaW5saW5lQ29udGFpbmVyIiwiYm9keSIsIl9vcHRpb25zJHNvdXJjZUF0dHJpYiIsInNvdXJjZUF0dHJpYnV0ZSIsIl9vcHRpb25zJHBhbmVDb250YWluZSIsInBhbmVDb250YWluZXIiLCJfb3B0aW9ucyRpbmxpbmVQYW5lIiwiaW5saW5lUGFuZSIsIl9vcHRpb25zJGhhbmRsZVRvdWNoIiwiaGFuZGxlVG91Y2giLCJfb3B0aW9ucyRvblNob3ciLCJvblNob3ciLCJfb3B0aW9ucyRvbkhpZGUiLCJvbkhpZGUiLCJfb3B0aW9ucyRpbmplY3RCYXNlU3QiLCJpbmplY3RCYXNlU3R5bGVzIiwiX29wdGlvbnMkaG92ZXJEZWxheSIsImhvdmVyRGVsYXkiLCJfb3B0aW9ucyR0b3VjaERlbGF5IiwidG91Y2hEZWxheSIsIl9vcHRpb25zJGhvdmVyQm91bmRpbiIsImhvdmVyQm91bmRpbmdCb3giLCJfb3B0aW9ucyR0b3VjaEJvdW5kaW4iLCJ0b3VjaEJvdW5kaW5nQm94IiwiX2J1aWxkWm9vbVBhbmUiLCJfYnVpbGRUcmlnZ2VyIiwiem9vbVBhbmUiLCJjb250YWluZXIiLCJpbmxpbmUiLCJpbWFnZVVSTCIsIl9zZXRJbWFnZVVSTCIsImVuYWJsZWQiLCJzZXQiLCJ6ZiIsIi4vVHJpZ2dlciIsIi4vWm9vbVBhbmUiLCIuL2luamVjdEJhc2VTdHlsZXNoZWV0IiwiMyIsIl9Cb3VuZGluZ0JveCIsIl9Cb3VuZGluZ0JveDIiLCJUcmlnZ2VyIiwiX2luaXRpYWxpc2VQcm9wcyIsIl9vcHRpb25zJGVsIiwiX29wdGlvbnMkem9vbVBhbmUiLCJib3VuZGluZ0JveCIsIm9mZnNldFBhcmVudCIsIl9iaW5kRXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVFbnRyeSIsIl9oaWRlIiwiX2hhbmRsZU1vdmVtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0IiwiX2xhc3RNb3ZlbWVudCIsInR5cGUiLCJlbnRyeVRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiX3Nob3ciLCJzaG93IiwiZ2V0QXR0cmlidXRlIiwidG91Y2hBY3RpdmF0ZWQiLCJ0b3VjaGVzIiwiY2xlYXJUaW1lb3V0IiwiaGlkZSIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImZpcnN0VG91Y2giLCJjbGllbnRYIiwiY2xpZW50WSIsInJlY3QiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNldFBvc2l0aW9uIiwiLi9Cb3VuZGluZ0JveCIsIjQiLCJkaXZTdHlsZSIsIkhBU19BTklNQVRJT04iLCJab29tUGFuZSIsIl9jb21wbGV0ZVNob3ciLCJvcGVuaW5nQ2xhc3NlcyIsIl9jb21wbGV0ZUhpZGUiLCJjbG9zaW5nQ2xhc3NlcyIsImlubGluZUNsYXNzZXMiLCJzZXRBdHRyaWJ1dGUiLCJwYXJlbnRFbGVtZW50IiwiX2hhbmRsZUxvYWQiLCJpbWdFbCIsImxvYWRpbmdDbGFzc2VzIiwiX29wdGlvbnMkY29udGFpbmVyIiwiX29wdGlvbnMkaW5saW5lIiwibG9hZGVyRWwiLCJ0cmlnZ2VyV2lkdGgiLCJ0cmlnZ2VySGVpZ2h0IiwibWF4TGVmdCIsIm1heFRvcCIsInNjcm9sbFgiLCJzY3JvbGxZIiwidHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwiX3JlbW92ZUxpc3RlbmVyc0FuZFJlc2V0Q2xhc3NlcyIsIl9zZXRJbWFnZVNpemUiLCJfaXNJbmxpbmUiLCJfc2hvd0lubGluZSIsIl9zaG93SW5Db250YWluZXIiLCJpbm5lcldpZHRoIiwiNSIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZUVsIiwiY2xhc3NMaXN0IiwiYWRkIiwiY3JlYXRlVGV4dE5vZGUiLCJSVUxFUyIsImhlYWQiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiNiIsIl90eXBlb2YyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIl90eXBlb2YiLCJIQVNfRE9NXzIiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJjbGFzc05hbWVzIiwiZm9yRWFjaCIsImNsYXNzTmFtZSIsInJlbW92ZSIsIjciLCJzZWxlY3Rpb25Ub0FycmF5Iiwic2VsZWN0aW9uIiwibGVuIiwicmVzdWx0Iiwic2VsZWN0Iiwic2VsZWN0b3IiLCJFbGVtZW50IiwiZ2V0U3RlcElkIiwicmVmIiwiaWQiLCJnZXRPZmZzZXRJZCIsInNldHVwIiwib2Zmc2V0VmFsIiwic3RlcEVsIiwic3RlcENsYXNzIiwiaWRWYWwiLCJlbEEiLCJwb3NpdGlvbiIsImJhY2tncm91bmRJbWFnZSIsImJvcmRlciIsIm9wYWNpdHkiLCJ6SW5kZXgiLCJkaXNwbGF5IiwiZWxCIiwic2V0dXBTdGVwIiwiYm9yZGVyVG9wIiwidGV4dCIsImlubmVyVGV4dCIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImNvbG9yIiwibWFyZ2luIiwicGFkZGluZyIsInNldHVwT2Zmc2V0IiwidXBkYXRlIiwic3RlcE9mZnNldEhlaWdodCIsIm9mZnNldE1hcmdpbiIsImgiLCJ1cGRhdGVTdGVwIiwidXBkYXRlT2Zmc2V0Iiwibm90aWZ5U3RlcCIsImluZGV4Iiwic3RhdGUiLCJaRVJPX01PRSIsImNhbGxiYWNrIiwiaW8iLCJncmFwaGljRWwiLCJ2aCIsInBoIiwic3RlcE9mZnNldFRvcCIsImJib3hHcmFwaGljIiwiaXNSZWFkeSIsImlzRW5hYmxlZCIsImRlYnVnTW9kZSIsInByb2dyZXNzTW9kZSIsInByb2dyZXNzVGhyZXNob2xkIiwicHJlc2VydmVPcmRlciIsInRyaWdnZXJPbmNlIiwic3RlcFN0YXRlcyIsImNvbnRhaW5lclN0YXRlIiwicHJldmlvdXNZT2Zmc2V0IiwiZGlyZWN0aW9uIiwiZXhjbHVkZSIsImdldE9mZnNldFRvcCIsImRpc3RhbmNlIiwib2Zmc2V0VG9wIiwiZ2V0SW5kZXgiLCJlbGVtZW50IiwidXBkYXRlRGlyZWN0aW9uIiwiaGFuZGxlUmVzaXplIiwiaHRtbCIsImlubmVySGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50IiwibWF4Iiwic2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwibWFwIiwidXBkYXRlSU8iLCJoYW5kbGVFbmFibGUiLCJlbmFibGUiLCJkaXNjb25uZWN0IiwiYm90dG9tIiwic3RlcEFib3ZlIiwic3RlcEJlbG93Iiwic3RlcFByb2dyZXNzIiwidmlld3BvcnRBYm92ZSIsInZpZXdwb3J0QmVsb3ciLCJub3RpZnlPdGhlcnMiLCJsb2NhdGlvbiIsInNzIiwibm90aWZ5U3RlcEV4aXQiLCJub3RpZnlTdGVwRW50ZXIiLCJpJDEiLCJzcyQxIiwiY2hlY2siLCJyZXNwIiwic3RlcEVudGVyIiwibm90aWZ5U3RlcFByb2dyZXNzIiwic3RlcEV4aXQiLCJwcm9ncmVzcyIsIm5vdGlmeUNvbnRhaW5lckVudGVyIiwiY29udGFpbmVyRW50ZXIiLCJub3RpZnlDb250YWluZXJFeGl0IiwiY29udGFpbmVyRXhpdCIsImludGVyc2VjdFN0ZXBBYm92ZSIsImVudHJpZXMiLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwiYm91bmRpbmdDbGllbnRSZWN0IiwiYm90dG9tQWRqdXN0ZWQiLCJpbnRlcnNlY3RTdGVwQmVsb3ciLCJpbnRlcnNlY3RWaWV3cG9ydEFib3ZlIiwiaW50ZXJzZWN0Vmlld3BvcnRCZWxvdyIsImludGVyc2VjdFN0ZXBQcm9ncmVzcyIsImludGVyc2VjdGlvblJhdGlvIiwidG9GaXhlZCIsImludGVyc2VjdFRvcCIsImludGVyc2VjdEJvdHRvbSIsInVwZGF0ZVN0ZXBQcm9ncmVzc0lPIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsImNvdW50IiwiY2VpbCIsInJhdGlvIiwiY3JlYXRlVGhyZXNob2xkIiwicm9vdCIsIm9icyIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsInVwZGF0ZVRvcElPIiwidXBkYXRlQm90dG9tSU8iLCJTIiwiZ3JhcGhpYyIsInN0ZXAiLCJvZmZzZXQiLCJkZWJ1ZyIsIm9yZGVyIiwicGFyZW50Iiwib25jZSIsIkRhdGUiLCJnZXRUaW1lIiwiZmxvb3IiLCJyYW5kb20iLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsIk5vZGVMaXN0IiwiQXJyYXkiLCJvZmZzZXRUcmlnZ2VyIiwiY29uc29sZSIsImVycm9yIiwicmVzaXplIiwiZGlzYWJsZSIsImtleXMiLCJ4IiwiaXNOYU4iLCJtaW4iLCJvblN0ZXBFbnRlciIsImNiIiwib25TdGVwRXhpdCIsIm9uU3RlcFByb2dyZXNzIiwib25Db250YWluZXJFbnRlciIsIm9uQ29udGFpbmVyRXhpdCIsImZhY3RvcnkiLCJpbWFnZVNldCIsImZyb20iLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2hhcnQiLCJpbWFnZSIsInRvZ2dsZSIsImRyaWZ0U2V0IiwiZHJpZnQiLCJEcmlmdF9kZWZhdWx0Iiwic2Nyb2xsYW1hX3RleHQiLCJzY3JvbGxlciIsInNjcm9sbGFtYV9kZWZhdWx0Iiwic3RlcEhlaWdodCIsInNpbmdsZVN0ZXAiLCJ0ZXh0V2lkdGgiLCJvZmZzZXRXaWR0aCIsImJvZHlXaWR0aCIsImNoYXJ0V2lkdGgiLCJjaGFydEhlaWdodCIsImhhbmRsZVN0ZXBFbnRlciIsInJlc3BvbnNlIiwiaWR4IiwiaGFuZGxlQ29udGFpbmVyRW50ZXIiLCJoYW5kbGVDb250YWluZXJFeGl0IiwidmlzaWJpbGl0eSIsImNzcyIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCIkMSIsInRlc3QiLCJpbmRleE9mIiwiSlNPTiIsInN0cmluZ2lmeSIsImZuIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJhcHBseSIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJpdGVtIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYmluZCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidXNlU291cmNlTWFwIiwidG9TdHJpbmciLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJobXIiLCJsb2NhbHMiLCJJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5IiwicmVnaXN0cnkiLCJUSFJPVFRMRV9USU1FT1VUIiwiUE9MTF9JTlRFUlZBTCIsIlVTRV9NVVRBVElPTl9PQlNFUlZFUiIsIl9vYnNlcnZhdGlvblRhcmdldHMiLCJzb21lIiwiX3JlZ2lzdGVySW5zdGFuY2UiLCJfbW9uaXRvckludGVyc2VjdGlvbnMiLCJfY2hlY2tGb3JJbnRlcnNlY3Rpb25zIiwiX3VubW9uaXRvckludGVyc2VjdGlvbnMiLCJfdW5yZWdpc3Rlckluc3RhbmNlIiwidGFrZVJlY29yZHMiLCJyZWNvcmRzIiwiX3F1ZXVlZEVudHJpZXMiLCJzbGljZSIsIl9pbml0VGhyZXNob2xkcyIsIm9wdF90aHJlc2hvbGQiLCJpc0FycmF5Iiwic29ydCIsIl9wYXJzZVJvb3RNYXJnaW4iLCJvcHRfcm9vdE1hcmdpbiIsIm1hcmdpbnMiLCJzcGxpdCIsImV4ZWMiLCJwYXJzZUZsb2F0IiwidW5pdCIsIl9tb25pdG9yaW5nSW50ZXJzZWN0aW9ucyIsIl9tb25pdG9yaW5nSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImFkZEV2ZW50IiwiX2RvbU9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImNsZWFySW50ZXJ2YWwiLCJyZW1vdmVFdmVudCIsInJvb3RJc0luRG9tIiwiX3Jvb3RJc0luRG9tIiwicm9vdFJlY3QiLCJfZ2V0Um9vdFJlY3QiLCJyaWdodCIsInRhcmdldFJlY3QiLCJyb290Q29udGFpbnNUYXJnZXQiLCJfcm9vdENvbnRhaW5zVGFyZ2V0Iiwib2xkRW50cnkiLCJpbnRlcnNlY3Rpb25SZWN0IiwiX2NvbXB1dGVUYXJnZXRBbmRSb290SW50ZXJzZWN0aW9uIiwibmV3RW50cnkiLCJ0aW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJyb290Qm91bmRzIiwiX2hhc0Nyb3NzZWRUaHJlc2hvbGQiLCJfY2FsbGJhY2siLCJnZXRDb21wdXRlZFN0eWxlIiwicmVjdDEiLCJyZWN0MiIsImdldFBhcmVudE5vZGUiLCJhdFJvb3QiLCJwYXJlbnRSZWN0IiwicGFyZW50Q29tcHV0ZWRTdHlsZSIsIm92ZXJmbG93IiwiX2V4cGFuZFJlY3RCeVJvb3RNYXJnaW4iLCJfcm9vdE1hcmdpblZhbHVlcyIsIm5ld1JlY3QiLCJvbGRSYXRpbyIsIm5ld1JhdGlvIiwidGhyZXNob2xkcyIsImNvbnRhaW5zRGVlcCIsInRhcmdldEFyZWEiLCJpbnRlcnNlY3Rpb25BcmVhIiwib3B0X29wdGlvbnMiLCJ0aW1lb3V0IiwidGltZXIiLCJub2RlIiwiZXZlbnQiLCJvcHRfdXNlQ2FwdHVyZSIsImF0dGFjaEV2ZW50IiwiZGV0YXRjaEV2ZW50IiwiZXJyIiwiY2hpbGQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFB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QUFBdEssR0FvQ0EsU0FBQS9XLEVBQUExQixHQUNBLElBQUE0SCxFQUVBLElBQ0FBLEVBQUE1SCxFQUFBMEIsd0JBQ0csTUFBQXloQixJQUtILE9BQUF2YixHQUdBQSxFQUFBcEgsT0FBQW9ILEVBQUFqSCxTQUNBaUgsR0FDQXBHLElBQUFvRyxFQUFBcEcsSUFDQW9mLE1BQUFoWixFQUFBZ1osTUFDQWxRLE9BQUE5SSxFQUFBOEksT0FDQXJQLEtBQUF1RyxFQUFBdkcsS0FDQWIsTUFBQW9ILEVBQUFnWixNQUFBaFosRUFBQXZHLEtBQ0FWLE9BQUFpSCxFQUFBOEksT0FBQTlJLEVBQUFwRyxNQUdBb0csSUFXQXBHLElBQUEsRUFDQWtQLE9BQUEsRUFDQXJQLEtBQUEsRUFDQXVmLE1BQUEsRUFDQXBnQixNQUFBLEVBQ0FHLE9BQUEsR0FXQSxTQUFBNmhCLEVBQUFuTyxFQUFBK08sR0FFQSxJQURBLElBQUFOLEVBQUFNLEVBQ0FOLEdBQUEsQ0FDQSxHQUFBQSxHQUFBek8sRUFBQSxTQUVBeU8sRUFBQWpCLEVBQUFpQixHQUVBLFNBVUEsU0FBQWpCLEVBQUFpQixHQUNBLElBQUF6TyxFQUFBeU8sRUFBQWhJLFdBRUEsT0FBQXpHLEdBQUEsSUFBQUEsRUFBQW5KLFVBQUFtSixFQUFBc0QsS0FFQXRELEVBQUFzRCxLQUVBdEQsR0Fsc0JBLENBMHNCQ25ULE9BQUFqQiIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuRHJpZnQgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1yZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7aWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX3Rocm93SWZNaXNzaW5nID0gcmVxdWlyZSgnLi91dGlsL3Rocm93SWZNaXNzaW5nJyk7XG5cbnZhciBfdGhyb3dJZk1pc3NpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGhyb3dJZk1pc3NpbmcpO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJy4vdXRpbC9kb20nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbnZhciBCb3VuZGluZ0JveCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQm91bmRpbmdCb3gob3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCb3VuZGluZ0JveCk7XG5cbiAgICB0aGlzLmlzU2hvd2luZyA9IGZhbHNlO1xuXG4gICAgdmFyIF9vcHRpb25zJG5hbWVzcGFjZSA9IG9wdGlvbnMubmFtZXNwYWNlLFxuICAgICAgICBuYW1lc3BhY2UgPSBfb3B0aW9ucyRuYW1lc3BhY2UgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBfb3B0aW9ucyRuYW1lc3BhY2UsXG4gICAgICAgIF9vcHRpb25zJHpvb21GYWN0b3IgPSBvcHRpb25zLnpvb21GYWN0b3IsXG4gICAgICAgIHpvb21GYWN0b3IgPSBfb3B0aW9ucyR6b29tRmFjdG9yID09PSB1bmRlZmluZWQgPyAoMCwgX3Rocm93SWZNaXNzaW5nMi5kZWZhdWx0KSgpIDogX29wdGlvbnMkem9vbUZhY3RvcixcbiAgICAgICAgX29wdGlvbnMkY29udGFpbmVyRWwgPSBvcHRpb25zLmNvbnRhaW5lckVsLFxuICAgICAgICBjb250YWluZXJFbCA9IF9vcHRpb25zJGNvbnRhaW5lckVsID09PSB1bmRlZmluZWQgPyAoMCwgX3Rocm93SWZNaXNzaW5nMi5kZWZhdWx0KSgpIDogX29wdGlvbnMkY29udGFpbmVyRWw7XG5cbiAgICB0aGlzLnNldHRpbmdzID0geyBuYW1lc3BhY2U6IG5hbWVzcGFjZSwgem9vbUZhY3Rvcjogem9vbUZhY3RvciwgY29udGFpbmVyRWw6IGNvbnRhaW5lckVsIH07XG5cbiAgICB0aGlzLm9wZW5DbGFzc2VzID0gdGhpcy5fYnVpbGRDbGFzc2VzKCdvcGVuJyk7XG5cbiAgICB0aGlzLl9idWlsZEVsZW1lbnQoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCb3VuZGluZ0JveCwgW3tcbiAgICBrZXk6ICdfYnVpbGRDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2J1aWxkQ2xhc3NlcyhzdWZmaXgpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gWydkcmlmdC0nICsgc3VmZml4XTtcblxuICAgICAgdmFyIG5zID0gdGhpcy5zZXR0aW5ncy5uYW1lc3BhY2U7XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKG5zICsgJy0nICsgc3VmZml4KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2J1aWxkRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9idWlsZEVsZW1lbnQoKSB7XG4gICAgICB0aGlzLmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAoMCwgX2RvbS5hZGRDbGFzc2VzKSh0aGlzLmVsLCB0aGlzLl9idWlsZENsYXNzZXMoJ2JvdW5kaW5nLWJveCcpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdyh6b29tUGFuZVdpZHRoLCB6b29tUGFuZUhlaWdodCkge1xuICAgICAgdGhpcy5pc1Nob3dpbmcgPSB0cnVlO1xuXG4gICAgICB0aGlzLnNldHRpbmdzLmNvbnRhaW5lckVsLmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuXG4gICAgICB2YXIgc3R5bGUgPSB0aGlzLmVsLnN0eWxlO1xuICAgICAgc3R5bGUud2lkdGggPSBNYXRoLnJvdW5kKHpvb21QYW5lV2lkdGggLyB0aGlzLnNldHRpbmdzLnpvb21GYWN0b3IpICsgJ3B4JztcbiAgICAgIHN0eWxlLmhlaWdodCA9IE1hdGgucm91bmQoem9vbVBhbmVIZWlnaHQgLyB0aGlzLnNldHRpbmdzLnpvb21GYWN0b3IpICsgJ3B4JztcblxuICAgICAgKDAsIF9kb20uYWRkQ2xhc3NlcykodGhpcy5lbCwgdGhpcy5vcGVuQ2xhc3Nlcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGlkZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICBpZiAodGhpcy5pc1Nob3dpbmcpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5jb250YWluZXJFbC5yZW1vdmVDaGlsZCh0aGlzLmVsKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pc1Nob3dpbmcgPSBmYWxzZTtcblxuICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3NlcykodGhpcy5lbCwgdGhpcy5vcGVuQ2xhc3Nlcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3NpdGlvbihwZXJjZW50YWdlT2Zmc2V0WCwgcGVyY2VudGFnZU9mZnNldFksIHRyaWdnZXJSZWN0KSB7XG4gICAgICB2YXIgcGFnZVhPZmZzZXQgPSB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgICB2YXIgcGFnZVlPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cbiAgICAgIHZhciBpbmxpbmVMZWZ0ID0gdHJpZ2dlclJlY3QubGVmdCArIHBlcmNlbnRhZ2VPZmZzZXRYICogdHJpZ2dlclJlY3Qud2lkdGggLSB0aGlzLmVsLmNsaWVudFdpZHRoIC8gMiArIHBhZ2VYT2Zmc2V0O1xuICAgICAgdmFyIGlubGluZVRvcCA9IHRyaWdnZXJSZWN0LnRvcCArIHBlcmNlbnRhZ2VPZmZzZXRZICogdHJpZ2dlclJlY3QuaGVpZ2h0IC0gdGhpcy5lbC5jbGllbnRIZWlnaHQgLyAyICsgcGFnZVlPZmZzZXQ7XG5cbiAgICAgIHZhciBlbFJlY3QgPSB0aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAoaW5saW5lTGVmdCA8IHRyaWdnZXJSZWN0LmxlZnQgKyBwYWdlWE9mZnNldCkge1xuICAgICAgICBpbmxpbmVMZWZ0ID0gdHJpZ2dlclJlY3QubGVmdCArIHBhZ2VYT2Zmc2V0O1xuICAgICAgfSBlbHNlIGlmIChpbmxpbmVMZWZ0ICsgdGhpcy5lbC5jbGllbnRXaWR0aCA+IHRyaWdnZXJSZWN0LmxlZnQgKyB0cmlnZ2VyUmVjdC53aWR0aCArIHBhZ2VYT2Zmc2V0KSB7XG4gICAgICAgIGlubGluZUxlZnQgPSB0cmlnZ2VyUmVjdC5sZWZ0ICsgdHJpZ2dlclJlY3Qud2lkdGggLSB0aGlzLmVsLmNsaWVudFdpZHRoICsgcGFnZVhPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmxpbmVUb3AgPCB0cmlnZ2VyUmVjdC50b3AgKyBwYWdlWU9mZnNldCkge1xuICAgICAgICBpbmxpbmVUb3AgPSB0cmlnZ2VyUmVjdC50b3AgKyBwYWdlWU9mZnNldDtcbiAgICAgIH0gZWxzZSBpZiAoaW5saW5lVG9wICsgdGhpcy5lbC5jbGllbnRIZWlnaHQgPiB0cmlnZ2VyUmVjdC50b3AgKyB0cmlnZ2VyUmVjdC5oZWlnaHQgKyBwYWdlWU9mZnNldCkge1xuICAgICAgICBpbmxpbmVUb3AgPSB0cmlnZ2VyUmVjdC50b3AgKyB0cmlnZ2VyUmVjdC5oZWlnaHQgLSB0aGlzLmVsLmNsaWVudEhlaWdodCArIHBhZ2VZT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsLnN0eWxlLmxlZnQgPSBpbmxpbmVMZWZ0ICsgJ3B4JztcbiAgICAgIHRoaXMuZWwuc3R5bGUudG9wID0gaW5saW5lVG9wICsgJ3B4JztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQm91bmRpbmdCb3g7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJvdW5kaW5nQm94O1xuXG59LHtcIi4vdXRpbC9kb21cIjo2LFwiLi91dGlsL3Rocm93SWZNaXNzaW5nXCI6N31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9cmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9kb20gPSByZXF1aXJlKCcuL3V0aWwvZG9tJyk7XG5cbnZhciBfaW5qZWN0QmFzZVN0eWxlc2hlZXQgPSByZXF1aXJlKCcuL2luamVjdEJhc2VTdHlsZXNoZWV0Jyk7XG5cbnZhciBfaW5qZWN0QmFzZVN0eWxlc2hlZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5qZWN0QmFzZVN0eWxlc2hlZXQpO1xuXG52YXIgX1RyaWdnZXIgPSByZXF1aXJlKCcuL1RyaWdnZXInKTtcblxudmFyIF9UcmlnZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RyaWdnZXIpO1xuXG52YXIgX1pvb21QYW5lID0gcmVxdWlyZSgnLi9ab29tUGFuZScpO1xuXG52YXIgX1pvb21QYW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1pvb21QYW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEcmlmdCh0cmlnZ2VyRWwpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyaWZ0KTtcblxuICAgIHRoaXMuVkVSU0lPTiA9ICcxLjIuMCc7XG5cbiAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy50cmlnZ2VyLl91bmJpbmRFdmVudHMoKTtcbiAgICB9O1xuXG4gICAgdGhpcy50cmlnZ2VyRWwgPSB0cmlnZ2VyRWw7XG5cbiAgICBpZiAoISgwLCBfZG9tLmlzRE9NRWxlbWVudCkodGhpcy50cmlnZ2VyRWwpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgbmV3IERyaWZ0YCByZXF1aXJlcyBhIERPTSBlbGVtZW50IGFzIGl0cyBmaXJzdCBhcmd1bWVudC4nKTtcbiAgICB9XG5cbiAgICAvLyBBIGJpdCB1bmV4cGVjdGVkIGlmIHlvdSBoYXZlbid0IHNlZW4gdGhpcyBwYXR0ZXJuIGJlZm9yZS5cbiAgICAvLyBCYXNlZCBvbiB0aGUgcGF0dGVybiBoZXJlOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRpZnkvWW91LURvbnQtS25vdy1KUy9ibG9iL21hc3Rlci9lczYlMjAmJTIwYmV5b25kL2NoMi5tZCNuZXN0ZWQtZGVmYXVsdHMtZGVzdHJ1Y3R1cmVkLWFuZC1yZXN0cnVjdHVyZWRcbiAgICB2YXIgX29wdGlvbnMkbmFtZXNwYWNlID0gb3B0aW9ucy5uYW1lc3BhY2UsXG4gICAgICAgIG5hbWVzcGFjZSA9IF9vcHRpb25zJG5hbWVzcGFjZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IF9vcHRpb25zJG5hbWVzcGFjZSxcbiAgICAgICAgX29wdGlvbnMkc2hvd1doaXRlc3BhID0gb3B0aW9ucy5zaG93V2hpdGVzcGFjZUF0RWRnZXMsXG4gICAgICAgIHNob3dXaGl0ZXNwYWNlQXRFZGdlcyA9IF9vcHRpb25zJHNob3dXaGl0ZXNwYSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzaG93V2hpdGVzcGEsXG4gICAgICAgIF9vcHRpb25zJGNvbnRhaW5JbmxpbiA9IG9wdGlvbnMuY29udGFpbklubGluZSxcbiAgICAgICAgY29udGFpbklubGluZSA9IF9vcHRpb25zJGNvbnRhaW5JbmxpbiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRjb250YWluSW5saW4sXG4gICAgICAgIF9vcHRpb25zJGlubGluZU9mZnNldCA9IG9wdGlvbnMuaW5saW5lT2Zmc2V0WCxcbiAgICAgICAgaW5saW5lT2Zmc2V0WCA9IF9vcHRpb25zJGlubGluZU9mZnNldCA9PT0gdW5kZWZpbmVkID8gMCA6IF9vcHRpb25zJGlubGluZU9mZnNldCxcbiAgICAgICAgX29wdGlvbnMkaW5saW5lT2Zmc2V0MiA9IG9wdGlvbnMuaW5saW5lT2Zmc2V0WSxcbiAgICAgICAgaW5saW5lT2Zmc2V0WSA9IF9vcHRpb25zJGlubGluZU9mZnNldDIgPT09IHVuZGVmaW5lZCA/IDAgOiBfb3B0aW9ucyRpbmxpbmVPZmZzZXQyLFxuICAgICAgICBfb3B0aW9ucyRpbmxpbmVDb250YWkgPSBvcHRpb25zLmlubGluZUNvbnRhaW5lcixcbiAgICAgICAgaW5saW5lQ29udGFpbmVyID0gX29wdGlvbnMkaW5saW5lQ29udGFpID09PSB1bmRlZmluZWQgPyBkb2N1bWVudC5ib2R5IDogX29wdGlvbnMkaW5saW5lQ29udGFpLFxuICAgICAgICBfb3B0aW9ucyRzb3VyY2VBdHRyaWIgPSBvcHRpb25zLnNvdXJjZUF0dHJpYnV0ZSxcbiAgICAgICAgc291cmNlQXR0cmlidXRlID0gX29wdGlvbnMkc291cmNlQXR0cmliID09PSB1bmRlZmluZWQgPyAnZGF0YS16b29tJyA6IF9vcHRpb25zJHNvdXJjZUF0dHJpYixcbiAgICAgICAgX29wdGlvbnMkem9vbUZhY3RvciA9IG9wdGlvbnMuem9vbUZhY3RvcixcbiAgICAgICAgem9vbUZhY3RvciA9IF9vcHRpb25zJHpvb21GYWN0b3IgPT09IHVuZGVmaW5lZCA/IDMgOiBfb3B0aW9ucyR6b29tRmFjdG9yLFxuICAgICAgICBfb3B0aW9ucyRwYW5lQ29udGFpbmUgPSBvcHRpb25zLnBhbmVDb250YWluZXIsXG4gICAgICAgIHBhbmVDb250YWluZXIgPSBfb3B0aW9ucyRwYW5lQ29udGFpbmUgPT09IHVuZGVmaW5lZCA/IGRvY3VtZW50LmJvZHkgOiBfb3B0aW9ucyRwYW5lQ29udGFpbmUsXG4gICAgICAgIF9vcHRpb25zJGlubGluZVBhbmUgPSBvcHRpb25zLmlubGluZVBhbmUsXG4gICAgICAgIGlubGluZVBhbmUgPSBfb3B0aW9ucyRpbmxpbmVQYW5lID09PSB1bmRlZmluZWQgPyAzNzUgOiBfb3B0aW9ucyRpbmxpbmVQYW5lLFxuICAgICAgICBfb3B0aW9ucyRoYW5kbGVUb3VjaCA9IG9wdGlvbnMuaGFuZGxlVG91Y2gsXG4gICAgICAgIGhhbmRsZVRvdWNoID0gX29wdGlvbnMkaGFuZGxlVG91Y2ggPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfb3B0aW9ucyRoYW5kbGVUb3VjaCxcbiAgICAgICAgX29wdGlvbnMkb25TaG93ID0gb3B0aW9ucy5vblNob3csXG4gICAgICAgIG9uU2hvdyA9IF9vcHRpb25zJG9uU2hvdyA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IF9vcHRpb25zJG9uU2hvdyxcbiAgICAgICAgX29wdGlvbnMkb25IaWRlID0gb3B0aW9ucy5vbkhpZGUsXG4gICAgICAgIG9uSGlkZSA9IF9vcHRpb25zJG9uSGlkZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IF9vcHRpb25zJG9uSGlkZSxcbiAgICAgICAgX29wdGlvbnMkaW5qZWN0QmFzZVN0ID0gb3B0aW9ucy5pbmplY3RCYXNlU3R5bGVzLFxuICAgICAgICBpbmplY3RCYXNlU3R5bGVzID0gX29wdGlvbnMkaW5qZWN0QmFzZVN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogX29wdGlvbnMkaW5qZWN0QmFzZVN0LFxuICAgICAgICBfb3B0aW9ucyRob3ZlckRlbGF5ID0gb3B0aW9ucy5ob3ZlckRlbGF5LFxuICAgICAgICBob3ZlckRlbGF5ID0gX29wdGlvbnMkaG92ZXJEZWxheSA9PT0gdW5kZWZpbmVkID8gMCA6IF9vcHRpb25zJGhvdmVyRGVsYXksXG4gICAgICAgIF9vcHRpb25zJHRvdWNoRGVsYXkgPSBvcHRpb25zLnRvdWNoRGVsYXksXG4gICAgICAgIHRvdWNoRGVsYXkgPSBfb3B0aW9ucyR0b3VjaERlbGF5ID09PSB1bmRlZmluZWQgPyAwIDogX29wdGlvbnMkdG91Y2hEZWxheSxcbiAgICAgICAgX29wdGlvbnMkaG92ZXJCb3VuZGluID0gb3B0aW9ucy5ob3ZlckJvdW5kaW5nQm94LFxuICAgICAgICBob3ZlckJvdW5kaW5nQm94ID0gX29wdGlvbnMkaG92ZXJCb3VuZGluID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGhvdmVyQm91bmRpbixcbiAgICAgICAgX29wdGlvbnMkdG91Y2hCb3VuZGluID0gb3B0aW9ucy50b3VjaEJvdW5kaW5nQm94LFxuICAgICAgICB0b3VjaEJvdW5kaW5nQm94ID0gX29wdGlvbnMkdG91Y2hCb3VuZGluID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHRvdWNoQm91bmRpbjtcblxuICAgIGlmIChpbmxpbmVQYW5lICE9PSB0cnVlICYmICEoMCwgX2RvbS5pc0RPTUVsZW1lbnQpKHBhbmVDb250YWluZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgcGFuZUNvbnRhaW5lcmAgbXVzdCBiZSBhIERPTSBlbGVtZW50IHdoZW4gYGlubGluZVBhbmUgIT09IHRydWVgJyk7XG4gICAgfVxuICAgIGlmICghKDAsIF9kb20uaXNET01FbGVtZW50KShpbmxpbmVDb250YWluZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgaW5saW5lQ29udGFpbmVyYCBtdXN0IGJlIGEgRE9NIGVsZW1lbnQnKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHRpbmdzID0geyBuYW1lc3BhY2U6IG5hbWVzcGFjZSwgc2hvd1doaXRlc3BhY2VBdEVkZ2VzOiBzaG93V2hpdGVzcGFjZUF0RWRnZXMsIGNvbnRhaW5JbmxpbmU6IGNvbnRhaW5JbmxpbmUsIGlubGluZU9mZnNldFg6IGlubGluZU9mZnNldFgsIGlubGluZU9mZnNldFk6IGlubGluZU9mZnNldFksIGlubGluZUNvbnRhaW5lcjogaW5saW5lQ29udGFpbmVyLCBzb3VyY2VBdHRyaWJ1dGU6IHNvdXJjZUF0dHJpYnV0ZSwgem9vbUZhY3Rvcjogem9vbUZhY3RvciwgcGFuZUNvbnRhaW5lcjogcGFuZUNvbnRhaW5lciwgaW5saW5lUGFuZTogaW5saW5lUGFuZSwgaGFuZGxlVG91Y2g6IGhhbmRsZVRvdWNoLCBvblNob3c6IG9uU2hvdywgb25IaWRlOiBvbkhpZGUsIGluamVjdEJhc2VTdHlsZXM6IGluamVjdEJhc2VTdHlsZXMsIGhvdmVyRGVsYXk6IGhvdmVyRGVsYXksIHRvdWNoRGVsYXk6IHRvdWNoRGVsYXksIGhvdmVyQm91bmRpbmdCb3g6IGhvdmVyQm91bmRpbmdCb3gsIHRvdWNoQm91bmRpbmdCb3g6IHRvdWNoQm91bmRpbmdCb3ggfTtcblxuICAgIGlmICh0aGlzLnNldHRpbmdzLmluamVjdEJhc2VTdHlsZXMpIHtcbiAgICAgICgwLCBfaW5qZWN0QmFzZVN0eWxlc2hlZXQyLmRlZmF1bHQpKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fYnVpbGRab29tUGFuZSgpO1xuICAgIHRoaXMuX2J1aWxkVHJpZ2dlcigpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERyaWZ0LCBbe1xuICAgIGtleTogJ19idWlsZFpvb21QYW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2J1aWxkWm9vbVBhbmUoKSB7XG4gICAgICB0aGlzLnpvb21QYW5lID0gbmV3IF9ab29tUGFuZTIuZGVmYXVsdCh7XG4gICAgICAgIGNvbnRhaW5lcjogdGhpcy5zZXR0aW5ncy5wYW5lQ29udGFpbmVyLFxuICAgICAgICB6b29tRmFjdG9yOiB0aGlzLnNldHRpbmdzLnpvb21GYWN0b3IsXG4gICAgICAgIHNob3dXaGl0ZXNwYWNlQXRFZGdlczogdGhpcy5zZXR0aW5ncy5zaG93V2hpdGVzcGFjZUF0RWRnZXMsXG4gICAgICAgIGNvbnRhaW5JbmxpbmU6IHRoaXMuc2V0dGluZ3MuY29udGFpbklubGluZSxcbiAgICAgICAgaW5saW5lOiB0aGlzLnNldHRpbmdzLmlubGluZVBhbmUsXG4gICAgICAgIG5hbWVzcGFjZTogdGhpcy5zZXR0aW5ncy5uYW1lc3BhY2UsXG4gICAgICAgIGlubGluZU9mZnNldFg6IHRoaXMuc2V0dGluZ3MuaW5saW5lT2Zmc2V0WCxcbiAgICAgICAgaW5saW5lT2Zmc2V0WTogdGhpcy5zZXR0aW5ncy5pbmxpbmVPZmZzZXRZLFxuICAgICAgICBpbmxpbmVDb250YWluZXI6IHRoaXMuc2V0dGluZ3MuaW5saW5lQ29udGFpbmVyXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfYnVpbGRUcmlnZ2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2J1aWxkVHJpZ2dlcigpIHtcbiAgICAgIHRoaXMudHJpZ2dlciA9IG5ldyBfVHJpZ2dlcjIuZGVmYXVsdCh7XG4gICAgICAgIGVsOiB0aGlzLnRyaWdnZXJFbCxcbiAgICAgICAgem9vbVBhbmU6IHRoaXMuem9vbVBhbmUsXG4gICAgICAgIGhhbmRsZVRvdWNoOiB0aGlzLnNldHRpbmdzLmhhbmRsZVRvdWNoLFxuICAgICAgICBvblNob3c6IHRoaXMuc2V0dGluZ3Mub25TaG93LFxuICAgICAgICBvbkhpZGU6IHRoaXMuc2V0dGluZ3Mub25IaWRlLFxuICAgICAgICBzb3VyY2VBdHRyaWJ1dGU6IHRoaXMuc2V0dGluZ3Muc291cmNlQXR0cmlidXRlLFxuICAgICAgICBob3ZlckRlbGF5OiB0aGlzLnNldHRpbmdzLmhvdmVyRGVsYXksXG4gICAgICAgIHRvdWNoRGVsYXk6IHRoaXMuc2V0dGluZ3MudG91Y2hEZWxheSxcbiAgICAgICAgaG92ZXJCb3VuZGluZ0JveDogdGhpcy5zZXR0aW5ncy5ob3ZlckJvdW5kaW5nQm94LFxuICAgICAgICB0b3VjaEJvdW5kaW5nQm94OiB0aGlzLnNldHRpbmdzLnRvdWNoQm91bmRpbmdCb3gsXG4gICAgICAgIG5hbWVzcGFjZTogdGhpcy5zZXR0aW5ncy5uYW1lc3BhY2UsXG4gICAgICAgIHpvb21GYWN0b3I6IHRoaXMuc2V0dGluZ3Muem9vbUZhY3RvclxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Wm9vbUltYWdlVVJMJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Wm9vbUltYWdlVVJMKGltYWdlVVJMKSB7XG4gICAgICB0aGlzLnpvb21QYW5lLl9zZXRJbWFnZVVSTChpbWFnZVVSTCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB0aGlzLnRyaWdnZXIuZW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHRoaXMudHJpZ2dlci5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc1Nob3dpbmcnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuem9vbVBhbmUuaXNTaG93aW5nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3pvb21GYWN0b3InLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Muem9vbUZhY3RvcjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHpmKSB7XG4gICAgICB0aGlzLnNldHRpbmdzLnpvb21GYWN0b3IgPSB6ZjtcbiAgICAgIHRoaXMuem9vbVBhbmUuc2V0dGluZ3Muem9vbUZhY3RvciA9IHpmO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEcmlmdDtcbn0oKTtcblxufSx7XCIuL1RyaWdnZXJcIjozLFwiLi9ab29tUGFuZVwiOjQsXCIuL2luamVjdEJhc2VTdHlsZXNoZWV0XCI6NSxcIi4vdXRpbC9kb21cIjo2fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1yZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7aWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX3Rocm93SWZNaXNzaW5nID0gcmVxdWlyZSgnLi91dGlsL3Rocm93SWZNaXNzaW5nJyk7XG5cbnZhciBfdGhyb3dJZk1pc3NpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGhyb3dJZk1pc3NpbmcpO1xuXG52YXIgX0JvdW5kaW5nQm94ID0gcmVxdWlyZSgnLi9Cb3VuZGluZ0JveCcpO1xuXG52YXIgX0JvdW5kaW5nQm94MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JvdW5kaW5nQm94KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbnZhciBUcmlnZ2VyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUcmlnZ2VyKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmlnZ2VyKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbCh0aGlzKTtcblxuICAgIHZhciBfb3B0aW9ucyRlbCA9IG9wdGlvbnMuZWwsXG4gICAgICAgIGVsID0gX29wdGlvbnMkZWwgPT09IHVuZGVmaW5lZCA/ICgwLCBfdGhyb3dJZk1pc3NpbmcyLmRlZmF1bHQpKCkgOiBfb3B0aW9ucyRlbCxcbiAgICAgICAgX29wdGlvbnMkem9vbVBhbmUgPSBvcHRpb25zLnpvb21QYW5lLFxuICAgICAgICB6b29tUGFuZSA9IF9vcHRpb25zJHpvb21QYW5lID09PSB1bmRlZmluZWQgPyAoMCwgX3Rocm93SWZNaXNzaW5nMi5kZWZhdWx0KSgpIDogX29wdGlvbnMkem9vbVBhbmUsXG4gICAgICAgIF9vcHRpb25zJHNvdXJjZUF0dHJpYiA9IG9wdGlvbnMuc291cmNlQXR0cmlidXRlLFxuICAgICAgICBzb3VyY2VBdHRyaWJ1dGUgPSBfb3B0aW9ucyRzb3VyY2VBdHRyaWIgPT09IHVuZGVmaW5lZCA/ICgwLCBfdGhyb3dJZk1pc3NpbmcyLmRlZmF1bHQpKCkgOiBfb3B0aW9ucyRzb3VyY2VBdHRyaWIsXG4gICAgICAgIF9vcHRpb25zJGhhbmRsZVRvdWNoID0gb3B0aW9ucy5oYW5kbGVUb3VjaCxcbiAgICAgICAgaGFuZGxlVG91Y2ggPSBfb3B0aW9ucyRoYW5kbGVUb3VjaCA9PT0gdW5kZWZpbmVkID8gKDAsIF90aHJvd0lmTWlzc2luZzIuZGVmYXVsdCkoKSA6IF9vcHRpb25zJGhhbmRsZVRvdWNoLFxuICAgICAgICBfb3B0aW9ucyRvblNob3cgPSBvcHRpb25zLm9uU2hvdyxcbiAgICAgICAgb25TaG93ID0gX29wdGlvbnMkb25TaG93ID09PSB1bmRlZmluZWQgPyBudWxsIDogX29wdGlvbnMkb25TaG93LFxuICAgICAgICBfb3B0aW9ucyRvbkhpZGUgPSBvcHRpb25zLm9uSGlkZSxcbiAgICAgICAgb25IaWRlID0gX29wdGlvbnMkb25IaWRlID09PSB1bmRlZmluZWQgPyBudWxsIDogX29wdGlvbnMkb25IaWRlLFxuICAgICAgICBfb3B0aW9ucyRob3ZlckRlbGF5ID0gb3B0aW9ucy5ob3ZlckRlbGF5LFxuICAgICAgICBob3ZlckRlbGF5ID0gX29wdGlvbnMkaG92ZXJEZWxheSA9PT0gdW5kZWZpbmVkID8gMCA6IF9vcHRpb25zJGhvdmVyRGVsYXksXG4gICAgICAgIF9vcHRpb25zJHRvdWNoRGVsYXkgPSBvcHRpb25zLnRvdWNoRGVsYXksXG4gICAgICAgIHRvdWNoRGVsYXkgPSBfb3B0aW9ucyR0b3VjaERlbGF5ID09PSB1bmRlZmluZWQgPyAwIDogX29wdGlvbnMkdG91Y2hEZWxheSxcbiAgICAgICAgX29wdGlvbnMkaG92ZXJCb3VuZGluID0gb3B0aW9ucy5ob3ZlckJvdW5kaW5nQm94LFxuICAgICAgICBob3ZlckJvdW5kaW5nQm94ID0gX29wdGlvbnMkaG92ZXJCb3VuZGluID09PSB1bmRlZmluZWQgPyAoMCwgX3Rocm93SWZNaXNzaW5nMi5kZWZhdWx0KSgpIDogX29wdGlvbnMkaG92ZXJCb3VuZGluLFxuICAgICAgICBfb3B0aW9ucyR0b3VjaEJvdW5kaW4gPSBvcHRpb25zLnRvdWNoQm91bmRpbmdCb3gsXG4gICAgICAgIHRvdWNoQm91bmRpbmdCb3ggPSBfb3B0aW9ucyR0b3VjaEJvdW5kaW4gPT09IHVuZGVmaW5lZCA/ICgwLCBfdGhyb3dJZk1pc3NpbmcyLmRlZmF1bHQpKCkgOiBfb3B0aW9ucyR0b3VjaEJvdW5kaW4sXG4gICAgICAgIF9vcHRpb25zJG5hbWVzcGFjZSA9IG9wdGlvbnMubmFtZXNwYWNlLFxuICAgICAgICBuYW1lc3BhY2UgPSBfb3B0aW9ucyRuYW1lc3BhY2UgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBfb3B0aW9ucyRuYW1lc3BhY2UsXG4gICAgICAgIF9vcHRpb25zJHpvb21GYWN0b3IgPSBvcHRpb25zLnpvb21GYWN0b3IsXG4gICAgICAgIHpvb21GYWN0b3IgPSBfb3B0aW9ucyR6b29tRmFjdG9yID09PSB1bmRlZmluZWQgPyAoMCwgX3Rocm93SWZNaXNzaW5nMi5kZWZhdWx0KSgpIDogX29wdGlvbnMkem9vbUZhY3RvcjtcblxuICAgIHRoaXMuc2V0dGluZ3MgPSB7IGVsOiBlbCwgem9vbVBhbmU6IHpvb21QYW5lLCBzb3VyY2VBdHRyaWJ1dGU6IHNvdXJjZUF0dHJpYnV0ZSwgaGFuZGxlVG91Y2g6IGhhbmRsZVRvdWNoLCBvblNob3c6IG9uU2hvdywgb25IaWRlOiBvbkhpZGUsIGhvdmVyRGVsYXk6IGhvdmVyRGVsYXksIHRvdWNoRGVsYXk6IHRvdWNoRGVsYXksIGhvdmVyQm91bmRpbmdCb3g6IGhvdmVyQm91bmRpbmdCb3gsIHRvdWNoQm91bmRpbmdCb3g6IHRvdWNoQm91bmRpbmdCb3gsIG5hbWVzcGFjZTogbmFtZXNwYWNlLCB6b29tRmFjdG9yOiB6b29tRmFjdG9yIH07XG5cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5ob3ZlckJvdW5kaW5nQm94IHx8IHRoaXMuc2V0dGluZ3MudG91Y2hCb3VuZGluZ0JveCkge1xuICAgICAgdGhpcy5ib3VuZGluZ0JveCA9IG5ldyBfQm91bmRpbmdCb3gyLmRlZmF1bHQoe1xuICAgICAgICBuYW1lc3BhY2U6IHRoaXMuc2V0dGluZ3MubmFtZXNwYWNlLFxuICAgICAgICB6b29tRmFjdG9yOiB0aGlzLnNldHRpbmdzLnpvb21GYWN0b3IsXG4gICAgICAgIGNvbnRhaW5lckVsOiB0aGlzLnNldHRpbmdzLmVsLm9mZnNldFBhcmVudFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuICAgIHRoaXMuX2JpbmRFdmVudHMoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUcmlnZ2VyLCBbe1xuICAgIGtleTogJ19iaW5kRXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2JpbmRFdmVudHMoKSB7XG4gICAgICB0aGlzLnNldHRpbmdzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLl9oYW5kbGVFbnRyeSwgZmFsc2UpO1xuICAgICAgdGhpcy5zZXR0aW5ncy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5faGlkZSwgZmFsc2UpO1xuICAgICAgdGhpcy5zZXR0aW5ncy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVNb3ZlbWVudCwgZmFsc2UpO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5oYW5kbGVUb3VjaCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9oYW5kbGVFbnRyeSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnNldHRpbmdzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5faGlkZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnNldHRpbmdzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZU1vdmVtZW50LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3VuYmluZEV2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91bmJpbmRFdmVudHMoKSB7XG4gICAgICB0aGlzLnNldHRpbmdzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLl9oYW5kbGVFbnRyeSwgZmFsc2UpO1xuICAgICAgdGhpcy5zZXR0aW5ncy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5faGlkZSwgZmFsc2UpO1xuICAgICAgdGhpcy5zZXR0aW5ncy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVNb3ZlbWVudCwgZmFsc2UpO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5oYW5kbGVUb3VjaCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9oYW5kbGVFbnRyeSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnNldHRpbmdzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5faGlkZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnNldHRpbmdzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZU1vdmVtZW50LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNTaG93aW5nJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnpvb21QYW5lLmlzU2hvd2luZztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHJpZ2dlcjtcbn0oKTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMuX2hhbmRsZUVudHJ5ID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgX3RoaXMuX2xhc3RNb3ZlbWVudCA9IGU7XG5cbiAgICBpZiAoZS50eXBlID09ICdtb3VzZWVudGVyJyAmJiBfdGhpcy5zZXR0aW5ncy5ob3ZlckRlbGF5KSB7XG4gICAgICBfdGhpcy5lbnRyeVRpbWVvdXQgPSBzZXRUaW1lb3V0KF90aGlzLl9zaG93LCBfdGhpcy5zZXR0aW5ncy5ob3ZlckRlbGF5KTtcbiAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLnRvdWNoRGVsYXkpIHtcbiAgICAgIF90aGlzLmVudHJ5VGltZW91dCA9IHNldFRpbWVvdXQoX3RoaXMuX3Nob3csIF90aGlzLnNldHRpbmdzLnRvdWNoRGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5fc2hvdygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLl9zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3RoaXMuZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvblNob3cgPSBfdGhpcy5zZXR0aW5ncy5vblNob3c7XG4gICAgaWYgKG9uU2hvdyAmJiB0eXBlb2Ygb25TaG93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvblNob3coKTtcbiAgICB9XG5cbiAgICBfdGhpcy5zZXR0aW5ncy56b29tUGFuZS5zaG93KF90aGlzLnNldHRpbmdzLmVsLmdldEF0dHJpYnV0ZShfdGhpcy5zZXR0aW5ncy5zb3VyY2VBdHRyaWJ1dGUpLCBfdGhpcy5zZXR0aW5ncy5lbC5jbGllbnRXaWR0aCwgX3RoaXMuc2V0dGluZ3MuZWwuY2xpZW50SGVpZ2h0KTtcblxuICAgIGlmIChfdGhpcy5fbGFzdE1vdmVtZW50KSB7XG4gICAgICB2YXIgdG91Y2hBY3RpdmF0ZWQgPSBfdGhpcy5fbGFzdE1vdmVtZW50LnRvdWNoZXM7XG4gICAgICBpZiAodG91Y2hBY3RpdmF0ZWQgJiYgX3RoaXMuc2V0dGluZ3MudG91Y2hCb3VuZGluZ0JveCB8fCAhdG91Y2hBY3RpdmF0ZWQgJiYgX3RoaXMuc2V0dGluZ3MuaG92ZXJCb3VuZGluZ0JveCkge1xuICAgICAgICBfdGhpcy5ib3VuZGluZ0JveC5zaG93KF90aGlzLnNldHRpbmdzLnpvb21QYW5lLmVsLmNsaWVudFdpZHRoLCBfdGhpcy5zZXR0aW5ncy56b29tUGFuZS5lbC5jbGllbnRIZWlnaHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLl9oYW5kbGVNb3ZlbWVudCgpO1xuICB9O1xuXG4gIHRoaXMuX2hpZGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIF90aGlzLl9sYXN0TW92ZW1lbnQgPSBudWxsO1xuXG4gICAgaWYgKF90aGlzLmVudHJ5VGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmVudHJ5VGltZW91dCk7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLmJvdW5kaW5nQm94KSB7XG4gICAgICBfdGhpcy5ib3VuZGluZ0JveC5oaWRlKCk7XG4gICAgfVxuXG4gICAgdmFyIG9uSGlkZSA9IF90aGlzLnNldHRpbmdzLm9uSGlkZTtcbiAgICBpZiAob25IaWRlICYmIHR5cGVvZiBvbkhpZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uSGlkZSgpO1xuICAgIH1cblxuICAgIF90aGlzLnNldHRpbmdzLnpvb21QYW5lLmhpZGUoKTtcbiAgfTtcblxuICB0aGlzLl9oYW5kbGVNb3ZlbWVudCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIF90aGlzLl9sYXN0TW92ZW1lbnQgPSBlO1xuICAgIH0gZWxzZSBpZiAoX3RoaXMuX2xhc3RNb3ZlbWVudCkge1xuICAgICAgZSA9IF90aGlzLl9sYXN0TW92ZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbW92ZW1lbnRYID0gdm9pZCAwLFxuICAgICAgICBtb3ZlbWVudFkgPSB2b2lkIDA7XG5cbiAgICBpZiAoZS50b3VjaGVzKSB7XG4gICAgICB2YXIgZmlyc3RUb3VjaCA9IGUudG91Y2hlc1swXTtcbiAgICAgIG1vdmVtZW50WCA9IGZpcnN0VG91Y2guY2xpZW50WDtcbiAgICAgIG1vdmVtZW50WSA9IGZpcnN0VG91Y2guY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW92ZW1lbnRYID0gZS5jbGllbnRYO1xuICAgICAgbW92ZW1lbnRZID0gZS5jbGllbnRZO1xuICAgIH1cblxuICAgIHZhciBlbCA9IF90aGlzLnNldHRpbmdzLmVsO1xuICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIG9mZnNldFggPSBtb3ZlbWVudFggLSByZWN0LmxlZnQ7XG4gICAgdmFyIG9mZnNldFkgPSBtb3ZlbWVudFkgLSByZWN0LnRvcDtcblxuICAgIHZhciBwZXJjZW50YWdlT2Zmc2V0WCA9IG9mZnNldFggLyBfdGhpcy5zZXR0aW5ncy5lbC5jbGllbnRXaWR0aDtcbiAgICB2YXIgcGVyY2VudGFnZU9mZnNldFkgPSBvZmZzZXRZIC8gX3RoaXMuc2V0dGluZ3MuZWwuY2xpZW50SGVpZ2h0O1xuXG4gICAgaWYgKF90aGlzLmJvdW5kaW5nQm94KSB7XG4gICAgICBfdGhpcy5ib3VuZGluZ0JveC5zZXRQb3NpdGlvbihwZXJjZW50YWdlT2Zmc2V0WCwgcGVyY2VudGFnZU9mZnNldFksIHJlY3QpO1xuICAgIH1cblxuICAgIF90aGlzLnNldHRpbmdzLnpvb21QYW5lLnNldFBvc2l0aW9uKHBlcmNlbnRhZ2VPZmZzZXRYLCBwZXJjZW50YWdlT2Zmc2V0WSwgcmVjdCk7XG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUcmlnZ2VyO1xuXG59LHtcIi4vQm91bmRpbmdCb3hcIjoxLFwiLi91dGlsL3Rocm93SWZNaXNzaW5nXCI6N31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9cmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF90aHJvd0lmTWlzc2luZyA9IHJlcXVpcmUoJy4vdXRpbC90aHJvd0lmTWlzc2luZycpO1xuXG52YXIgX3Rocm93SWZNaXNzaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rocm93SWZNaXNzaW5nKTtcblxudmFyIF9kb20gPSByZXF1aXJlKCcuL3V0aWwvZG9tJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG4vLyBBbGwgb2ZmaWNpYWxseS1zdXBwb3J0ZWQgYnJvd3NlcnMgaGF2ZSB0aGlzLCBidXQgaXQncyBlYXN5IHRvXG4vLyBhY2NvdW50IGZvciwganVzdCBpbiBjYXNlLlxudmFyIGRpdlN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbnZhciBIQVNfQU5JTUFUSU9OID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IGZhbHNlIDogJ2FuaW1hdGlvbicgaW4gZGl2U3R5bGUgfHwgJ3dlYmtpdEFuaW1hdGlvbicgaW4gZGl2U3R5bGU7XG5cbnZhciBab29tUGFuZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gWm9vbVBhbmUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBab29tUGFuZSk7XG5cbiAgICB0aGlzLl9jb21wbGV0ZVNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBfdGhpcy5fY29tcGxldGVTaG93LCBmYWxzZSk7XG4gICAgICBfdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRBbmltYXRpb25FbmQnLCBfdGhpcy5fY29tcGxldGVTaG93LCBmYWxzZSk7XG5cbiAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzZXMpKF90aGlzLmVsLCBfdGhpcy5vcGVuaW5nQ2xhc3Nlcyk7XG4gICAgfTtcblxuICAgIHRoaXMuX2NvbXBsZXRlSGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIF90aGlzLl9jb21wbGV0ZUhpZGUsIGZhbHNlKTtcbiAgICAgIF90aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdEFuaW1hdGlvbkVuZCcsIF90aGlzLl9jb21wbGV0ZUhpZGUsIGZhbHNlKTtcblxuICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3NlcykoX3RoaXMuZWwsIF90aGlzLm9wZW5DbGFzc2VzKTtcbiAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzZXMpKF90aGlzLmVsLCBfdGhpcy5jbG9zaW5nQ2xhc3Nlcyk7XG4gICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzc2VzKShfdGhpcy5lbCwgX3RoaXMuaW5saW5lQ2xhc3Nlcyk7XG5cbiAgICAgIF90aGlzLmVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnJyk7XG5cbiAgICAgIC8vIFRoZSB3aW5kb3cgY291bGQgaGF2ZSBiZWVuIHJlc2l6ZWQgYWJvdmUgb3IgYmVsb3cgYGlubGluZWBcbiAgICAgIC8vIGxpbWl0cyBzaW5jZSB0aGUgWm9vbVBhbmUgd2FzIHNob3duLiBCZWNhdXNlIG9mIHRoaXMsIHdlXG4gICAgICAvLyBjYW4ndCByZWx5IG9uIGB0aGlzLl9pc0lubGluZWAgaGVyZS5cbiAgICAgIGlmIChfdGhpcy5lbC5wYXJlbnRFbGVtZW50ID09PSBfdGhpcy5zZXR0aW5ncy5jb250YWluZXIpIHtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLnJlbW92ZUNoaWxkKF90aGlzLmVsKTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMuZWwucGFyZW50RWxlbWVudCA9PT0gX3RoaXMuc2V0dGluZ3MuaW5saW5lQ29udGFpbmVyKSB7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLmlubGluZUNvbnRhaW5lci5yZW1vdmVDaGlsZChfdGhpcy5lbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuX2hhbmRsZUxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5pbWdFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgX3RoaXMuX2hhbmRsZUxvYWQsIGZhbHNlKTtcbiAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzZXMpKF90aGlzLmVsLCBfdGhpcy5sb2FkaW5nQ2xhc3Nlcyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTaG93aW5nID0gZmFsc2U7XG5cbiAgICB2YXIgX29wdGlvbnMkY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXIsXG4gICAgICAgIGNvbnRhaW5lciA9IF9vcHRpb25zJGNvbnRhaW5lciA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IF9vcHRpb25zJGNvbnRhaW5lcixcbiAgICAgICAgX29wdGlvbnMkem9vbUZhY3RvciA9IG9wdGlvbnMuem9vbUZhY3RvcixcbiAgICAgICAgem9vbUZhY3RvciA9IF9vcHRpb25zJHpvb21GYWN0b3IgPT09IHVuZGVmaW5lZCA/ICgwLCBfdGhyb3dJZk1pc3NpbmcyLmRlZmF1bHQpKCkgOiBfb3B0aW9ucyR6b29tRmFjdG9yLFxuICAgICAgICBfb3B0aW9ucyRpbmxpbmUgPSBvcHRpb25zLmlubGluZSxcbiAgICAgICAgaW5saW5lID0gX29wdGlvbnMkaW5saW5lID09PSB1bmRlZmluZWQgPyAoMCwgX3Rocm93SWZNaXNzaW5nMi5kZWZhdWx0KSgpIDogX29wdGlvbnMkaW5saW5lLFxuICAgICAgICBfb3B0aW9ucyRuYW1lc3BhY2UgPSBvcHRpb25zLm5hbWVzcGFjZSxcbiAgICAgICAgbmFtZXNwYWNlID0gX29wdGlvbnMkbmFtZXNwYWNlID09PSB1bmRlZmluZWQgPyBudWxsIDogX29wdGlvbnMkbmFtZXNwYWNlLFxuICAgICAgICBfb3B0aW9ucyRzaG93V2hpdGVzcGEgPSBvcHRpb25zLnNob3dXaGl0ZXNwYWNlQXRFZGdlcyxcbiAgICAgICAgc2hvd1doaXRlc3BhY2VBdEVkZ2VzID0gX29wdGlvbnMkc2hvd1doaXRlc3BhID09PSB1bmRlZmluZWQgPyAoMCwgX3Rocm93SWZNaXNzaW5nMi5kZWZhdWx0KSgpIDogX29wdGlvbnMkc2hvd1doaXRlc3BhLFxuICAgICAgICBfb3B0aW9ucyRjb250YWluSW5saW4gPSBvcHRpb25zLmNvbnRhaW5JbmxpbmUsXG4gICAgICAgIGNvbnRhaW5JbmxpbmUgPSBfb3B0aW9ucyRjb250YWluSW5saW4gPT09IHVuZGVmaW5lZCA/ICgwLCBfdGhyb3dJZk1pc3NpbmcyLmRlZmF1bHQpKCkgOiBfb3B0aW9ucyRjb250YWluSW5saW4sXG4gICAgICAgIF9vcHRpb25zJGlubGluZU9mZnNldCA9IG9wdGlvbnMuaW5saW5lT2Zmc2V0WCxcbiAgICAgICAgaW5saW5lT2Zmc2V0WCA9IF9vcHRpb25zJGlubGluZU9mZnNldCA9PT0gdW5kZWZpbmVkID8gMCA6IF9vcHRpb25zJGlubGluZU9mZnNldCxcbiAgICAgICAgX29wdGlvbnMkaW5saW5lT2Zmc2V0MiA9IG9wdGlvbnMuaW5saW5lT2Zmc2V0WSxcbiAgICAgICAgaW5saW5lT2Zmc2V0WSA9IF9vcHRpb25zJGlubGluZU9mZnNldDIgPT09IHVuZGVmaW5lZCA/IDAgOiBfb3B0aW9ucyRpbmxpbmVPZmZzZXQyLFxuICAgICAgICBfb3B0aW9ucyRpbmxpbmVDb250YWkgPSBvcHRpb25zLmlubGluZUNvbnRhaW5lcixcbiAgICAgICAgaW5saW5lQ29udGFpbmVyID0gX29wdGlvbnMkaW5saW5lQ29udGFpID09PSB1bmRlZmluZWQgPyBkb2N1bWVudC5ib2R5IDogX29wdGlvbnMkaW5saW5lQ29udGFpO1xuXG4gICAgdGhpcy5zZXR0aW5ncyA9IHsgY29udGFpbmVyOiBjb250YWluZXIsIHpvb21GYWN0b3I6IHpvb21GYWN0b3IsIGlubGluZTogaW5saW5lLCBuYW1lc3BhY2U6IG5hbWVzcGFjZSwgc2hvd1doaXRlc3BhY2VBdEVkZ2VzOiBzaG93V2hpdGVzcGFjZUF0RWRnZXMsIGNvbnRhaW5JbmxpbmU6IGNvbnRhaW5JbmxpbmUsIGlubGluZU9mZnNldFg6IGlubGluZU9mZnNldFgsIGlubGluZU9mZnNldFk6IGlubGluZU9mZnNldFksIGlubGluZUNvbnRhaW5lcjogaW5saW5lQ29udGFpbmVyIH07XG5cbiAgICB0aGlzLm9wZW5DbGFzc2VzID0gdGhpcy5fYnVpbGRDbGFzc2VzKCdvcGVuJyk7XG4gICAgdGhpcy5vcGVuaW5nQ2xhc3NlcyA9IHRoaXMuX2J1aWxkQ2xhc3Nlcygnb3BlbmluZycpO1xuICAgIHRoaXMuY2xvc2luZ0NsYXNzZXMgPSB0aGlzLl9idWlsZENsYXNzZXMoJ2Nsb3NpbmcnKTtcbiAgICB0aGlzLmlubGluZUNsYXNzZXMgPSB0aGlzLl9idWlsZENsYXNzZXMoJ2lubGluZScpO1xuICAgIHRoaXMubG9hZGluZ0NsYXNzZXMgPSB0aGlzLl9idWlsZENsYXNzZXMoJ2xvYWRpbmcnKTtcblxuICAgIHRoaXMuX2J1aWxkRWxlbWVudCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFpvb21QYW5lLCBbe1xuICAgIGtleTogJ19idWlsZENsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYnVpbGRDbGFzc2VzKHN1ZmZpeCkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBbJ2RyaWZ0LScgKyBzdWZmaXhdO1xuXG4gICAgICB2YXIgbnMgPSB0aGlzLnNldHRpbmdzLm5hbWVzcGFjZTtcbiAgICAgIGlmIChucykge1xuICAgICAgICBjbGFzc2VzLnB1c2gobnMgKyAnLScgKyBzdWZmaXgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xhc3NlcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfYnVpbGRFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2J1aWxkRWxlbWVudCgpIHtcbiAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICgwLCBfZG9tLmFkZENsYXNzZXMpKHRoaXMuZWwsIHRoaXMuX2J1aWxkQ2xhc3Nlcygnem9vbS1wYW5lJykpO1xuXG4gICAgICB2YXIgbG9hZGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICgwLCBfZG9tLmFkZENsYXNzZXMpKGxvYWRlckVsLCB0aGlzLl9idWlsZENsYXNzZXMoJ3pvb20tcGFuZS1sb2FkZXInKSk7XG4gICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKGxvYWRlckVsKTtcblxuICAgICAgdGhpcy5pbWdFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLmltZ0VsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0SW1hZ2VVUkwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0SW1hZ2VVUkwoaW1hZ2VVUkwpIHtcbiAgICAgIHRoaXMuaW1nRWwuc2V0QXR0cmlidXRlKCdzcmMnLCBpbWFnZVVSTCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3NldEltYWdlU2l6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRJbWFnZVNpemUodHJpZ2dlcldpZHRoLCB0cmlnZ2VySGVpZ2h0KSB7XG4gICAgICB0aGlzLmltZ0VsLnN0eWxlLndpZHRoID0gdHJpZ2dlcldpZHRoICogdGhpcy5zZXR0aW5ncy56b29tRmFjdG9yICsgJ3B4JztcbiAgICAgIHRoaXMuaW1nRWwuc3R5bGUuaGVpZ2h0ID0gdHJpZ2dlckhlaWdodCAqIHRoaXMuc2V0dGluZ3Muem9vbUZhY3RvciArICdweCc7XG4gICAgfVxuXG4gICAgLy8gYHBlcmNlbnRhZ2VPZmZzZXRYYCBhbmQgYHBlcmNlbnRhZ2VPZmZzZXRZYCBtdXN0IGJlIHBlcmNlbnRhZ2VzXG4gICAgLy8gZXhwcmVzc2VkIGFzIGZsb2F0cyBiZXR3ZWVuIGAwJyBhbmQgYDFgLlxuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBvc2l0aW9uKHBlcmNlbnRhZ2VPZmZzZXRYLCBwZXJjZW50YWdlT2Zmc2V0WSwgdHJpZ2dlclJlY3QpIHtcbiAgICAgIHZhciBsZWZ0ID0gLSh0aGlzLmltZ0VsLmNsaWVudFdpZHRoICogcGVyY2VudGFnZU9mZnNldFggLSB0aGlzLmVsLmNsaWVudFdpZHRoIC8gMik7XG4gICAgICB2YXIgdG9wID0gLSh0aGlzLmltZ0VsLmNsaWVudEhlaWdodCAqIHBlcmNlbnRhZ2VPZmZzZXRZIC0gdGhpcy5lbC5jbGllbnRIZWlnaHQgLyAyKTtcbiAgICAgIHZhciBtYXhMZWZ0ID0gLSh0aGlzLmltZ0VsLmNsaWVudFdpZHRoIC0gdGhpcy5lbC5jbGllbnRXaWR0aCk7XG4gICAgICB2YXIgbWF4VG9wID0gLSh0aGlzLmltZ0VsLmNsaWVudEhlaWdodCAtIHRoaXMuZWwuY2xpZW50SGVpZ2h0KTtcblxuICAgICAgaWYgKHRoaXMuZWwucGFyZW50RWxlbWVudCA9PT0gdGhpcy5zZXR0aW5ncy5pbmxpbmVDb250YWluZXIpIHtcbiAgICAgICAgLy8gVGhpcyBtYXkgYmUgbmVlZGVkIGluIHRoZSBmdXR1cmUgdG8gZGVhbCB3aXRoIGJyb3dzZXIgZXZlbnRcbiAgICAgICAgLy8gaW5jb25zaXN0ZW5jaWVzLCBidXQgaXQncyBkaWZmaWN1bHQgdG8gdGVsbCBmb3Igc3VyZS5cbiAgICAgICAgLy8gbGV0IHNjcm9sbFggPSBpc1RvdWNoID8gMCA6IHdpbmRvdy5zY3JvbGxYO1xuICAgICAgICAvLyBsZXQgc2Nyb2xsWSA9IGlzVG91Y2ggPyAwIDogd2luZG93LnNjcm9sbFk7XG4gICAgICAgIHZhciBzY3JvbGxYID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgICAgICB2YXIgc2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgICB2YXIgaW5saW5lTGVmdCA9IHRyaWdnZXJSZWN0LmxlZnQgKyBwZXJjZW50YWdlT2Zmc2V0WCAqIHRyaWdnZXJSZWN0LndpZHRoIC0gdGhpcy5lbC5jbGllbnRXaWR0aCAvIDIgKyB0aGlzLnNldHRpbmdzLmlubGluZU9mZnNldFggKyBzY3JvbGxYO1xuICAgICAgICB2YXIgaW5saW5lVG9wID0gdHJpZ2dlclJlY3QudG9wICsgcGVyY2VudGFnZU9mZnNldFkgKiB0cmlnZ2VyUmVjdC5oZWlnaHQgLSB0aGlzLmVsLmNsaWVudEhlaWdodCAvIDIgKyB0aGlzLnNldHRpbmdzLmlubGluZU9mZnNldFkgKyBzY3JvbGxZO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNvbnRhaW5JbmxpbmUpIHtcbiAgICAgICAgICB2YXIgZWxSZWN0ID0gdGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgIGlmIChpbmxpbmVMZWZ0IDwgdHJpZ2dlclJlY3QubGVmdCArIHNjcm9sbFgpIHtcbiAgICAgICAgICAgIGlubGluZUxlZnQgPSB0cmlnZ2VyUmVjdC5sZWZ0ICsgc2Nyb2xsWDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlubGluZUxlZnQgKyB0aGlzLmVsLmNsaWVudFdpZHRoID4gdHJpZ2dlclJlY3QubGVmdCArIHRyaWdnZXJSZWN0LndpZHRoICsgc2Nyb2xsWCkge1xuICAgICAgICAgICAgaW5saW5lTGVmdCA9IHRyaWdnZXJSZWN0LmxlZnQgKyB0cmlnZ2VyUmVjdC53aWR0aCAtIHRoaXMuZWwuY2xpZW50V2lkdGggKyBzY3JvbGxYO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbmxpbmVUb3AgPCB0cmlnZ2VyUmVjdC50b3AgKyBzY3JvbGxZKSB7XG4gICAgICAgICAgICBpbmxpbmVUb3AgPSB0cmlnZ2VyUmVjdC50b3AgKyBzY3JvbGxZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaW5saW5lVG9wICsgdGhpcy5lbC5jbGllbnRIZWlnaHQgPiB0cmlnZ2VyUmVjdC50b3AgKyB0cmlnZ2VyUmVjdC5oZWlnaHQgKyBzY3JvbGxZKSB7XG4gICAgICAgICAgICBpbmxpbmVUb3AgPSB0cmlnZ2VyUmVjdC50b3AgKyB0cmlnZ2VyUmVjdC5oZWlnaHQgLSB0aGlzLmVsLmNsaWVudEhlaWdodCArIHNjcm9sbFk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbC5zdHlsZS5sZWZ0ID0gaW5saW5lTGVmdCArICdweCc7XG4gICAgICAgIHRoaXMuZWwuc3R5bGUudG9wID0gaW5saW5lVG9wICsgJ3B4JztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLnNob3dXaGl0ZXNwYWNlQXRFZGdlcykge1xuICAgICAgICBpZiAobGVmdCA+IDApIHtcbiAgICAgICAgICBsZWZ0ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChsZWZ0IDwgbWF4TGVmdCkge1xuICAgICAgICAgIGxlZnQgPSBtYXhMZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvcCA+IDApIHtcbiAgICAgICAgICB0b3AgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHRvcCA8IG1heFRvcCkge1xuICAgICAgICAgIHRvcCA9IG1heFRvcDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmltZ0VsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgpJztcbiAgICAgIHRoaXMuaW1nRWwuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCknO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19yZW1vdmVMaXN0ZW5lcnNBbmRSZXNldENsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlTGlzdGVuZXJzQW5kUmVzZXRDbGFzc2VzKCkge1xuICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCB0aGlzLl9jb21wbGV0ZVNob3csIGZhbHNlKTtcbiAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgdGhpcy5fY29tcGxldGVIaWRlLCBmYWxzZSk7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdEFuaW1hdGlvbkVuZCcsIHRoaXMuX2NvbXBsZXRlU2hvdywgZmFsc2UpO1xuICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRBbmltYXRpb25FbmQnLCB0aGlzLl9jb21wbGV0ZUhpZGUsIGZhbHNlKTtcbiAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzZXMpKHRoaXMuZWwsIHRoaXMub3BlbkNsYXNzZXMpO1xuICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3NlcykodGhpcy5lbCwgdGhpcy5jbG9zaW5nQ2xhc3Nlcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3coaW1hZ2VVUkwsIHRyaWdnZXJXaWR0aCwgdHJpZ2dlckhlaWdodCkge1xuICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzQW5kUmVzZXRDbGFzc2VzKCk7XG4gICAgICB0aGlzLmlzU2hvd2luZyA9IHRydWU7XG5cbiAgICAgICgwLCBfZG9tLmFkZENsYXNzZXMpKHRoaXMuZWwsIHRoaXMub3BlbkNsYXNzZXMpO1xuICAgICAgKDAsIF9kb20uYWRkQ2xhc3NlcykodGhpcy5lbCwgdGhpcy5sb2FkaW5nQ2xhc3Nlcyk7XG5cbiAgICAgIHRoaXMuaW1nRWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuX2hhbmRsZUxvYWQsIGZhbHNlKTtcbiAgICAgIHRoaXMuX3NldEltYWdlVVJMKGltYWdlVVJMKTtcbiAgICAgIHRoaXMuX3NldEltYWdlU2l6ZSh0cmlnZ2VyV2lkdGgsIHRyaWdnZXJIZWlnaHQpO1xuXG4gICAgICBpZiAodGhpcy5faXNJbmxpbmUpIHtcbiAgICAgICAgdGhpcy5fc2hvd0lubGluZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2hvd0luQ29udGFpbmVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChIQVNfQU5JTUFUSU9OKSB7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgdGhpcy5fY29tcGxldGVTaG93LCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0QW5pbWF0aW9uRW5kJywgdGhpcy5fY29tcGxldGVTaG93LCBmYWxzZSk7XG4gICAgICAgICgwLCBfZG9tLmFkZENsYXNzZXMpKHRoaXMuZWwsIHRoaXMub3BlbmluZ0NsYXNzZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zaG93SW5saW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Nob3dJbmxpbmUoKSB7XG4gICAgICB0aGlzLnNldHRpbmdzLmlubGluZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsKTtcbiAgICAgICgwLCBfZG9tLmFkZENsYXNzZXMpKHRoaXMuZWwsIHRoaXMuaW5saW5lQ2xhc3Nlcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3Nob3dJbkNvbnRhaW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zaG93SW5Db250YWluZXIoKSB7XG4gICAgICB0aGlzLnNldHRpbmdzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoaWRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVyc0FuZFJlc2V0Q2xhc3NlcygpO1xuICAgICAgdGhpcy5pc1Nob3dpbmcgPSBmYWxzZTtcblxuICAgICAgaWYgKEhBU19BTklNQVRJT04pIHtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCB0aGlzLl9jb21wbGV0ZUhpZGUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRBbmltYXRpb25FbmQnLCB0aGlzLl9jb21wbGV0ZUhpZGUsIGZhbHNlKTtcbiAgICAgICAgKDAsIF9kb20uYWRkQ2xhc3NlcykodGhpcy5lbCwgdGhpcy5jbG9zaW5nQ2xhc3Nlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzc2VzKSh0aGlzLmVsLCB0aGlzLm9wZW5DbGFzc2VzKTtcbiAgICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3NlcykodGhpcy5lbCwgdGhpcy5pbmxpbmVDbGFzc2VzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfaXNJbmxpbmUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGlubGluZSA9IHRoaXMuc2V0dGluZ3MuaW5saW5lO1xuXG4gICAgICByZXR1cm4gaW5saW5lID09PSB0cnVlIHx8IHR5cGVvZiBpbmxpbmUgPT09ICdudW1iZXInICYmIHdpbmRvdy5pbm5lcldpZHRoIDw9IGlubGluZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gWm9vbVBhbmU7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFpvb21QYW5lO1xuXG59LHtcIi4vdXRpbC9kb21cIjo2LFwiLi91dGlsL3Rocm93SWZNaXNzaW5nXCI6N31dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5qZWN0QmFzZVN0eWxlc2hlZXQ7XG52YXIgUlVMRVMgPSAnXFxuQGtleWZyYW1lcyBub29wIHtcXG4gIDAlIHsgem9vbTogMTsgfVxcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgbm9vcCB7XFxuICAwJSB7IHpvb206IDE7IH1cXG59XFxuXFxuLmRyaWZ0LXpvb20tcGFuZS5kcmlmdC1vcGVuIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uZHJpZnQtem9vbS1wYW5lLmRyaWZ0LW9wZW5pbmcsIC5kcmlmdC16b29tLXBhbmUuZHJpZnQtY2xvc2luZyB7XFxuICBhbmltYXRpb246IG5vb3AgMW1zO1xcbiAgLXdlYmtpdC1hbmltYXRpb246IG5vb3AgMW1zO1xcbn1cXG5cXG4uZHJpZnQtem9vbS1wYW5lIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLmRyaWZ0LXpvb20tcGFuZS1sb2FkZXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmRyaWZ0LXpvb20tcGFuZSBpbWcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXgtd2lkdGg6IG5vbmU7XFxuICBtYXgtaGVpZ2h0OiBub25lO1xcbn1cXG5cXG4uZHJpZnQtYm91bmRpbmctYm94IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4nO1xuXG5mdW5jdGlvbiBpbmplY3RCYXNlU3R5bGVzaGVldCgpIHtcbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kcmlmdC1iYXNlLXN0eWxlcycpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZUVsLnR5cGUgPSAndGV4dC9jc3MnO1xuICBzdHlsZUVsLmNsYXNzTGlzdC5hZGQoJ2RyaWZ0LWJhc2Utc3R5bGVzJyk7XG5cbiAgc3R5bGVFbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShSVUxFUykpO1xuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbCwgaGVhZC5maXJzdENoaWxkKTtcbn1cblxufSx7fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mMiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YyKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mMihvYmopO1xufTtcblxuZXhwb3J0cy5pc0RPTUVsZW1lbnQgPSBpc0RPTUVsZW1lbnQ7XG5leHBvcnRzLmFkZENsYXNzZXMgPSBhZGRDbGFzc2VzO1xuZXhwb3J0cy5yZW1vdmVDbGFzc2VzID0gcmVtb3ZlQ2xhc3Nlcztcbi8vIFRoaXMgaXMgbm90IHJlYWxseSBhIHBlcmZlY3QgY2hlY2ssIGJ1dCB3b3JrcyBmaW5lLlxuLy8gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM4NDI4NlxudmFyIEhBU19ET01fMiA9ICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKEhUTUxFbGVtZW50KSkgPT09ICdvYmplY3QnO1xuXG5mdW5jdGlvbiBpc0RPTUVsZW1lbnQob2JqKSB7XG4gIHJldHVybiBIQVNfRE9NXzIgPyBvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA6IG9iaiAmJiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCAmJiBvYmoubm9kZVR5cGUgPT09IDEgJiYgdHlwZW9mIG9iai5ub2RlTmFtZSA9PT0gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzZXMoZWwsIGNsYXNzTmFtZXMpIHtcbiAgY2xhc3NOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzKGVsLCBjbGFzc05hbWVzKSB7XG4gIGNsYXNzTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9KTtcbn1cblxufSx7fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0aHJvd0lmTWlzc2luZztcbmZ1bmN0aW9uIHRocm93SWZNaXNzaW5nKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcGFyYW1ldGVyJyk7XG59XG5cbn0se31dfSx7fSxbMl0pKDIpXG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuc2Nyb2xsYW1hID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4vLyBET00gaGVscGVyIGZ1bmN0aW9uc1xuXG4vLyBwcml2YXRlXG5mdW5jdGlvbiBzZWxlY3Rpb25Ub0FycmF5KHNlbGVjdGlvbikge1xuICB2YXIgbGVuID0gc2VsZWN0aW9uLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgcmVzdWx0LnB1c2goc2VsZWN0aW9uW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBwdWJsaWNcbmZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvcikge1xuICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBFbGVtZW50KSB7IHJldHVybiBzZWxlY3RvcjsgfVxuICBlbHNlIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKVxuICAgIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RBbGwoc2VsZWN0b3IsIHBhcmVudCkge1xuICBpZiAoIHBhcmVudCA9PT0gdm9pZCAwICkgcGFyZW50ID0gZG9jdW1lbnQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uVG9BcnJheShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICB9IGVsc2UgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uVG9BcnJheShzZWxlY3Rvcik7XG4gIH0gZWxzZSBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfVxuICByZXR1cm4gW107XG59XG5cbmZ1bmN0aW9uIGdldFN0ZXBJZChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgaSA9IHJlZi5pO1xuXG4gIHJldHVybiAoXCJzY3JvbGxhbWFfX2RlYnVnLXN0ZXAtLVwiICsgaWQgKyBcIi1cIiArIGkpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRJZChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuXG4gIHJldHVybiAoXCJzY3JvbGxhbWFfX2RlYnVnLW9mZnNldC0tXCIgKyBpZCk7XG59XG5cbi8vIFNFVFVQXG5mdW5jdGlvbiBzZXR1cFN0ZXAocmVmKSB7XG4gIHZhciBpZCA9IHJlZi5pZDtcbiAgdmFyIGkgPSByZWYuaTtcblxuICB2YXIgaWRWYWwgPSBnZXRTdGVwSWQoeyBpZDogaWQsIGk6IGkgfSk7XG5cbiAgdmFyIGVsQSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBlbEEuc2V0QXR0cmlidXRlKCdpZCcsIChpZFZhbCArIFwiX2Fib3ZlXCIpKTtcbiAgZWxBLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2Nyb2xsYW1hX19kZWJ1Zy1zdGVwJyk7XG4gIGVsQS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGVsQS5zdHlsZS5sZWZ0ID0gJzAnO1xuICBlbEEuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gIC8vIGVsQS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnZ3JlZW4nO1xuICBlbEEuc3R5bGUuYmFja2dyb3VuZEltYWdlID1cbiAgICAncmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg0NWRlZywgZ3JlZW4gMCwgZ3JlZW4gMnB4LCB3aGl0ZSAwLCB3aGl0ZSA0MHB4KSc7XG4gIGVsQS5zdHlsZS5ib3JkZXIgPSAnMnB4IHNvbGlkIGdyZWVuJztcbiAgZWxBLnN0eWxlLm9wYWNpdHkgPSAnMC4zMyc7XG4gIGVsQS5zdHlsZS56SW5kZXggPSAnOTk5OSc7XG4gIGVsQS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxBKTtcblxuICB2YXIgZWxCID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGVsQi5zZXRBdHRyaWJ1dGUoJ2lkJywgKGlkVmFsICsgXCJfYmVsb3dcIikpO1xuICBlbEIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdzY3JvbGxhbWFfX2RlYnVnLXN0ZXAnKTtcbiAgZWxCLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgZWxCLnN0eWxlLmxlZnQgPSAnMCc7XG4gIGVsQi5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgLy8gZWxCLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdvcmFuZ2UnO1xuICBlbEIuc3R5bGUuYmFja2dyb3VuZEltYWdlID1cbiAgICAncmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCgxMzVkZWcsIG9yYW5nZSAwLCBvcmFuZ2UgMnB4LCB3aGl0ZSAwLCB3aGl0ZSA0MHB4KSc7XG4gIGVsQi5zdHlsZS5ib3JkZXIgPSAnMnB4IHNvbGlkIG9yYW5nZSc7XG4gIGVsQi5zdHlsZS5vcGFjaXR5ID0gJzAuMzMnO1xuICBlbEIuc3R5bGUuekluZGV4ID0gJzk5OTknO1xuICBlbEIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbEIpO1xufVxuXG5mdW5jdGlvbiBzZXR1cE9mZnNldChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgb2Zmc2V0VmFsID0gcmVmLm9mZnNldFZhbDtcbiAgdmFyIHN0ZXBDbGFzcyA9IHJlZi5zdGVwQ2xhc3M7XG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGVsLnNldEF0dHJpYnV0ZSgnaWQnLCBnZXRPZmZzZXRJZCh7IGlkOiBpZCB9KSk7XG4gIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2Nyb2xsYW1hX19kZWJ1Zy1vZmZzZXQnKTtcblxuICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGVsLnN0eWxlLmxlZnQgPSAnMCc7XG4gIGVsLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICBlbC5zdHlsZS5oZWlnaHQgPSAnMHB4JztcbiAgZWwuc3R5bGUuYm9yZGVyVG9wID0gJzJweCBkYXNoZWQgYmxhY2snO1xuICBlbC5zdHlsZS56SW5kZXggPSAnOTk5OSc7XG5cbiAgdmFyIHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIHRleHQuaW5uZXJUZXh0ID0gXCJcXFwiLlwiICsgc3RlcENsYXNzICsgXCJcXFwiIHRyaWdnZXI6IFwiICsgb2Zmc2V0VmFsO1xuICB0ZXh0LnN0eWxlLmZvbnRTaXplID0gJzEycHgnO1xuICB0ZXh0LnN0eWxlLmZvbnRGYW1pbHkgPSAnbW9ub3NwYWNlJztcbiAgdGV4dC5zdHlsZS5jb2xvciA9ICdibGFjayc7XG4gIHRleHQuc3R5bGUubWFyZ2luID0gJzAnO1xuICB0ZXh0LnN0eWxlLnBhZGRpbmcgPSAnNnB4JztcbiAgZWwuYXBwZW5kQ2hpbGQodGV4dCk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xufVxuXG5mdW5jdGlvbiBzZXR1cChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgb2Zmc2V0VmFsID0gcmVmLm9mZnNldFZhbDtcbiAgdmFyIHN0ZXBFbCA9IHJlZi5zdGVwRWw7XG5cbiAgdmFyIHN0ZXBDbGFzcyA9IHN0ZXBFbFswXS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gIHN0ZXBFbC5mb3JFYWNoKGZ1bmN0aW9uIChzLCBpKSB7IHJldHVybiBzZXR1cFN0ZXAoeyBpZDogaWQsIGk6IGkgfSk7IH0pO1xuICBzZXR1cE9mZnNldCh7IGlkOiBpZCwgb2Zmc2V0VmFsOiBvZmZzZXRWYWwsIHN0ZXBDbGFzczogc3RlcENsYXNzIH0pO1xufVxuXG4vLyBVUERBVEVcbmZ1bmN0aW9uIHVwZGF0ZU9mZnNldChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgb2Zmc2V0TWFyZ2luID0gcmVmLm9mZnNldE1hcmdpbjtcbiAgdmFyIG9mZnNldFZhbCA9IHJlZi5vZmZzZXRWYWw7XG5cbiAgdmFyIGlkVmFsID0gZ2V0T2Zmc2V0SWQoeyBpZDogaWQgfSk7XG4gIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoKFwiI1wiICsgaWRWYWwpKTtcbiAgZWwuc3R5bGUudG9wID0gb2Zmc2V0TWFyZ2luICsgXCJweFwiO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTdGVwKHJlZikge1xuICB2YXIgaWQgPSByZWYuaWQ7XG4gIHZhciBoID0gcmVmLmg7XG4gIHZhciBpID0gcmVmLmk7XG4gIHZhciBvZmZzZXRNYXJnaW4gPSByZWYub2Zmc2V0TWFyZ2luO1xuXG4gIHZhciBpZFZhbCA9IGdldFN0ZXBJZCh7IGlkOiBpZCwgaTogaSB9KTtcbiAgdmFyIGVsQSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoKFwiI1wiICsgaWRWYWwgKyBcIl9hYm92ZVwiKSk7XG4gIGVsQS5zdHlsZS5oZWlnaHQgPSBoICsgXCJweFwiO1xuICBlbEEuc3R5bGUudG9wID0gKG9mZnNldE1hcmdpbiAtIGgpICsgXCJweFwiO1xuXG4gIHZhciBlbEIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKChcIiNcIiArIGlkVmFsICsgXCJfYmVsb3dcIikpO1xuICBlbEIuc3R5bGUuaGVpZ2h0ID0gaCArIFwicHhcIjtcbiAgZWxCLnN0eWxlLnRvcCA9IG9mZnNldE1hcmdpbiArIFwicHhcIjtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKHJlZikge1xuICB2YXIgaWQgPSByZWYuaWQ7XG4gIHZhciBzdGVwT2Zmc2V0SGVpZ2h0ID0gcmVmLnN0ZXBPZmZzZXRIZWlnaHQ7XG4gIHZhciBvZmZzZXRNYXJnaW4gPSByZWYub2Zmc2V0TWFyZ2luO1xuICB2YXIgb2Zmc2V0VmFsID0gcmVmLm9mZnNldFZhbDtcblxuICBzdGVwT2Zmc2V0SGVpZ2h0LmZvckVhY2goZnVuY3Rpb24gKGgsIGkpIHsgcmV0dXJuIHVwZGF0ZVN0ZXAoeyBpZDogaWQsIGg6IGgsIGk6IGksIG9mZnNldE1hcmdpbjogb2Zmc2V0TWFyZ2luIH0pOyB9KTtcbiAgdXBkYXRlT2Zmc2V0KHsgaWQ6IGlkLCBvZmZzZXRNYXJnaW46IG9mZnNldE1hcmdpbiB9KTtcbn1cblxuZnVuY3Rpb24gbm90aWZ5U3RlcChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgaW5kZXggPSByZWYuaW5kZXg7XG4gIHZhciBzdGF0ZSA9IHJlZi5zdGF0ZTtcblxuICB2YXIgaWRWYWwgPSBnZXRTdGVwSWQoeyBpZDogaWQsIGk6IGluZGV4IH0pO1xuICB2YXIgZWxBID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigoXCIjXCIgKyBpZFZhbCArIFwiX2Fib3ZlXCIpKTtcbiAgdmFyIGVsQiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoKFwiI1wiICsgaWRWYWwgKyBcIl9iZWxvd1wiKSk7XG4gIHZhciBkaXNwbGF5ID0gc3RhdGUgPT09ICdlbnRlcicgPyAnYmxvY2snIDogJ25vbmUnO1xuXG4gIGlmIChlbEEpIHsgZWxBLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5OyB9XG4gIGlmIChlbEIpIHsgZWxCLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5OyB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbGFtYSgpIHtcbiAgdmFyIFpFUk9fTU9FID0gMTsgLy8gemVybyB3aXRoIHNvbWUgcm91bmRpbmcgbWFyZ2luIG9mIGVycm9yXG4gIHZhciBjYWxsYmFjayA9IHt9O1xuICB2YXIgaW8gPSB7fTtcblxuICB2YXIgY29udGFpbmVyRWwgPSBudWxsO1xuICB2YXIgZ3JhcGhpY0VsID0gbnVsbDtcbiAgdmFyIHN0ZXBFbCA9IG51bGw7XG5cbiAgdmFyIGlkID0gbnVsbDtcbiAgdmFyIG9mZnNldFZhbCA9IDA7XG4gIHZhciBvZmZzZXRNYXJnaW4gPSAwO1xuICB2YXIgdmggPSAwO1xuICB2YXIgcGggPSAwO1xuICB2YXIgc3RlcE9mZnNldEhlaWdodCA9IG51bGw7XG4gIHZhciBzdGVwT2Zmc2V0VG9wID0gbnVsbDtcbiAgdmFyIGJib3hHcmFwaGljID0gbnVsbDtcblxuICB2YXIgaXNSZWFkeSA9IGZhbHNlO1xuICB2YXIgaXNFbmFibGVkID0gZmFsc2U7XG4gIHZhciBkZWJ1Z01vZGUgPSBmYWxzZTtcbiAgdmFyIHByb2dyZXNzTW9kZSA9IGZhbHNlO1xuICB2YXIgcHJvZ3Jlc3NUaHJlc2hvbGQgPSAwO1xuICB2YXIgcHJlc2VydmVPcmRlciA9IGZhbHNlO1xuICB2YXIgdHJpZ2dlck9uY2UgPSBmYWxzZTtcblxuICB2YXIgc3RlcFN0YXRlcyA9IG51bGw7XG4gIHZhciBjb250YWluZXJTdGF0ZSA9IG51bGw7XG4gIHZhciBwcmV2aW91c1lPZmZzZXQgPSAtMTtcbiAgdmFyIGRpcmVjdGlvbiA9IG51bGw7XG5cbiAgdmFyIGV4Y2x1ZGUgPSBbXTtcblxuICAvLyBIRUxQRVJTXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSWQoKSB7XG4gICAgdmFyIGEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dic7XG4gICAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgICB2YXIgdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHZhciByID0gWzAsIDAsIDBdLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gYVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsKV07IH0pLmpvaW4oJycpO1xuICAgIHJldHVybiAoXCJcIiArIHIgKyB0KTtcbiAgfVxuXG4gIC8vd3d3LmdvbWFrZXRoaW5ncy5jb20vaG93LXRvLWdldC1hbi1lbGVtZW50cy1kaXN0YW5jZS1mcm9tLXRoZS10b3Atb2YtdGhlLXBhZ2Utd2l0aC12YW5pbGxhLWphdmFzY3JpcHQvXG4gIGZ1bmN0aW9uIGdldE9mZnNldFRvcChlbCkge1xuICAgIC8vIFNldCBvdXIgZGlzdGFuY2UgcGxhY2Vob2xkZXJcbiAgICB2YXIgZGlzdGFuY2UgPSAwO1xuXG4gICAgLy8gTG9vcCB1cCB0aGUgRE9NXG4gICAgaWYgKGVsLm9mZnNldFBhcmVudCkge1xuICAgICAgZG8ge1xuICAgICAgICBkaXN0YW5jZSArPSBlbC5vZmZzZXRUb3A7XG4gICAgICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICAgICAgfSB3aGlsZSAoZWwpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBvdXIgZGlzdGFuY2VcbiAgICByZXR1cm4gZGlzdGFuY2UgPCAwID8gMCA6IGRpc3RhbmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGFnZUhlaWdodCgpIHtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICByZXR1cm4gTWF0aC5tYXgoXG4gICAgICBib2R5LnNjcm9sbEhlaWdodCxcbiAgICAgIGJvZHkub2Zmc2V0SGVpZ2h0LFxuICAgICAgaHRtbC5jbGllbnRIZWlnaHQsXG4gICAgICBodG1sLnNjcm9sbEhlaWdodCxcbiAgICAgIGh0bWwub2Zmc2V0SGVpZ2h0XG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEluZGV4KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gK2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbGFtYS1pbmRleCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRGlyZWN0aW9uKCkge1xuICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiBwcmV2aW91c1lPZmZzZXQpIHsgZGlyZWN0aW9uID0gJ2Rvd24nOyB9XG4gICAgZWxzZSBpZiAod2luZG93LnBhZ2VZT2Zmc2V0IDwgcHJldmlvdXNZT2Zmc2V0KSB7IGRpcmVjdGlvbiA9ICd1cCc7IH1cbiAgICBwcmV2aW91c1lPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVSZXNpemUoKSB7XG4gICAgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcGggPSBnZXRQYWdlSGVpZ2h0KCk7XG5cbiAgICBiYm94R3JhcGhpYyA9IGdyYXBoaWNFbCA/IGdyYXBoaWNFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IG51bGw7XG5cbiAgICBvZmZzZXRNYXJnaW4gPSBvZmZzZXRWYWwgKiB2aDtcblxuICAgIHN0ZXBPZmZzZXRIZWlnaHQgPSBzdGVwRWwgPyBzdGVwRWwubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwub2Zmc2V0SGVpZ2h0OyB9KSA6IFtdO1xuXG4gICAgc3RlcE9mZnNldFRvcCA9IHN0ZXBFbCA/IHN0ZXBFbC5tYXAoZ2V0T2Zmc2V0VG9wKSA6IFtdO1xuXG4gICAgaWYgKGlzRW5hYmxlZCAmJiBpc1JlYWR5KSB7IHVwZGF0ZUlPKCk7IH1cblxuICAgIGlmIChkZWJ1Z01vZGUpXG4gICAgICB7IHVwZGF0ZSh7IGlkOiBpZCwgc3RlcE9mZnNldEhlaWdodDogc3RlcE9mZnNldEhlaWdodCwgb2Zmc2V0TWFyZ2luOiBvZmZzZXRNYXJnaW4sIG9mZnNldFZhbDogb2Zmc2V0VmFsIH0pOyB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVFbmFibGUoZW5hYmxlKSB7XG4gICAgaWYgKGVuYWJsZSAmJiAhaXNFbmFibGVkKSB7XG4gICAgICBpZiAoaXNSZWFkeSkgeyB1cGRhdGVJTygpOyB9XG4gICAgICBpc0VuYWJsZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIWVuYWJsZSkge1xuICAgICAgaWYgKGlvLnRvcCkgeyBpby50b3AuZGlzY29ubmVjdCgpOyB9XG4gICAgICBpZiAoaW8uYm90dG9tKSB7IGlvLmJvdHRvbS5kaXNjb25uZWN0KCk7IH1cbiAgICAgIGlmIChpby5zdGVwQWJvdmUpIHsgaW8uc3RlcEFib3ZlLmZvckVhY2goZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGlzY29ubmVjdCgpOyB9KTsgfVxuICAgICAgaWYgKGlvLnN0ZXBCZWxvdykgeyBpby5zdGVwQmVsb3cuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kaXNjb25uZWN0KCk7IH0pOyB9XG4gICAgICBpZiAoaW8uc3RlcFByb2dyZXNzKSB7IGlvLnN0ZXBQcm9ncmVzcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRpc2Nvbm5lY3QoKTsgfSk7IH1cbiAgICAgIGlmIChpby52aWV3cG9ydEFib3ZlKSB7IGlvLnZpZXdwb3J0QWJvdmUuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kaXNjb25uZWN0KCk7IH0pOyB9XG4gICAgICBpZiAoaW8udmlld3BvcnRCZWxvdykgeyBpby52aWV3cG9ydEJlbG93LmZvckVhY2goZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGlzY29ubmVjdCgpOyB9KTsgfVxuICAgICAgaXNFbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGhyZXNob2xkKGhlaWdodCkge1xuICAgIHZhciBjb3VudCA9IE1hdGguY2VpbChoZWlnaHQgLyBwcm9ncmVzc1RocmVzaG9sZCk7XG4gICAgdmFyIHQgPSBbXTtcbiAgICB2YXIgcmF0aW8gPSAxIC8gY291bnQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB0LnB1c2goaSAqIHJhdGlvKTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH1cblxuICAvLyBOT1RJRlkgQ0FMTEJBQ0tTXG4gIGZ1bmN0aW9uIG5vdGlmeU90aGVycyhpbmRleCwgbG9jYXRpb24pIHtcbiAgICBpZiAobG9jYXRpb24gPT09ICdhYm92ZScpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHN0ZXBzIGFib3ZlL2JlbG93IHdlcmUgc2tpcHBlZCBhbmQgc2hvdWxkIGJlIG5vdGlmaWVkIGZpcnN0XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluZGV4OyBpKyspIHtcbiAgICAgICAgdmFyIHNzID0gc3RlcFN0YXRlc1tpXTtcbiAgICAgICAgaWYgKHNzLnN0YXRlID09PSAnZW50ZXInKSB7IG5vdGlmeVN0ZXBFeGl0KHN0ZXBFbFtpXSwgJ2Rvd24nKTsgfVxuICAgICAgICBpZiAoc3MuZGlyZWN0aW9uID09PSAndXAnKSB7XG4gICAgICAgICAgbm90aWZ5U3RlcEVudGVyKHN0ZXBFbFtpXSwgJ2Rvd24nLCBmYWxzZSk7XG4gICAgICAgICAgbm90aWZ5U3RlcEV4aXQoc3RlcEVsW2ldLCAnZG93bicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbiA9PT0gJ2JlbG93Jykge1xuICAgICAgZm9yICh2YXIgaSQxID0gc3RlcFN0YXRlcy5sZW5ndGggLSAxOyBpJDEgPiBpbmRleDsgaSQxLS0pIHtcbiAgICAgICAgdmFyIHNzJDEgPSBzdGVwU3RhdGVzW2kkMV07XG4gICAgICAgIGlmIChzcyQxLnN0YXRlID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgbm90aWZ5U3RlcEV4aXQoc3RlcEVsW2kkMV0sICd1cCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcyQxLmRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgbm90aWZ5U3RlcEVudGVyKHN0ZXBFbFtpJDFdLCAndXAnLCBmYWxzZSk7XG4gICAgICAgICAgbm90aWZ5U3RlcEV4aXQoc3RlcEVsW2kkMV0sICd1cCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5U3RlcEVudGVyKGVsZW1lbnQsIGNoZWNrKSB7XG4gICAgaWYgKCBjaGVjayA9PT0gdm9pZCAwICkgY2hlY2sgPSB0cnVlO1xuXG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgoZWxlbWVudCk7XG4gICAgdmFyIHJlc3AgPSB7IGVsZW1lbnQ6IGVsZW1lbnQsIGluZGV4OiBpbmRleCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfTtcblxuICAgIC8vIHN0b3JlIG1vc3QgcmVjZW50IHRyaWdnZXJcbiAgICBzdGVwU3RhdGVzW2luZGV4XS5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgc3RlcFN0YXRlc1tpbmRleF0uc3RhdGUgPSAnZW50ZXInO1xuXG4gICAgaWYgKHByZXNlcnZlT3JkZXIgJiYgY2hlY2sgJiYgZGlyZWN0aW9uID09PSAnZG93bicpXG4gICAgICB7IG5vdGlmeU90aGVycyhpbmRleCwgJ2Fib3ZlJyk7IH1cblxuICAgIGlmIChwcmVzZXJ2ZU9yZGVyICYmIGNoZWNrICYmIGRpcmVjdGlvbiA9PT0gJ3VwJylcbiAgICAgIHsgbm90aWZ5T3RoZXJzKGluZGV4LCAnYmVsb3cnKTsgfVxuXG4gICAgaWYgKFxuICAgICAgY2FsbGJhY2suc3RlcEVudGVyICYmXG4gICAgICB0eXBlb2YgY2FsbGJhY2suc3RlcEVudGVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAhZXhjbHVkZVtpbmRleF1cbiAgICApIHtcbiAgICAgIGNhbGxiYWNrLnN0ZXBFbnRlcihyZXNwLCBzdGVwU3RhdGVzKTtcbiAgICAgIGlmIChkZWJ1Z01vZGUpIHsgbm90aWZ5U3RlcCh7IGlkOiBpZCwgaW5kZXg6IGluZGV4LCBzdGF0ZTogJ2VudGVyJyB9KTsgfVxuICAgICAgaWYgKHRyaWdnZXJPbmNlKSB7IGV4Y2x1ZGVbaW5kZXhdID0gdHJ1ZTsgfVxuICAgIH1cblxuICAgIGlmIChwcm9ncmVzc01vZGUpIHtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykgeyBub3RpZnlTdGVwUHJvZ3Jlc3MoZWxlbWVudCwgMCk7IH1cbiAgICAgIGVsc2UgeyBub3RpZnlTdGVwUHJvZ3Jlc3MoZWxlbWVudCwgMSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlTdGVwRXhpdChlbGVtZW50KSB7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgoZWxlbWVudCk7XG4gICAgdmFyIHJlc3AgPSB7IGVsZW1lbnQ6IGVsZW1lbnQsIGluZGV4OiBpbmRleCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfTtcblxuICAgIC8vIHN0b3JlIG1vc3QgcmVjZW50IHRyaWdnZXJcbiAgICBzdGVwU3RhdGVzW2luZGV4XS5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgc3RlcFN0YXRlc1tpbmRleF0uc3RhdGUgPSAnZXhpdCc7XG5cbiAgICBpZiAocHJvZ3Jlc3NNb2RlKSB7XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAnZG93bicpIHsgbm90aWZ5U3RlcFByb2dyZXNzKGVsZW1lbnQsIDEpOyB9XG4gICAgICBlbHNlIHsgbm90aWZ5U3RlcFByb2dyZXNzKGVsZW1lbnQsIDApOyB9XG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrLnN0ZXBFeGl0ICYmIHR5cGVvZiBjYWxsYmFjay5zdGVwRXhpdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2suc3RlcEV4aXQocmVzcCwgc3RlcFN0YXRlcyk7XG4gICAgICBpZiAoZGVidWdNb2RlKSB7IG5vdGlmeVN0ZXAoeyBpZDogaWQsIGluZGV4OiBpbmRleCwgc3RhdGU6ICdleGl0JyB9KTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeVN0ZXBQcm9ncmVzcyhlbGVtZW50LCBwcm9ncmVzcykge1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4KGVsZW1lbnQpO1xuICAgIHZhciByZXNwID0geyBlbGVtZW50OiBlbGVtZW50LCBpbmRleDogaW5kZXgsIHByb2dyZXNzOiBwcm9ncmVzcyB9O1xuICAgIGlmIChjYWxsYmFjay5zdGVwUHJvZ3Jlc3MgJiYgdHlwZW9mIGNhbGxiYWNrLnN0ZXBQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHsgY2FsbGJhY2suc3RlcFByb2dyZXNzKHJlc3ApOyB9XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlDb250YWluZXJFbnRlcigpIHtcbiAgICB2YXIgcmVzcCA9IHsgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfTtcbiAgICBjb250YWluZXJTdGF0ZS5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgY29udGFpbmVyU3RhdGUuc3RhdGUgPSAnZW50ZXInO1xuICAgIGlmIChcbiAgICAgIGNhbGxiYWNrLmNvbnRhaW5lckVudGVyICYmXG4gICAgICB0eXBlb2YgY2FsbGJhY2suY29udGFpbmVyRW50ZXIgPT09ICdmdW5jdGlvbidcbiAgICApXG4gICAgICB7IGNhbGxiYWNrLmNvbnRhaW5lckVudGVyKHJlc3ApOyB9XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlDb250YWluZXJFeGl0KCkge1xuICAgIHZhciByZXNwID0geyBkaXJlY3Rpb246IGRpcmVjdGlvbiB9O1xuICAgIGNvbnRhaW5lclN0YXRlLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICBjb250YWluZXJTdGF0ZS5zdGF0ZSA9ICdleGl0JztcbiAgICBpZiAoY2FsbGJhY2suY29udGFpbmVyRXhpdCAmJiB0eXBlb2YgY2FsbGJhY2suY29udGFpbmVyRXhpdCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHsgY2FsbGJhY2suY29udGFpbmVyRXhpdChyZXNwKTsgfVxuICB9XG5cbiAgLy8gT0JTRVJWRVIgLSBJTlRFUlNFQ1QgSEFORExJTkdcblxuICAvLyBpZiBUT1AgZWRnZSBvZiBzdGVwIGNyb3NzZXMgdGhyZXNob2xkLFxuICAvLyBib3R0b20gbXVzdCBiZSA+IDAgd2hpY2ggbWVhbnMgaXQgaXMgb24gXCJzY3JlZW5cIiAoc2hpZnRlZCBieSBvZmZzZXQpXG4gIGZ1bmN0aW9uIGludGVyc2VjdFN0ZXBBYm92ZShlbnRyaWVzKSB7XG4gICAgdXBkYXRlRGlyZWN0aW9uKCk7XG4gICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgdmFyIGlzSW50ZXJzZWN0aW5nID0gZW50cnkuaXNJbnRlcnNlY3Rpbmc7XG4gICAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gZW50cnkuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgdmFyIHRhcmdldCA9IGVudHJ5LnRhcmdldDtcblxuICAgICAgLy8gYm90dG9tIGlzIGhvdyBmYXIgYm90dG9tIGVkZ2Ugb2YgZWwgaXMgZnJvbSB0b3Agb2Ygdmlld3BvcnRcbiAgICAgIHZhciBib3R0b20gPSBib3VuZGluZ0NsaWVudFJlY3QuYm90dG9tO1xuICAgICAgdmFyIGhlaWdodCA9IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQ7XG4gICAgICB2YXIgYm90dG9tQWRqdXN0ZWQgPSBib3R0b20gLSBvZmZzZXRNYXJnaW47XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0YXJnZXQpO1xuICAgICAgdmFyIHNzID0gc3RlcFN0YXRlc1tpbmRleF07XG5cbiAgICAgIGlmIChib3R0b21BZGp1c3RlZCA+PSAtWkVST19NT0UpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJzZWN0aW5nICYmIGRpcmVjdGlvbiA9PT0gJ2Rvd24nICYmIHNzLnN0YXRlICE9PSAnZW50ZXInKVxuICAgICAgICAgIHsgbm90aWZ5U3RlcEVudGVyKHRhcmdldCwgZGlyZWN0aW9uKTsgfVxuICAgICAgICBlbHNlIGlmICghaXNJbnRlcnNlY3RpbmcgJiYgZGlyZWN0aW9uID09PSAndXAnICYmIHNzLnN0YXRlID09PSAnZW50ZXInKVxuICAgICAgICAgIHsgbm90aWZ5U3RlcEV4aXQodGFyZ2V0LCBkaXJlY3Rpb24pOyB9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICFpc0ludGVyc2VjdGluZyAmJlxuICAgICAgICAgIGJvdHRvbUFkanVzdGVkID49IGhlaWdodCAmJlxuICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ2Rvd24nICYmXG4gICAgICAgICAgc3Muc3RhdGUgPT09ICdlbnRlcidcbiAgICAgICAgKSB7XG4gICAgICAgICAgbm90aWZ5U3RlcEV4aXQodGFyZ2V0LCBkaXJlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RTdGVwQmVsb3coZW50cmllcykge1xuICAgIHVwZGF0ZURpcmVjdGlvbigpO1xuICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHZhciBpc0ludGVyc2VjdGluZyA9IGVudHJ5LmlzSW50ZXJzZWN0aW5nO1xuICAgICAgdmFyIGJvdW5kaW5nQ2xpZW50UmVjdCA9IGVudHJ5LmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICAgIHZhciB0YXJnZXQgPSBlbnRyeS50YXJnZXQ7XG5cbiAgICAgIHZhciBib3R0b20gPSBib3VuZGluZ0NsaWVudFJlY3QuYm90dG9tO1xuICAgICAgdmFyIGhlaWdodCA9IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQ7XG4gICAgICB2YXIgYm90dG9tQWRqdXN0ZWQgPSBib3R0b20gLSBvZmZzZXRNYXJnaW47XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0YXJnZXQpO1xuICAgICAgdmFyIHNzID0gc3RlcFN0YXRlc1tpbmRleF07XG5cbiAgICAgIGlmIChcbiAgICAgICAgYm90dG9tQWRqdXN0ZWQgPj0gLVpFUk9fTU9FICYmXG4gICAgICAgIGJvdHRvbUFkanVzdGVkIDwgaGVpZ2h0ICYmXG4gICAgICAgIGlzSW50ZXJzZWN0aW5nICYmXG4gICAgICAgIGRpcmVjdGlvbiA9PT0gJ3VwJyAmJlxuICAgICAgICBzcy5zdGF0ZSAhPT0gJ2VudGVyJ1xuICAgICAgKSB7XG4gICAgICAgIG5vdGlmeVN0ZXBFbnRlcih0YXJnZXQsIGRpcmVjdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBib3R0b21BZGp1c3RlZCA8PSBaRVJPX01PRSAmJlxuICAgICAgICAhaXNJbnRlcnNlY3RpbmcgJiZcbiAgICAgICAgZGlyZWN0aW9uID09PSAnZG93bicgJiZcbiAgICAgICAgc3Muc3RhdGUgPT09ICdlbnRlcidcbiAgICAgICkge1xuICAgICAgICBub3RpZnlTdGVwRXhpdCh0YXJnZXQsIGRpcmVjdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKlxuXHRpZiB0aGVyZSBpcyBhIHNjcm9sbCBldmVudCB3aGVyZSBhIHN0ZXAgbmV2ZXIgaW50ZXJzZWN0cyAodGhlcmVmb3JlXG5cdHNraXBwaW5nIGFuIGVudGVyL2V4aXQgdHJpZ2dlciksIHVzZSB0aGlzIGZhbGxiYWNrIHRvIGRldGVjdCBpZiBpdCBpc1xuXHRpbiB2aWV3XG5cdCovXG4gIGZ1bmN0aW9uIGludGVyc2VjdFZpZXdwb3J0QWJvdmUoZW50cmllcykge1xuICAgIHVwZGF0ZURpcmVjdGlvbigpO1xuICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHZhciBpc0ludGVyc2VjdGluZyA9IGVudHJ5LmlzSW50ZXJzZWN0aW5nO1xuICAgICAgdmFyIHRhcmdldCA9IGVudHJ5LnRhcmdldDtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KHRhcmdldCk7XG4gICAgICB2YXIgc3MgPSBzdGVwU3RhdGVzW2luZGV4XTtcbiAgICAgIGlmIChcbiAgICAgICAgaXNJbnRlcnNlY3RpbmcgJiZcbiAgICAgICAgZGlyZWN0aW9uID09PSAnZG93bicgJiZcbiAgICAgICAgc3Muc3RhdGUgIT09ICdlbnRlcicgJiZcbiAgICAgICAgc3MuZGlyZWN0aW9uICE9PSAnZG93bidcbiAgICAgICkge1xuICAgICAgICBub3RpZnlTdGVwRW50ZXIodGFyZ2V0LCAnZG93bicpO1xuICAgICAgICBub3RpZnlTdGVwRXhpdCh0YXJnZXQsICdkb3duJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RWaWV3cG9ydEJlbG93KGVudHJpZXMpIHtcbiAgICB1cGRhdGVEaXJlY3Rpb24oKTtcbiAgICBlbnRyaWVzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICB2YXIgaXNJbnRlcnNlY3RpbmcgPSBlbnRyeS5pc0ludGVyc2VjdGluZztcbiAgICAgIHZhciB0YXJnZXQgPSBlbnRyeS50YXJnZXQ7XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0YXJnZXQpO1xuICAgICAgdmFyIHNzID0gc3RlcFN0YXRlc1tpbmRleF07XG4gICAgICBpZiAoXG4gICAgICAgIGlzSW50ZXJzZWN0aW5nICYmXG4gICAgICAgIGRpcmVjdGlvbiA9PT0gJ3VwJyAmJlxuICAgICAgICBzcy5zdGF0ZSAhPT0gJ2VudGVyJyAmJlxuICAgICAgICBzcy5kaXJlY3Rpb24gIT09ICd1cCdcbiAgICAgICkge1xuICAgICAgICBub3RpZnlTdGVwRW50ZXIodGFyZ2V0LCAndXAnKTtcbiAgICAgICAgbm90aWZ5U3RlcEV4aXQodGFyZ2V0LCAndXAnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdFN0ZXBQcm9ncmVzcyhlbnRyaWVzKSB7XG4gICAgdXBkYXRlRGlyZWN0aW9uKCk7XG4gICAgZW50cmllcy5mb3JFYWNoKFxuICAgICAgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgaXNJbnRlcnNlY3RpbmcgPSByZWYuaXNJbnRlcnNlY3Rpbmc7XG4gICAgICAgIHZhciBpbnRlcnNlY3Rpb25SYXRpbyA9IHJlZi5pbnRlcnNlY3Rpb25SYXRpbztcbiAgICAgICAgdmFyIGJvdW5kaW5nQ2xpZW50UmVjdCA9IHJlZi5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgIHZhciBib3R0b20gPSBib3VuZGluZ0NsaWVudFJlY3QuYm90dG9tO1xuICAgICAgICB2YXIgYm90dG9tQWRqdXN0ZWQgPSBib3R0b20gLSBvZmZzZXRNYXJnaW47XG5cbiAgICAgICAgaWYgKGlzSW50ZXJzZWN0aW5nICYmIGJvdHRvbUFkanVzdGVkID49IC1aRVJPX01PRSkge1xuICAgICAgICAgIG5vdGlmeVN0ZXBQcm9ncmVzcyh0YXJnZXQsICtpbnRlcnNlY3Rpb25SYXRpby50b0ZpeGVkKDMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RUb3AoZW50cmllcykge1xuICAgIHVwZGF0ZURpcmVjdGlvbigpO1xuICAgIHZhciByZWYgPSBlbnRyaWVzWzBdO1xuICAgIHZhciBpc0ludGVyc2VjdGluZyA9IHJlZi5pc0ludGVyc2VjdGluZztcbiAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gcmVmLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICB2YXIgdG9wID0gYm91bmRpbmdDbGllbnRSZWN0LnRvcDtcbiAgICB2YXIgYm90dG9tID0gYm91bmRpbmdDbGllbnRSZWN0LmJvdHRvbTtcblxuICAgIGlmIChib3R0b20gPiAtWkVST19NT0UpIHtcbiAgICAgIGlmIChpc0ludGVyc2VjdGluZykgeyBub3RpZnlDb250YWluZXJFbnRlcihkaXJlY3Rpb24pOyB9XG4gICAgICBlbHNlIGlmIChjb250YWluZXJTdGF0ZS5zdGF0ZSA9PT0gJ2VudGVyJykgeyBub3RpZnlDb250YWluZXJFeGl0KGRpcmVjdGlvbik7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RCb3R0b20oZW50cmllcykge1xuICAgIHVwZGF0ZURpcmVjdGlvbigpO1xuICAgIHZhciByZWYgPSBlbnRyaWVzWzBdO1xuICAgIHZhciBpc0ludGVyc2VjdGluZyA9IHJlZi5pc0ludGVyc2VjdGluZztcbiAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gcmVmLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICB2YXIgdG9wID0gYm91bmRpbmdDbGllbnRSZWN0LnRvcDtcblxuICAgIGlmICh0b3AgPCBaRVJPX01PRSkge1xuICAgICAgaWYgKGlzSW50ZXJzZWN0aW5nKSB7IG5vdGlmeUNvbnRhaW5lckVudGVyKGRpcmVjdGlvbik7IH1cbiAgICAgIGVsc2UgaWYgKGNvbnRhaW5lclN0YXRlLnN0YXRlID09PSAnZW50ZXInKSB7IG5vdGlmeUNvbnRhaW5lckV4aXQoZGlyZWN0aW9uKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE9CU0VSVkVSIC0gQ1JFQVRJT05cblxuICBmdW5jdGlvbiB1cGRhdGVUb3BJTygpIHtcbiAgICBpZiAoaW8udG9wKSB7IGlvLnRvcC51bm9ic2VydmUoY29udGFpbmVyRWwpOyB9XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHJvb3Q6IG51bGwsXG4gICAgICByb290TWFyZ2luOiAodmggKyBcInB4IDBweCAtXCIgKyB2aCArIFwicHggMHB4XCIpLFxuICAgICAgdGhyZXNob2xkOiAwXG4gICAgfTtcblxuICAgIGlvLnRvcCA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihpbnRlcnNlY3RUb3AsIG9wdGlvbnMpO1xuICAgIGlvLnRvcC5vYnNlcnZlKGNvbnRhaW5lckVsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUJvdHRvbUlPKCkge1xuICAgIGlmIChpby5ib3R0b20pIHsgaW8uYm90dG9tLnVub2JzZXJ2ZShjb250YWluZXJFbCk7IH1cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHJvb3Q6IG51bGwsXG4gICAgICByb290TWFyZ2luOiAoXCItXCIgKyAoYmJveEdyYXBoaWMuaGVpZ2h0KSArIFwicHggMHB4IFwiICsgKGJib3hHcmFwaGljLmhlaWdodCkgKyBcInB4IDBweFwiKSxcbiAgICAgIHRocmVzaG9sZDogMFxuICAgIH07XG5cbiAgICBpby5ib3R0b20gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaW50ZXJzZWN0Qm90dG9tLCBvcHRpb25zKTtcbiAgICBpby5ib3R0b20ub2JzZXJ2ZShjb250YWluZXJFbCk7XG4gIH1cblxuICAvLyB0b3AgZWRnZVxuICBmdW5jdGlvbiB1cGRhdGVTdGVwQWJvdmVJTygpIHtcbiAgICBpZiAoaW8uc3RlcEFib3ZlKSB7IGlvLnN0ZXBBYm92ZS5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRpc2Nvbm5lY3QoKTsgfSk7IH1cblxuICAgIGlvLnN0ZXBBYm92ZSA9IHN0ZXBFbC5tYXAoZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICB2YXIgbWFyZ2luVG9wID0gc3RlcE9mZnNldEhlaWdodFtpXTtcbiAgICAgIHZhciBtYXJnaW5Cb3R0b20gPSAtdmggKyBvZmZzZXRNYXJnaW47XG4gICAgICB2YXIgcm9vdE1hcmdpbiA9IG1hcmdpblRvcCArIFwicHggMHB4IFwiICsgbWFyZ2luQm90dG9tICsgXCJweCAwcHhcIjtcblxuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHJvb3Q6IG51bGwsXG4gICAgICAgIHJvb3RNYXJnaW46IHJvb3RNYXJnaW4sXG4gICAgICAgIHRocmVzaG9sZDogMFxuICAgICAgfTtcblxuICAgICAgdmFyIG9icyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihpbnRlcnNlY3RTdGVwQWJvdmUsIG9wdGlvbnMpO1xuICAgICAgb2JzLm9ic2VydmUoZWwpO1xuICAgICAgcmV0dXJuIG9icztcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGJvdHRvbSBlZGdlXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0ZXBCZWxvd0lPKCkge1xuICAgIGlmIChpby5zdGVwQmVsb3cpIHsgaW8uc3RlcEJlbG93LmZvckVhY2goZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGlzY29ubmVjdCgpOyB9KTsgfVxuXG4gICAgaW8uc3RlcEJlbG93ID0gc3RlcEVsLm1hcChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgIHZhciBtYXJnaW5Ub3AgPSAtb2Zmc2V0TWFyZ2luO1xuICAgICAgdmFyIG1hcmdpbkJvdHRvbSA9IHBoIC0gdmggKyBzdGVwT2Zmc2V0SGVpZ2h0W2ldICsgb2Zmc2V0TWFyZ2luO1xuICAgICAgdmFyIHJvb3RNYXJnaW4gPSBtYXJnaW5Ub3AgKyBcInB4IDBweCBcIiArIG1hcmdpbkJvdHRvbSArIFwicHggMHB4XCI7XG5cbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICByb290OiBudWxsLFxuICAgICAgICByb290TWFyZ2luOiByb290TWFyZ2luLFxuICAgICAgICB0aHJlc2hvbGQ6IDBcbiAgICAgIH07XG5cbiAgICAgIHZhciBvYnMgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaW50ZXJzZWN0U3RlcEJlbG93LCBvcHRpb25zKTtcbiAgICAgIG9icy5vYnNlcnZlKGVsKTtcbiAgICAgIHJldHVybiBvYnM7XG4gICAgfSk7XG4gIH1cblxuICAvLyBqdW1wIGludG8gdmlld3BvcnRcbiAgZnVuY3Rpb24gdXBkYXRlVmlld3BvcnRBYm92ZUlPKCkge1xuICAgIGlmIChpby52aWV3cG9ydEFib3ZlKSB7IGlvLnZpZXdwb3J0QWJvdmUuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kaXNjb25uZWN0KCk7IH0pOyB9XG4gICAgaW8udmlld3BvcnRBYm92ZSA9IHN0ZXBFbC5tYXAoZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICB2YXIgbWFyZ2luVG9wID0gc3RlcE9mZnNldFRvcFtpXTtcbiAgICAgIHZhciBtYXJnaW5Cb3R0b20gPSAtKHZoIC0gb2Zmc2V0TWFyZ2luICsgc3RlcE9mZnNldEhlaWdodFtpXSk7XG4gICAgICB2YXIgcm9vdE1hcmdpbiA9IG1hcmdpblRvcCArIFwicHggMHB4IFwiICsgbWFyZ2luQm90dG9tICsgXCJweCAwcHhcIjtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICByb290OiBudWxsLFxuICAgICAgICByb290TWFyZ2luOiByb290TWFyZ2luLFxuICAgICAgICB0aHJlc2hvbGQ6IDBcbiAgICAgIH07XG5cbiAgICAgIHZhciBvYnMgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaW50ZXJzZWN0Vmlld3BvcnRBYm92ZSwgb3B0aW9ucyk7XG4gICAgICBvYnMub2JzZXJ2ZShlbCk7XG4gICAgICByZXR1cm4gb2JzO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmlld3BvcnRCZWxvd0lPKCkge1xuICAgIGlmIChpby52aWV3cG9ydEJlbG93KSB7IGlvLnZpZXdwb3J0QmVsb3cuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kaXNjb25uZWN0KCk7IH0pOyB9XG4gICAgaW8udmlld3BvcnRCZWxvdyA9IHN0ZXBFbC5tYXAoZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICB2YXIgbWFyZ2luVG9wID0gLShvZmZzZXRNYXJnaW4gKyBzdGVwT2Zmc2V0SGVpZ2h0W2ldKTtcbiAgICAgIHZhciBtYXJnaW5Cb3R0b20gPVxuICAgICAgICBwaCAtIHN0ZXBPZmZzZXRUb3BbaV0gLSBzdGVwT2Zmc2V0SGVpZ2h0W2ldIC0gb2Zmc2V0TWFyZ2luO1xuICAgICAgdmFyIHJvb3RNYXJnaW4gPSBtYXJnaW5Ub3AgKyBcInB4IDBweCBcIiArIG1hcmdpbkJvdHRvbSArIFwicHggMHB4XCI7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgcm9vdDogbnVsbCxcbiAgICAgICAgcm9vdE1hcmdpbjogcm9vdE1hcmdpbixcbiAgICAgICAgdGhyZXNob2xkOiAwXG4gICAgICB9O1xuXG4gICAgICB2YXIgb2JzID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGludGVyc2VjdFZpZXdwb3J0QmVsb3csIG9wdGlvbnMpO1xuICAgICAgb2JzLm9ic2VydmUoZWwpO1xuICAgICAgcmV0dXJuIG9icztcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHByb2dyZXNzIHByb2dyZXNzIHRyYWNrZXJcbiAgZnVuY3Rpb24gdXBkYXRlU3RlcFByb2dyZXNzSU8oKSB7XG4gICAgaWYgKGlvLnN0ZXBQcm9ncmVzcykgeyBpby5zdGVwUHJvZ3Jlc3MuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kaXNjb25uZWN0KCk7IH0pOyB9XG5cbiAgICBpby5zdGVwUHJvZ3Jlc3MgPSBzdGVwRWwubWFwKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgdmFyIG1hcmdpblRvcCA9IHN0ZXBPZmZzZXRIZWlnaHRbaV0gLSBvZmZzZXRNYXJnaW47XG4gICAgICB2YXIgbWFyZ2luQm90dG9tID0gLXZoICsgb2Zmc2V0TWFyZ2luO1xuICAgICAgdmFyIHJvb3RNYXJnaW4gPSBtYXJnaW5Ub3AgKyBcInB4IDBweCBcIiArIG1hcmdpbkJvdHRvbSArIFwicHggMHB4XCI7XG5cbiAgICAgIHZhciB0aHJlc2hvbGQgPSBjcmVhdGVUaHJlc2hvbGQoc3RlcE9mZnNldEhlaWdodFtpXSk7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgcm9vdDogbnVsbCxcbiAgICAgICAgcm9vdE1hcmdpbjogcm9vdE1hcmdpbixcbiAgICAgICAgdGhyZXNob2xkOiB0aHJlc2hvbGRcbiAgICAgIH07XG5cbiAgICAgIHZhciBvYnMgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaW50ZXJzZWN0U3RlcFByb2dyZXNzLCBvcHRpb25zKTtcbiAgICAgIG9icy5vYnNlcnZlKGVsKTtcbiAgICAgIHJldHVybiBvYnM7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVJTygpIHtcbiAgICB1cGRhdGVWaWV3cG9ydEFib3ZlSU8oKTtcbiAgICB1cGRhdGVWaWV3cG9ydEJlbG93SU8oKTtcbiAgICB1cGRhdGVTdGVwQWJvdmVJTygpO1xuICAgIHVwZGF0ZVN0ZXBCZWxvd0lPKCk7XG5cbiAgICBpZiAocHJvZ3Jlc3NNb2RlKSB7IHVwZGF0ZVN0ZXBQcm9ncmVzc0lPKCk7IH1cblxuICAgIGlmIChjb250YWluZXJFbCAmJiBncmFwaGljRWwpIHtcbiAgICAgIHVwZGF0ZVRvcElPKCk7XG4gICAgICB1cGRhdGVCb3R0b21JTygpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNFVFVQIEZVTkNUSU9OU1xuXG4gIGZ1bmN0aW9uIGluZGV4U3RlcHMoKSB7XG4gICAgc3RlcEVsLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpKSB7IHJldHVybiBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsYW1hLWluZGV4JywgaSk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0dXBTdGF0ZXMoKSB7XG4gICAgc3RlcFN0YXRlcyA9IHN0ZXBFbC5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICAgIGRpcmVjdGlvbjogbnVsbCxcbiAgICAgIHN0YXRlOiBudWxsXG4gICAgfSk7IH0pO1xuXG4gICAgY29udGFpbmVyU3RhdGUgPSB7IGRpcmVjdGlvbjogbnVsbCwgc3RhdGU6IG51bGwgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZERlYnVnKCkge1xuICAgIGlmIChkZWJ1Z01vZGUpIHsgc2V0dXAoeyBpZDogaWQsIHN0ZXBFbDogc3RlcEVsLCBvZmZzZXRWYWw6IG9mZnNldFZhbCB9KTsgfVxuICB9XG5cbiAgdmFyIFMgPSB7fTtcblxuICBTLnNldHVwID0gZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBjb250YWluZXIgPSByZWYuY29udGFpbmVyO1xuICAgIHZhciBncmFwaGljID0gcmVmLmdyYXBoaWM7XG4gICAgdmFyIHN0ZXAgPSByZWYuc3RlcDtcbiAgICB2YXIgb2Zmc2V0ID0gcmVmLm9mZnNldDsgaWYgKCBvZmZzZXQgPT09IHZvaWQgMCApIG9mZnNldCA9IDAuNTtcbiAgICB2YXIgcHJvZ3Jlc3MgPSByZWYucHJvZ3Jlc3M7IGlmICggcHJvZ3Jlc3MgPT09IHZvaWQgMCApIHByb2dyZXNzID0gZmFsc2U7XG4gICAgdmFyIHRocmVzaG9sZCA9IHJlZi50aHJlc2hvbGQ7IGlmICggdGhyZXNob2xkID09PSB2b2lkIDAgKSB0aHJlc2hvbGQgPSA0O1xuICAgIHZhciBkZWJ1ZyA9IHJlZi5kZWJ1ZzsgaWYgKCBkZWJ1ZyA9PT0gdm9pZCAwICkgZGVidWcgPSBmYWxzZTtcbiAgICB2YXIgb3JkZXIgPSByZWYub3JkZXI7IGlmICggb3JkZXIgPT09IHZvaWQgMCApIG9yZGVyID0gdHJ1ZTtcbiAgICB2YXIgb25jZSA9IHJlZi5vbmNlOyBpZiAoIG9uY2UgPT09IHZvaWQgMCApIG9uY2UgPSBmYWxzZTtcblxuICAgIGlkID0gZ2VuZXJhdGVJZCgpO1xuICAgIC8vIGVsZW1lbnRzXG4gICAgc3RlcEVsID0gc2VsZWN0QWxsKHN0ZXApO1xuICAgIGNvbnRhaW5lckVsID0gY29udGFpbmVyID8gc2VsZWN0KGNvbnRhaW5lcikgOiBudWxsO1xuICAgIGdyYXBoaWNFbCA9IGdyYXBoaWMgPyBzZWxlY3QoZ3JhcGhpYykgOiBudWxsO1xuXG4gICAgLy8gZXJyb3IgaWYgbm8gc3RlcCBzZWxlY3RlZFxuICAgIGlmICghc3RlcEVsLmxlbmd0aCkge1xuICAgICAgY29uc29sZS5lcnJvcignc2Nyb2xsYW1hIGVycm9yOiBubyBzdGVwIGVsZW1lbnRzJyk7XG4gICAgICByZXR1cm4gUztcbiAgICB9XG5cbiAgICAvLyBvcHRpb25zXG4gICAgZGVidWdNb2RlID0gZGVidWc7XG4gICAgcHJvZ3Jlc3NNb2RlID0gcHJvZ3Jlc3M7XG4gICAgcHJlc2VydmVPcmRlciA9IG9yZGVyO1xuICAgIHRyaWdnZXJPbmNlID0gb25jZTtcblxuICAgIFMub2Zmc2V0VHJpZ2dlcihvZmZzZXQpO1xuICAgIHByb2dyZXNzVGhyZXNob2xkID0gTWF0aC5tYXgoMSwgK3RocmVzaG9sZCk7XG5cbiAgICBpc1JlYWR5ID0gdHJ1ZTtcblxuICAgIC8vIGN1c3RvbWl6ZVxuICAgIGFkZERlYnVnKCk7XG4gICAgaW5kZXhTdGVwcygpO1xuICAgIHNldHVwU3RhdGVzKCk7XG4gICAgaGFuZGxlUmVzaXplKCk7XG4gICAgaGFuZGxlRW5hYmxlKHRydWUpO1xuICAgIHJldHVybiBTO1xuICB9O1xuXG4gIFMucmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGhhbmRsZVJlc2l6ZSgpO1xuICAgIHJldHVybiBTO1xuICB9O1xuXG4gIFMuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIGhhbmRsZUVuYWJsZSh0cnVlKTtcbiAgICByZXR1cm4gUztcbiAgfTtcblxuICBTLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGFuZGxlRW5hYmxlKGZhbHNlKTtcbiAgICByZXR1cm4gUztcbiAgfTtcblxuICBTLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGFuZGxlRW5hYmxlKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhjYWxsYmFjaykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gKGNhbGxiYWNrW2NdID0gbnVsbCk7IH0pO1xuICAgIE9iamVjdC5rZXlzKGlvKS5mb3JFYWNoKGZ1bmN0aW9uIChpKSB7IHJldHVybiAoaW9baV0gPSBudWxsKTsgfSk7XG4gIH07XG5cbiAgUy5vZmZzZXRUcmlnZ2VyID0gZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ICYmIHR5cGVvZiAhaXNOYU4oeCkpIHtcbiAgICAgIG9mZnNldFZhbCA9IE1hdGgubWluKE1hdGgubWF4KDAsIHgpLCAxKTtcbiAgICAgIHJldHVybiBTO1xuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0VmFsO1xuICB9O1xuXG4gIFMub25TdGVwRW50ZXIgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICBjYWxsYmFjay5zdGVwRW50ZXIgPSBjYjtcbiAgICByZXR1cm4gUztcbiAgfTtcblxuICBTLm9uU3RlcEV4aXQgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICBjYWxsYmFjay5zdGVwRXhpdCA9IGNiO1xuICAgIHJldHVybiBTO1xuICB9O1xuXG4gIFMub25TdGVwUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICBjYWxsYmFjay5zdGVwUHJvZ3Jlc3MgPSBjYjtcbiAgICByZXR1cm4gUztcbiAgfTtcblxuICBTLm9uQ29udGFpbmVyRW50ZXIgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICBjYWxsYmFjay5jb250YWluZXJFbnRlciA9IGNiO1xuICAgIHJldHVybiBTO1xuICB9O1xuXG4gIFMub25Db250YWluZXJFeGl0ID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgY2FsbGJhY2suY29udGFpbmVyRXhpdCA9IGNiO1xuICAgIHJldHVybiBTO1xuICB9O1xuXG4gIHJldHVybiBTO1xufVxuXG5yZXR1cm4gc2Nyb2xsYW1hO1xuXG59KSkpO1xuIiwiLy8gbWFrZSBhcnJheSBvZiBhbGwgaW1nIHRhZ3NcbmNvbnN0IGltYWdlU2V0ID0gQXJyYXkuZnJvbShkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkcmlmdEltZycpKTtcbi8vIGNoYXJ0IHNlbGVjdG9yIGZvciBibHVyICYgc2l6ZSBzZXR0aW5nXG5jb25zdCBjaGFydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGFydCcpO1xuXG5leHBvcnQgeyBpbWFnZVNldCwgY2hhcnQgfTsiLCJpbXBvcnQgRHJpZnQgZnJvbSAnZHJpZnQtem9vbSc7XG5pbXBvcnQgeyBpbWFnZVNldCwgY2hhcnQgfSBmcm9tICcuL2ltYWdlUGFuZSc7XG5cbmNvbnN0IHRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2Nyb2xsX190ZXh0Jyk7XG5cbi8vIGZucyBiZWxvdyBibHVyICYgdHJhbnNwYXJlbmN5IHRoZSB0ZXh0ICYgaW1nIG9uIHpvb21cblxuZnVuY3Rpb24gb25TaG93KCl7XG4gICAgLy8gY2hhcnQuc3R5bGUub3BhY2l0eSA9IC41O1xuXHRpbWFnZVNldC5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKXtcblx0XHRpbWFnZS5jbGFzc0xpc3QudG9nZ2xlKCdibHVycnknKTtcblx0Ly8gdGV4dC5jbGFzc0xpc3QudG9nZ2xlKCdibHVycnknKTtcblx0fSk7XG59O1xuXG5mdW5jdGlvbiBvbkhpZGUoKXtcbiAgICAvLyBjaGFydC5zdHlsZS5vcGFjaXR5ID0gMTtcblx0Ly8gY2hhcnQuY2xhc3NMaXN0LnRvZ2dsZSgnYmx1cnJ5Jyk7XG5cdGltYWdlU2V0LmZvckVhY2goZnVuY3Rpb24oaW1hZ2Upe1xuXHRcdGltYWdlLmNsYXNzTGlzdC50b2dnbGUoJ2JsdXJyeScpO1xuXHR9KVxuICAgIC8vIHRleHQuY2xhc3NMaXN0LnRvZ2dsZSgnYmx1cnJ5Jyk7XG59XG5cbnZhciBvcHRpb25zID0ge1xuXHQvLyBQcmVmaXggZm9yIGdlbmVyYXRlZCBlbGVtZW50IGNsYXNzIG5hbWVzIChlLmcuIGBteS1uc2Agd2lsbFxuXHQvLyByZXN1bHQgaW4gY2xhc3NlcyBzdWNoIGFzIGBteS1ucy1wYW5lYC4gRGVmYXVsdCBgZHJpZnQtYFxuXHQvLyBwcmVmaXhlZCBjbGFzc2VzIHdpbGwgYWx3YXlzIGJlIGFkZGVkIGFzIHdlbGwuXG5cdG5hbWVzcGFjZTogbnVsbCxcblx0Ly8gV2hldGhlciB0aGUgWm9vbVBhbmUgc2hvdWxkIHNob3cgd2hpdGVzcGFjZSB3aGVuIG5lYXIgdGhlIGVkZ2VzLlxuXHRzaG93V2hpdGVzcGFjZUF0RWRnZXM6IGZhbHNlLFxuXHQvLyBXaGV0aGVyIHRoZSBpbmxpbmUgWm9vbVBhbmUgc2hvdWxkIHN0YXkgaW5zaWRlXG5cdC8vIHRoZSBib3VuZHMgb2YgaXRzIGltYWdlLlxuXHRcblx0Y29udGFpbklubGluZTogZmFsc2UsXG5cdC8vIGNvbnRhaW5JbmxpbmU6IHRydWUsXG5cdFxuXHQvLyBIb3cgbXVjaCB0byBvZmZzZXQgdGhlIFpvb21QYW5lIGZyb20gdGhlXG5cdC8vIGludGVyYWN0aW9uIHBvaW50IHdoZW4gaW5saW5lLlxuXHRpbmxpbmVPZmZzZXRYOiAwLFxuXHRpbmxpbmVPZmZzZXRZOiAwLFxuXHQvLyBBIERPTSBlbGVtZW50IHRvIGFwcGVuZCB0aGUgaW5saW5lIFpvb21QYW5lIHRvLlxuXHRpbmxpbmVDb250YWluZXI6IGRvY3VtZW50LmJvZHksXG5cdC8vIFdoaWNoIHRyaWdnZXIgYXR0cmlidXRlIHRvIHB1bGwgdGhlIFpvb21QYW5lIGltYWdlIHNvdXJjZSBmcm9tLlxuXHRzb3VyY2VBdHRyaWJ1dGU6ICdzcmMnLFxuXHQvLyBIb3cgbXVjaCB0byBtYWduaWZ5IHRoZSB0cmlnZ2VyIGJ5IGluIHRoZSBab29tUGFuZS5cblx0Ly8gKGUuZy4sIGB6b29tRmFjdG9yOiAzYCB3aWxsIHJlc3VsdCBpbiBhIDkwMCBweCB3aWRlIFpvb21QYW5lIGltYWdlXG5cdC8vIGlmIHRoZSB0cmlnZ2VyIGlzIGRpc3BsYXllZCBhdCAzMDAgcHggd2lkZSlcblx0em9vbUZhY3RvcjogMyxcblx0Ly8gQSBET00gZWxlbWVudCB0byBhcHBlbmQgdGhlIG5vbi1pbmxpbmUgWm9vbVBhbmUgdG8uXG5cdC8vIFJlcXVpcmVkIGlmIGBpbmxpbmVQYW5lICE9PSB0cnVlYC5cblx0XG5cdC8vIHBhbmVDb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY3JvbGxfX2dyYXBoaWMnKSxcblx0cGFuZUNvbnRhaW5lcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYXJ0JyksXG5cdFxuXHQvLyBXaGVuIHRvIHN3aXRjaCB0byBhbiBpbmxpbmUgWm9vbVBhbmUuIFRoaXMgY2FuIGJlIGEgYm9vbGVhbiBvclxuXHQvLyBhbiBpbnRlZ2VyLiBJZiBgdHJ1ZWAsIHRoZSBab29tUGFuZSB3aWxsIGFsd2F5cyBiZSBpbmxpbmUsXG5cdC8vIGlmIGBmYWxzZWAsIGl0IHdpbGwgc3dpdGNoIHRvIGlubGluZSB3aGVuIGB3aW5kb3dXaWR0aCA8PSBpbmxpbmVQYW5lYFxuXG5cdC8vIGlubGluZVBhbmU6IHRydWUsXG5cdGlubGluZVBhbmU6IDM3NSxcblxuXHQvLyBJZiBgdHJ1ZWAsIHRvdWNoIGV2ZW50cyB3aWxsIHRyaWdnZXIgdGhlIHpvb20sIGxpa2UgbW91c2UgZXZlbnRzLlxuXHRoYW5kbGVUb3VjaDogdHJ1ZSxcblx0Ly8gSWYgcHJlc2VudCAoYW5kIGEgZnVuY3Rpb24pLCB0aGlzIHdpbGwgYmUgY2FsbGVkXG5cdC8vIHdoZW5ldmVyIHRoZSBab29tUGFuZSBpcyBzaG93bi5cblx0b25TaG93OiBvblNob3csXG5cdC8vIElmIHByZXNlbnQgKGFuZCBhIGZ1bmN0aW9uKSwgdGhpcyB3aWxsIGJlIGNhbGxlZFxuXHQvLyB3aGVuZXZlciB0aGUgWm9vbVBhbmUgaXMgaGlkZGVuLlxuXHRvbkhpZGU6IG9uSGlkZSxcblx0Ly8gQWRkIGJhc2Ugc3R5bGVzIHRvIHRoZSBwYWdlLiBTZWUgdGhlIFwiVGhlbWluZ1wiXG5cdC8vIHNlY3Rpb24gb2YgUkVBRE1FLm1kIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXHRpbmplY3RCYXNlU3R5bGVzOiB0cnVlLFxuXHQvLyBBbiBvcHRpb25hbCBudW1iZXIgdGhhdCBkZXRlcm1pbmVzIGhvdyBsb25nIHRvIHdhaXQgYmVmb3JlXG5cdC8vIHNob3dpbmcgdGhlIFpvb21QYW5lIGJlY2F1c2Ugb2YgYSBgbW91c2VlbnRlcmAgZXZlbnQuXG5cdGhvdmVyRGVsYXk6IDAsXG5cdC8vIEFuIG9wdGlvbmFsIG51bWJlciB0aGF0IGRldGVybWluZXMgaG93IGxvbmcgdG8gd2FpdCBiZWZvcmVcblx0Ly8gc2hvd2luZyB0aGUgWm9vbVBhbmUgYmVjYXVzZSBvZiBhIGB0b3VjaHN0YXJ0YCBldmVudC5cblx0Ly8gSXQncyB1bmxpa2VseSB0aGF0IHlvdSB3b3VsZCB3YW50IHRvIHVzZSB0aGlzIG9wdGlvbiwgc2luY2Vcblx0Ly8gXCJ0YXAgYW5kIGhvbGRcIiBpcyBtdWNoIG1vcmUgaW50ZW50aW9uYWwgdGhhbiBhIGhvdmVyIGV2ZW50LlxuXHR0b3VjaERlbGF5OiAwLFxuXHQvLyBJZiB0cnVlLCBhIGJvdW5kaW5nIGJveCB3aWxsIHNob3cgdGhlIGFyZWEgY3VycmVudGx5IGJlaW5nIHByZXZpZXdlZFxuXHQvLyBkdXJpbmcgbW91c2UgaG92ZXJcblx0aG92ZXJCb3VuZGluZ0JveDogZmFsc2UsXG5cdC8vIElmIHRydWUsIGEgYm91bmRpbmcgYm94IHdpbGwgc2hvdyB0aGUgYXJlYSBjdXJyZW50bHkgYmVpbmcgcHJldmlld2VkXG5cdC8vIGR1cmluZyB0b3VjaCBldmVudHNcblx0dG91Y2hCb3VuZGluZ0JveDogZmFsc2UsXG59O1xuXG4vLyBpdGVyYXRlIG92ZXIgaW1hZ2VTZXQgJiYgc2V0IHVwIGRyaWZ0Wm9vbSBvbiBhbGwuXG5cbmNvbnN0IGRyaWZ0U2V0ID0gW107XG5mb3IoIGxldCBpbWFnZSBvZiBpbWFnZVNldCApe1xuXHRsZXQgZHJpZnQgPSBuZXcgRHJpZnQoaW1hZ2UsIG9wdGlvbnMpO1xuXHRkcmlmdFNldC5wdXNoKGRyaWZ0KTtcbn1cblxuZXhwb3J0IHsgZHJpZnRTZXQgfTsiLCJpbXBvcnQgc2Nyb2xsYW1hIGZyb20gJ3Njcm9sbGFtYSc7XG5pbXBvcnQgeyBkcmlmdFNldCB9IGZyb20gJy4vZHJpZnRab29tJztcbmltcG9ydCB7IGltYWdlU2V0LCBjaGFydCB9IGZyb20gJy4vaW1hZ2VQYW5lJztcblxuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Njcm9sbCcpO1xuY29uc3QgZ3JhcGhpYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY3JvbGxfX2dyYXBoaWMnKTtcbmNvbnN0IHRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2Nyb2xsX190ZXh0Jyk7XG5jb25zdCBzdGVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnN0ZXAnKTtcblxuY29uc3Qgc2Nyb2xsZXIgPSBzY3JvbGxhbWEoKTtcblxuZnVuY3Rpb24gaGFuZGxlUmVzaXplKCkge1xuICAgIC8vIDEuIHVwZGF0ZSBoZWlnaHQgb2Ygc3RlcCBlbGVtcyBmb3Igcm9vbSBiZXR3ZWVuIHN0ZXBzXG5cbiAgICBjb25zdCBzdGVwSGVpZ2h0ID0gTWF0aC5mbG9vcih3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjc1KTtcbiAgICBzdGVwLmZvckVhY2goZnVuY3Rpb24oc2luZ2xlU3RlcCl7XG4gICAgICAgIHNpbmdsZVN0ZXAuc3R5bGUuaGVpZ2h0ID0gc3RlcEhlaWdodCArICdweCc7XG4gICAgfSk7XG5cbiAgICAvLyAyLiB1cGRhdGUgaGVpZ2h0IG9mIGdyYXBoaWMgZWxlbVxuXG4gICAgZ3JhcGhpYy5zdHlsZS5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgKyAncHgnO1xuXG4gICAgLy8gMy4gdXBkYXRlIHdpZHRoIG9mIGNoYXJ0IGJ5IHN1YnJ0YWN0aW5nIGZyb20gdGV4dCB3aWR0aFxuXG4gICAgY29uc3QgdGV4dFdpZHRoID0gdGV4dC5vZmZzZXRXaWR0aDtcbiAgICBjb25zdCBib2R5V2lkdGggPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuICAgIGNvbnN0IGNoYXJ0V2lkdGggPSBib2R5V2lkdGggLSB0ZXh0V2lkdGggLSAzMjtcbiAgICBcbiAgICAvLyBtYWtlIHRoZSBoZWlnaHQgb2YgMS8yIG9mIHZpZXdwb3J0XG4gICAgY29uc3QgY2hhcnRIZWlnaHQgPSBNYXRoLmZsb29yKHdpbmRvdy5pbm5lckhlaWdodCAqIC45NSk7XG5cbiAgICBjaGFydC5zdHlsZS53aWR0aCA9IGNoYXJ0V2lkdGggKyAncHgnO1xuICAgIGNoYXJ0LnN0eWxlLmhlaWdodCA9IGNoYXJ0SGVpZ2h0ICsgJ3B4JztcblxuICAgIC8vIHpvb20gZmFjdG9yIHJlY2FsY2VkIG9uIHJlc2l6ZS4gc21hbGxlciBzY3JlZW4gPiBsYXJnZXIgem9vbVxuICAgIGRyaWZ0U2V0LmZvckVhY2goZnVuY3Rpb24oZHJpZnQpe1xuICAgICAgICBkcmlmdC56b29tRmFjdG9yID0gMTAgKiAoIDQwMCAvIGJvZHlXaWR0aCApO1xuICAgIH0pO1xuXG4gICAgLy8gNC4gdGVsbCBzY3JvbGxhbWEgdG8gdXBkYXRlIG5ldyBlbGVtIGRtZW5zaW9uc1xuICAgIHNjcm9sbGVyLnJlc2l6ZSgpO1xuXG59XG5cbmZ1bmN0aW9uIGhhbmRsZVN0ZXBFbnRlcihyZXNwb25zZSkge1xuICAgIC8vIHJlc3BvbnNlID0geyBlbGVtZW50LCBkaXJlY3Rpb24sIGluZGV4IH1cblxuICAgIC8vIGZhZGUgaW4gY3VycmVudCBzdGVwXG5cbiAgICAvLyBzdGVwLmZvckVhY2goZnVuY3Rpb24oc2luZ2xlU3RlcCwgaWR4KXtcbiAgICAvLyAgICAgaWYoaWR4ID09PSByZXNwb25zZS5pbmRleCl7XG4gICAgLy8gICAgICAgICBzaW5nbGVTdGVwLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICAgIC8vICAgICB9O1xuICAgIC8vIH0pO1xuXG4gICAgc3RlcFtyZXNwb25zZS5pbmRleF0uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG5cbiAgICAvLyBjaGFuZ2UgaW1nIGRpc3BsYXllZCBiYXNlZCBvbiBhY3RpdmUgc3RlcFxuICAgIC8vIHRvZ2dsZSBpbWFnZSB2aXNpYmlsaXR5IGJhc2VkIG9uIGlkeFxuICAgIGltYWdlU2V0LmZvckVhY2goZnVuY3Rpb24oIGltYWdlLCBpZHgpe1xuICAgICAgICBpZiggaWR4ID09PSByZXNwb25zZS5pbmRleCApe1xuICAgICAgICAgICAgaW1hZ2UuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbWFnZS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVDb250YWluZXJFbnRlcihyZXNwb25zZSkge1xuICAgIC8vIHJlc3BvbnNlID0geyBkaXJlY3Rpb24gfVxuXG4gICAgLy8gc3RpY2t5IHRoZSBncmFwaGljXG4gICAgZ3JhcGhpYy5jbGFzc0xpc3QuYWRkKCdpcy1maXhlZCcpO1xuICAgIGdyYXBoaWMuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYm90dG9tJyk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNvbnRhaW5lckV4aXQocmVzcG9uc2UpIHtcbiAgICAvLyByZXNwb25zZSA9IHsgZGlyZWN0aW9uIH1cblxuICAgIC8vIHVuLXN0aWNreSB0aGUgZ3JhcGhpYywgYW5kIHBpbiB0byB0b3AvYm90dG9tIG9mIGNvbnRhaW5lclxuICAgIGdyYXBoaWMuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZml4ZWQnKTtcbiAgICBpZihyZXNwb25zZS5kaXJlY3Rpb24gPT09ICdkb3duJyl7XG4gICAgICAgIGdyYXBoaWMuY2xhc3NMaXN0LmFkZCgnaXMtYm90dG9tJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ3JhcGhpYy5jbGFzc0xpc3QucmVtb3ZlKCdpcy1ib3R0b20nKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluaXQoKXtcbiAgICAvLyBjYWxsIGEgcmVzaXplIG9uIGxvYWQgdG8gdXBkYXRlIHcvaC9wb3Mgb3IgZWxlbXNcbiAgICBoYW5kbGVSZXNpemUoKTtcblxuICAgIC8vIHNldCB1cCBzY3JvbGxhbWEgaW5zdGFuY2VcbiAgICAvLyBiaW5kIHNjcm9sbGFtYSBldmVudCBoYW5kbGVyc1xuICAgIHNjcm9sbGVyXG4gICAgICAgIC5zZXR1cCh7XG4gICAgICAgICAgICBjb250YWluZXI6ICcjc2Nyb2xsJywgLy8gb3V0ZXJtb3N0IGVsZW1lbnRcbiAgICAgICAgICAgIGdyYXBoaWM6ICcuc2Nyb2xsX19ncmFwaGljJywgLy8gdGhlIGdyYXBoaWNcbiAgICAgICAgICAgIHRleHQ6ICcuc2Nyb2xsX190ZXh0JywgLy8gdGhlIHN0ZXAgY29udGFpbmVyXG4gICAgICAgICAgICBzdGVwOiAnLnNjcm9sbF9fdGV4dCAuc3RlcCcsIC8vIHRoZSBzdGVwIGVsZW1zXG4gICAgICAgICAgICBvZmZzZXQ6IDAuNywgLy8gc2V0IHRyaWdnZXIgQCA1MCUgb2Ygc2NyZWVuXG4gICAgICAgICAgICAvLyBkZWJ1ZzogdHJ1ZSwgLy8gZGlzcGxheSB0aGUgdHJpZ2dlciBmb3IgdGVzdGluZ1xuICAgICAgICB9KVxuICAgICAgICAub25TdGVwRW50ZXIoaGFuZGxlU3RlcEVudGVyKVxuICAgICAgICAub25Db250YWluZXJFbnRlcihoYW5kbGVDb250YWluZXJFbnRlcilcbiAgICAgICAgLm9uQ29udGFpbmVyRXhpdChoYW5kbGVDb250YWluZXJFeGl0KTtcblxuICAgICAgICAvLyBzZXR1cCByZXNpemUgZXZlbnRcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSlcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBpbml0KTsiLCIvLyBvbiBsb2FkLCBzaG93IGJvZHkgdG8gcHJldmVudCBGT1VDXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKXtcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG59KTsiLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3JtYWxpemUuY3NzIHY4LjAuMCB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cXG5cXG4vKiBEb2N1bWVudFxcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxcbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxcbiAqL1xcblxcbmh0bWwge1xcbiAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xcbn1cXG5cXG4vKiBTZWN0aW9uc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXFxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cXG4gKi9cXG5cXG5oMSB7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIG1hcmdpbjogMC42N2VtIDA7XFxufVxcblxcbi8qIEdyb3VwaW5nIGNvbnRlbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXFxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXFxuICovXFxuXFxuaHIge1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDEgKi9cXG4gIGhlaWdodDogMDsgLyogMSAqL1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxucHJlIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cXG59XFxuXFxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cXG4gKi9cXG5cXG5hIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4vKipcXG4gKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gQ2hyb21lIDU3LVxcbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYWJiclt0aXRsZV0ge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IC8qIDIgKi9cXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmIsXFxuc3Ryb25nIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmNvZGUsXFxua2JkLFxcbnNhbXAge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXFxuICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5zbWFsbCB7XFxuICBmb250LXNpemU6IDgwJTtcXG59XFxuXFxuLyoqXFxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXFxuICogYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbnN1YixcXG5zdXAge1xcbiAgZm9udC1zaXplOiA3NSU7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuc3ViIHtcXG4gIGJvdHRvbTogLTAuMjVlbTtcXG59XFxuXFxuc3VwIHtcXG4gIHRvcDogLTAuNWVtO1xcbn1cXG5cXG4vKiBFbWJlZGRlZCBjb250ZW50XFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLlxcbiAqL1xcblxcbmltZyB7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxufVxcblxcbi8qIEZvcm1zXFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiAxLiBDaGFuZ2UgdGhlIGZvbnQgc3R5bGVzIGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYnV0dG9uLFxcbmlucHV0LFxcbm9wdGdyb3VwLFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXFxuICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xcbiAgbWFyZ2luOiAwOyAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxcbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXFxuICovXFxuXFxuYnV0dG9uLFxcbmlucHV0IHsgLyogMSAqL1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxcbiAqIDEuIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRmlyZWZveC5cXG4gKi9cXG5cXG5idXR0b24sXFxuc2VsZWN0IHsgLyogMSAqL1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYnV0dG9uLFxcblt0eXBlPVxcXCJidXR0b25cXFwiXSxcXG5bdHlwZT1cXFwicmVzZXRcXFwiXSxcXG5bdHlwZT1cXFwic3VibWl0XFxcIl0ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXFxuICovXFxuXFxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxcblt0eXBlPVxcXCJidXR0b25cXFwiXTo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwicmVzZXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwic3VibWl0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuLyoqXFxuICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxcbiAqL1xcblxcbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl06LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcInJlc2V0XFxcIl06LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdOi1tb3otZm9jdXNyaW5nIHtcXG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcXG59XFxuXFxuLyoqXFxuICogQ29ycmVjdCB0aGUgcGFkZGluZyBpbiBGaXJlZm94LlxcbiAqL1xcblxcbmZpZWxkc2V0IHtcXG4gIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTtcXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cXG4gKiAyLiBDb3JyZWN0IHRoZSBjb2xvciBpbmhlcml0YW5jZSBmcm9tIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gSUUuXFxuICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxcbiAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmxlZ2VuZCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXFxuICBjb2xvcjogaW5oZXJpdDsgLyogMiAqL1xcbiAgZGlzcGxheTogdGFibGU7IC8qIDEgKi9cXG4gIG1heC13aWR0aDogMTAwJTsgLyogMSAqL1xcbiAgcGFkZGluZzogMDsgLyogMyAqL1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDsgLyogMSAqL1xcbn1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxcbiAqL1xcblxcbnByb2dyZXNzIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSAxMCsuXFxuICovXFxuXFxudGV4dGFyZWEge1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxufVxcblxcbi8qKlxcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLlxcbiAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC5cXG4gKi9cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXSxcXG5bdHlwZT1cXFwicmFkaW9cXFwiXSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXFxuICBwYWRkaW5nOiAwOyAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cXG4gKi9cXG5cXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXFxuW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcXG4gIGhlaWdodDogYXV0bztcXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXFxuICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXFxuICovXFxuXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXFxuICBvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXFxuICovXFxuXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXFxuICovXFxuXFxuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xcbiAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xcbn1cXG5cXG4vKiBJbnRlcmFjdGl2ZVxcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLypcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSAxMCssIGFuZCBGaXJlZm94LlxcbiAqL1xcblxcbmRldGFpbHMge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi8qXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbnN1bW1hcnkge1xcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xcbn1cXG5cXG4vKiBNaXNjXFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMCsuXFxuICovXFxuXFxudGVtcGxhdGUge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTAuXFxuICovXFxuXFxuW2hpZGRlbl0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ub3JtYWxpemUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ub3JtYWxpemUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL25vcm1hbGl6ZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFczQyBTT0ZUV0FSRSBBTkQgRE9DVU1FTlQgTk9USUNFIEFORCBMSUNFTlNFLlxuICpcbiAqICBodHRwczovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDE1L2NvcHlyaWdodC1zb2Z0d2FyZS1hbmQtZG9jdW1lbnRcbiAqXG4gKi9cblxuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQpIHtcbid1c2Ugc3RyaWN0JztcblxuXG4vLyBFeGl0cyBlYXJseSBpZiBhbGwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgYW5kIEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlcbi8vIGZlYXR1cmVzIGFyZSBuYXRpdmVseSBzdXBwb3J0ZWQuXG5pZiAoJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgJiZcbiAgICAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeScgaW4gd2luZG93ICYmXG4gICAgJ2ludGVyc2VjdGlvblJhdGlvJyBpbiB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeS5wcm90b3R5cGUpIHtcblxuICAvLyBNaW5pbWFsIHBvbHlmaWxsIGZvciBFZGdlIDE1J3MgbGFjayBvZiBgaXNJbnRlcnNlY3RpbmdgXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3czYy9JbnRlcnNlY3Rpb25PYnNlcnZlci9pc3N1ZXMvMjExXG4gIGlmICghKCdpc0ludGVyc2VjdGluZycgaW4gd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkucHJvdG90eXBlKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeS5wcm90b3R5cGUsXG4gICAgICAnaXNJbnRlcnNlY3RpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0aW9uUmF0aW8gPiAwO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybjtcbn1cblxuXG4vKipcbiAqIEFuIEludGVyc2VjdGlvbk9ic2VydmVyIHJlZ2lzdHJ5LiBUaGlzIHJlZ2lzdHJ5IGV4aXN0cyB0byBob2xkIGEgc3Ryb25nXG4gKiByZWZlcmVuY2UgdG8gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaW5zdGFuY2VzIGN1cnJlbnRseSBvYnNlcnZlcmluZyBhIHRhcmdldFxuICogZWxlbWVudC4gV2l0aG91dCB0aGlzIHJlZ2lzdHJ5LCBpbnN0YW5jZXMgd2l0aG91dCBhbm90aGVyIHJlZmVyZW5jZSBtYXkgYmVcbiAqIGdhcmJhZ2UgY29sbGVjdGVkLlxuICovXG52YXIgcmVnaXN0cnkgPSBbXTtcblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGdsb2JhbCBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5IGNvbnN0cnVjdG9yLlxuICogaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ludGVyc2VjdGlvbk9ic2VydmVyLyNpbnRlcnNlY3Rpb24tb2JzZXJ2ZXItZW50cnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbnRyeSBBIGRpY3Rpb25hcnkgb2YgaW5zdGFuY2UgcHJvcGVydGllcy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KGVudHJ5KSB7XG4gIHRoaXMudGltZSA9IGVudHJ5LnRpbWU7XG4gIHRoaXMudGFyZ2V0ID0gZW50cnkudGFyZ2V0O1xuICB0aGlzLnJvb3RCb3VuZHMgPSBlbnRyeS5yb290Qm91bmRzO1xuICB0aGlzLmJvdW5kaW5nQ2xpZW50UmVjdCA9IGVudHJ5LmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgdGhpcy5pbnRlcnNlY3Rpb25SZWN0ID0gZW50cnkuaW50ZXJzZWN0aW9uUmVjdCB8fCBnZXRFbXB0eVJlY3QoKTtcbiAgdGhpcy5pc0ludGVyc2VjdGluZyA9ICEhZW50cnkuaW50ZXJzZWN0aW9uUmVjdDtcblxuICAvLyBDYWxjdWxhdGVzIHRoZSBpbnRlcnNlY3Rpb24gcmF0aW8uXG4gIHZhciB0YXJnZXRSZWN0ID0gdGhpcy5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gIHZhciB0YXJnZXRBcmVhID0gdGFyZ2V0UmVjdC53aWR0aCAqIHRhcmdldFJlY3QuaGVpZ2h0O1xuICB2YXIgaW50ZXJzZWN0aW9uUmVjdCA9IHRoaXMuaW50ZXJzZWN0aW9uUmVjdDtcbiAgdmFyIGludGVyc2VjdGlvbkFyZWEgPSBpbnRlcnNlY3Rpb25SZWN0LndpZHRoICogaW50ZXJzZWN0aW9uUmVjdC5oZWlnaHQ7XG5cbiAgLy8gU2V0cyBpbnRlcnNlY3Rpb24gcmF0aW8uXG4gIGlmICh0YXJnZXRBcmVhKSB7XG4gICAgdGhpcy5pbnRlcnNlY3Rpb25SYXRpbyA9IGludGVyc2VjdGlvbkFyZWEgLyB0YXJnZXRBcmVhO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIGFyZWEgaXMgemVybyBhbmQgaXMgaW50ZXJzZWN0aW5nLCBzZXRzIHRvIDEsIG90aGVyd2lzZSB0byAwXG4gICAgdGhpcy5pbnRlcnNlY3Rpb25SYXRpbyA9IHRoaXMuaXNJbnRlcnNlY3RpbmcgPyAxIDogMDtcbiAgfVxufVxuXG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgZ2xvYmFsIEludGVyc2VjdGlvbk9ic2VydmVyIGNvbnN0cnVjdG9yLlxuICogaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ludGVyc2VjdGlvbk9ic2VydmVyLyNpbnRlcnNlY3Rpb24tb2JzZXJ2ZXItaW50ZXJmYWNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciBpbnRlcnNlY3Rpb25cbiAqICAgICBjaGFuZ2VzIGhhdmUgcXVldWVkLiBUaGUgZnVuY3Rpb24gaXMgbm90IGludm9rZWQgaWYgdGhlIHF1ZXVlIGhhc1xuICogICAgIGJlZW4gZW1wdGllZCBieSBjYWxsaW5nIHRoZSBgdGFrZVJlY29yZHNgIG1ldGhvZC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEludGVyc2VjdGlvbk9ic2VydmVyKGNhbGxiYWNrLCBvcHRfb3B0aW9ucykge1xuXG4gIHZhciBvcHRpb25zID0gb3B0X29wdGlvbnMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnJvb3QgJiYgb3B0aW9ucy5yb290Lm5vZGVUeXBlICE9IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jvb3QgbXVzdCBiZSBhbiBFbGVtZW50Jyk7XG4gIH1cblxuICAvLyBCaW5kcyBhbmQgdGhyb3R0bGVzIGB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnNgLlxuICB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMgPSB0aHJvdHRsZShcbiAgICAgIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucy5iaW5kKHRoaXMpLCB0aGlzLlRIUk9UVExFX1RJTUVPVVQpO1xuXG4gIC8vIFByaXZhdGUgcHJvcGVydGllcy5cbiAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzID0gW107XG4gIHRoaXMuX3F1ZXVlZEVudHJpZXMgPSBbXTtcbiAgdGhpcy5fcm9vdE1hcmdpblZhbHVlcyA9IHRoaXMuX3BhcnNlUm9vdE1hcmdpbihvcHRpb25zLnJvb3RNYXJnaW4pO1xuXG4gIC8vIFB1YmxpYyBwcm9wZXJ0aWVzLlxuICB0aGlzLnRocmVzaG9sZHMgPSB0aGlzLl9pbml0VGhyZXNob2xkcyhvcHRpb25zLnRocmVzaG9sZCk7XG4gIHRoaXMucm9vdCA9IG9wdGlvbnMucm9vdCB8fCBudWxsO1xuICB0aGlzLnJvb3RNYXJnaW4gPSB0aGlzLl9yb290TWFyZ2luVmFsdWVzLm1hcChmdW5jdGlvbihtYXJnaW4pIHtcbiAgICByZXR1cm4gbWFyZ2luLnZhbHVlICsgbWFyZ2luLnVuaXQ7XG4gIH0pLmpvaW4oJyAnKTtcbn1cblxuXG4vKipcbiAqIFRoZSBtaW5pbXVtIGludGVydmFsIHdpdGhpbiB3aGljaCB0aGUgZG9jdW1lbnQgd2lsbCBiZSBjaGVja2VkIGZvclxuICogaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5USFJPVFRMRV9USU1FT1VUID0gMTAwO1xuXG5cbi8qKlxuICogVGhlIGZyZXF1ZW5jeSBpbiB3aGljaCB0aGUgcG9seWZpbGwgcG9sbHMgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICogdGhpcyBjYW4gYmUgdXBkYXRlZCBvbiBhIHBlciBpbnN0YW5jZSBiYXNpcyBhbmQgbXVzdCBiZSBzZXQgcHJpb3IgdG9cbiAqIGNhbGxpbmcgYG9ic2VydmVgIG9uIHRoZSBmaXJzdCB0YXJnZXQuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5QT0xMX0lOVEVSVkFMID0gbnVsbDtcblxuLyoqXG4gKiBVc2UgYSBtdXRhdGlvbiBvYnNlcnZlciBvbiB0aGUgcm9vdCBlbGVtZW50XG4gKiB0byBkZXRlY3QgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5VU0VfTVVUQVRJT05fT0JTRVJWRVIgPSB0cnVlO1xuXG5cbi8qKlxuICogU3RhcnRzIG9ic2VydmluZyBhIHRhcmdldCBlbGVtZW50IGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcyBiYXNlZCBvblxuICogdGhlIHRocmVzaG9sZHMgdmFsdWVzLlxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIERPTSBlbGVtZW50IHRvIG9ic2VydmUuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24odGFyZ2V0KSB7XG4gIHZhciBpc1RhcmdldEFscmVhZHlPYnNlcnZlZCA9IHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cy5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5lbGVtZW50ID09IHRhcmdldDtcbiAgfSk7XG5cbiAgaWYgKGlzVGFyZ2V0QWxyZWFkeU9ic2VydmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCEodGFyZ2V0ICYmIHRhcmdldC5ub2RlVHlwZSA9PSAxKSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gRWxlbWVudCcpO1xuICB9XG5cbiAgdGhpcy5fcmVnaXN0ZXJJbnN0YW5jZSgpO1xuICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMucHVzaCh7ZWxlbWVudDogdGFyZ2V0LCBlbnRyeTogbnVsbH0pO1xuICB0aGlzLl9tb25pdG9ySW50ZXJzZWN0aW9ucygpO1xuICB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMoKTtcbn07XG5cblxuLyoqXG4gKiBTdG9wcyBvYnNlcnZpbmcgYSB0YXJnZXQgZWxlbWVudCBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCBUaGUgRE9NIGVsZW1lbnQgdG8gb2JzZXJ2ZS5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMgPVxuICAgICAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG5cbiAgICByZXR1cm4gaXRlbS5lbGVtZW50ICE9IHRhcmdldDtcbiAgfSk7XG4gIGlmICghdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aCkge1xuICAgIHRoaXMuX3VubW9uaXRvckludGVyc2VjdGlvbnMoKTtcbiAgICB0aGlzLl91bnJlZ2lzdGVySW5zdGFuY2UoKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFN0b3BzIG9ic2VydmluZyBhbGwgdGFyZ2V0IGVsZW1lbnRzIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzID0gW107XG4gIHRoaXMuX3VubW9uaXRvckludGVyc2VjdGlvbnMoKTtcbiAgdGhpcy5fdW5yZWdpc3Rlckluc3RhbmNlKCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhbnkgcXVldWUgZW50cmllcyB0aGF0IGhhdmUgbm90IHlldCBiZWVuIHJlcG9ydGVkIHRvIHRoZVxuICogY2FsbGJhY2sgYW5kIGNsZWFycyB0aGUgcXVldWUuIFRoaXMgY2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGVcbiAqIGNhbGxiYWNrIHRvIG9idGFpbiB0aGUgYWJzb2x1dGUgbW9zdCB1cC10by1kYXRlIGludGVyc2VjdGlvbiBpbmZvcm1hdGlvbi5cbiAqIEByZXR1cm4ge0FycmF5fSBUaGUgY3VycmVudGx5IHF1ZXVlZCBlbnRyaWVzLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUudGFrZVJlY29yZHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlY29yZHMgPSB0aGlzLl9xdWV1ZWRFbnRyaWVzLnNsaWNlKCk7XG4gIHRoaXMuX3F1ZXVlZEVudHJpZXMgPSBbXTtcbiAgcmV0dXJuIHJlY29yZHM7XG59O1xuXG5cbi8qKlxuICogQWNjZXB0cyB0aGUgdGhyZXNob2xkIHZhbHVlIGZyb20gdGhlIHVzZXIgY29uZmlndXJhdGlvbiBvYmplY3QgYW5kXG4gKiByZXR1cm5zIGEgc29ydGVkIGFycmF5IG9mIHVuaXF1ZSB0aHJlc2hvbGQgdmFsdWVzLiBJZiBhIHZhbHVlIGlzIG5vdFxuICogYmV0d2VlbiAwIGFuZCAxIGFuZCBlcnJvciBpcyB0aHJvd24uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxudW1iZXI9fSBvcHRfdGhyZXNob2xkIEFuIG9wdGlvbmFsIHRocmVzaG9sZCB2YWx1ZSBvclxuICogICAgIGEgbGlzdCBvZiB0aHJlc2hvbGQgdmFsdWVzLCBkZWZhdWx0aW5nIHRvIFswXS5cbiAqIEByZXR1cm4ge0FycmF5fSBBIHNvcnRlZCBsaXN0IG9mIHVuaXF1ZSBhbmQgdmFsaWQgdGhyZXNob2xkIHZhbHVlcy5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9pbml0VGhyZXNob2xkcyA9IGZ1bmN0aW9uKG9wdF90aHJlc2hvbGQpIHtcbiAgdmFyIHRocmVzaG9sZCA9IG9wdF90aHJlc2hvbGQgfHwgWzBdO1xuICBpZiAoIUFycmF5LmlzQXJyYXkodGhyZXNob2xkKSkgdGhyZXNob2xkID0gW3RocmVzaG9sZF07XG5cbiAgcmV0dXJuIHRocmVzaG9sZC5zb3J0KCkuZmlsdGVyKGZ1bmN0aW9uKHQsIGksIGEpIHtcbiAgICBpZiAodHlwZW9mIHQgIT0gJ251bWJlcicgfHwgaXNOYU4odCkgfHwgdCA8IDAgfHwgdCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGhyZXNob2xkIG11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxIGluY2x1c2l2ZWx5Jyk7XG4gICAgfVxuICAgIHJldHVybiB0ICE9PSBhW2kgLSAxXTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQWNjZXB0cyB0aGUgcm9vdE1hcmdpbiB2YWx1ZSBmcm9tIHRoZSB1c2VyIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgZm91ciBtYXJnaW4gdmFsdWVzIGFzIGFuIG9iamVjdCBjb250YWluaW5nXG4gKiB0aGUgdmFsdWUgYW5kIHVuaXQgcHJvcGVydGllcy4gSWYgYW55IG9mIHRoZSB2YWx1ZXMgYXJlIG5vdCBwcm9wZXJseVxuICogZm9ybWF0dGVkIG9yIHVzZSBhIHVuaXQgb3RoZXIgdGhhbiBweCBvciAlLCBhbmQgZXJyb3IgaXMgdGhyb3duLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3Jvb3RNYXJnaW4gQW4gb3B0aW9uYWwgcm9vdE1hcmdpbiB2YWx1ZSxcbiAqICAgICBkZWZhdWx0aW5nIHRvICcwcHgnLlxuICogQHJldHVybiB7QXJyYXk8T2JqZWN0Pn0gQW4gYXJyYXkgb2YgbWFyZ2luIG9iamVjdHMgd2l0aCB0aGUga2V5c1xuICogICAgIHZhbHVlIGFuZCB1bml0LlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3BhcnNlUm9vdE1hcmdpbiA9IGZ1bmN0aW9uKG9wdF9yb290TWFyZ2luKSB7XG4gIHZhciBtYXJnaW5TdHJpbmcgPSBvcHRfcm9vdE1hcmdpbiB8fCAnMHB4JztcbiAgdmFyIG1hcmdpbnMgPSBtYXJnaW5TdHJpbmcuc3BsaXQoL1xccysvKS5tYXAoZnVuY3Rpb24obWFyZ2luKSB7XG4gICAgdmFyIHBhcnRzID0gL14oLT9cXGQqXFwuP1xcZCspKHB4fCUpJC8uZXhlYyhtYXJnaW4pO1xuICAgIGlmICghcGFydHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncm9vdE1hcmdpbiBtdXN0IGJlIHNwZWNpZmllZCBpbiBwaXhlbHMgb3IgcGVyY2VudCcpO1xuICAgIH1cbiAgICByZXR1cm4ge3ZhbHVlOiBwYXJzZUZsb2F0KHBhcnRzWzFdKSwgdW5pdDogcGFydHNbMl19O1xuICB9KTtcblxuICAvLyBIYW5kbGVzIHNob3J0aGFuZC5cbiAgbWFyZ2luc1sxXSA9IG1hcmdpbnNbMV0gfHwgbWFyZ2luc1swXTtcbiAgbWFyZ2luc1syXSA9IG1hcmdpbnNbMl0gfHwgbWFyZ2luc1swXTtcbiAgbWFyZ2luc1szXSA9IG1hcmdpbnNbM10gfHwgbWFyZ2luc1sxXTtcblxuICByZXR1cm4gbWFyZ2lucztcbn07XG5cblxuLyoqXG4gKiBTdGFydHMgcG9sbGluZyBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMgaWYgdGhlIHBvbGxpbmcgaXMgbm90IGFscmVhZHlcbiAqIGhhcHBlbmluZywgYW5kIGlmIHRoZSBwYWdlJ3MgdmlzaWJpbHR5IHN0YXRlIGlzIHZpc2libGUuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX21vbml0b3JJbnRlcnNlY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fbW9uaXRvcmluZ0ludGVyc2VjdGlvbnMpIHtcbiAgICB0aGlzLl9tb25pdG9yaW5nSW50ZXJzZWN0aW9ucyA9IHRydWU7XG5cbiAgICAvLyBJZiBhIHBvbGwgaW50ZXJ2YWwgaXMgc2V0LCB1c2UgcG9sbGluZyBpbnN0ZWFkIG9mIGxpc3RlbmluZyB0b1xuICAgIC8vIHJlc2l6ZSBhbmQgc2Nyb2xsIGV2ZW50cyBvciBET00gbXV0YXRpb25zLlxuICAgIGlmICh0aGlzLlBPTExfSU5URVJWQUwpIHtcbiAgICAgIHRoaXMuX21vbml0b3JpbmdJbnRlcnZhbCA9IHNldEludGVydmFsKFxuICAgICAgICAgIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucywgdGhpcy5QT0xMX0lOVEVSVkFMKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhZGRFdmVudCh3aW5kb3csICdyZXNpemUnLCB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMsIHRydWUpO1xuICAgICAgYWRkRXZlbnQoZG9jdW1lbnQsICdzY3JvbGwnLCB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMsIHRydWUpO1xuXG4gICAgICBpZiAodGhpcy5VU0VfTVVUQVRJT05fT0JTRVJWRVIgJiYgJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgICB0aGlzLl9kb21PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucyk7XG4gICAgICAgIHRoaXMuX2RvbU9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogU3RvcHMgcG9sbGluZyBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3VubW9uaXRvckludGVyc2VjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX21vbml0b3JpbmdJbnRlcnNlY3Rpb25zKSB7XG4gICAgdGhpcy5fbW9uaXRvcmluZ0ludGVyc2VjdGlvbnMgPSBmYWxzZTtcblxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fbW9uaXRvcmluZ0ludGVydmFsKTtcbiAgICB0aGlzLl9tb25pdG9yaW5nSW50ZXJ2YWwgPSBudWxsO1xuXG4gICAgcmVtb3ZlRXZlbnQod2luZG93LCAncmVzaXplJywgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zLCB0cnVlKTtcbiAgICByZW1vdmVFdmVudChkb2N1bWVudCwgJ3Njcm9sbCcsIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucywgdHJ1ZSk7XG5cbiAgICBpZiAodGhpcy5fZG9tT2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuX2RvbU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuX2RvbU9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTY2FucyBlYWNoIG9ic2VydmF0aW9uIHRhcmdldCBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMgYW5kIGFkZHMgdGhlbVxuICogdG8gdGhlIGludGVybmFsIGVudHJpZXMgcXVldWUuIElmIG5ldyBlbnRyaWVzIGFyZSBmb3VuZCwgaXRcbiAqIHNjaGVkdWxlcyB0aGUgY2FsbGJhY2sgdG8gYmUgaW52b2tlZC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gIHZhciByb290SXNJbkRvbSA9IHRoaXMuX3Jvb3RJc0luRG9tKCk7XG4gIHZhciByb290UmVjdCA9IHJvb3RJc0luRG9tID8gdGhpcy5fZ2V0Um9vdFJlY3QoKSA6IGdldEVtcHR5UmVjdCgpO1xuXG4gIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB2YXIgdGFyZ2V0ID0gaXRlbS5lbGVtZW50O1xuICAgIHZhciB0YXJnZXRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHRhcmdldCk7XG4gICAgdmFyIHJvb3RDb250YWluc1RhcmdldCA9IHRoaXMuX3Jvb3RDb250YWluc1RhcmdldCh0YXJnZXQpO1xuICAgIHZhciBvbGRFbnRyeSA9IGl0ZW0uZW50cnk7XG4gICAgdmFyIGludGVyc2VjdGlvblJlY3QgPSByb290SXNJbkRvbSAmJiByb290Q29udGFpbnNUYXJnZXQgJiZcbiAgICAgICAgdGhpcy5fY29tcHV0ZVRhcmdldEFuZFJvb3RJbnRlcnNlY3Rpb24odGFyZ2V0LCByb290UmVjdCk7XG5cbiAgICB2YXIgbmV3RW50cnkgPSBpdGVtLmVudHJ5ID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkoe1xuICAgICAgdGltZTogbm93KCksXG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGJvdW5kaW5nQ2xpZW50UmVjdDogdGFyZ2V0UmVjdCxcbiAgICAgIHJvb3RCb3VuZHM6IHJvb3RSZWN0LFxuICAgICAgaW50ZXJzZWN0aW9uUmVjdDogaW50ZXJzZWN0aW9uUmVjdFxuICAgIH0pO1xuXG4gICAgaWYgKCFvbGRFbnRyeSkge1xuICAgICAgdGhpcy5fcXVldWVkRW50cmllcy5wdXNoKG5ld0VudHJ5KTtcbiAgICB9IGVsc2UgaWYgKHJvb3RJc0luRG9tICYmIHJvb3RDb250YWluc1RhcmdldCkge1xuICAgICAgLy8gSWYgdGhlIG5ldyBlbnRyeSBpbnRlcnNlY3Rpb24gcmF0aW8gaGFzIGNyb3NzZWQgYW55IG9mIHRoZVxuICAgICAgLy8gdGhyZXNob2xkcywgYWRkIGEgbmV3IGVudHJ5LlxuICAgICAgaWYgKHRoaXMuX2hhc0Nyb3NzZWRUaHJlc2hvbGQob2xkRW50cnksIG5ld0VudHJ5KSkge1xuICAgICAgICB0aGlzLl9xdWV1ZWRFbnRyaWVzLnB1c2gobmV3RW50cnkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgcm9vdCBpcyBub3QgaW4gdGhlIERPTSBvciB0YXJnZXQgaXMgbm90IGNvbnRhaW5lZCB3aXRoaW5cbiAgICAgIC8vIHJvb3QgYnV0IHRoZSBwcmV2aW91cyBlbnRyeSBmb3IgdGhpcyB0YXJnZXQgaGFkIGFuIGludGVyc2VjdGlvbixcbiAgICAgIC8vIGFkZCBhIG5ldyByZWNvcmQgaW5kaWNhdGluZyByZW1vdmFsLlxuICAgICAgaWYgKG9sZEVudHJ5ICYmIG9sZEVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlZEVudHJpZXMucHVzaChuZXdFbnRyeSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0aGlzKTtcblxuICBpZiAodGhpcy5fcXVldWVkRW50cmllcy5sZW5ndGgpIHtcbiAgICB0aGlzLl9jYWxsYmFjayh0aGlzLnRha2VSZWNvcmRzKCksIHRoaXMpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQWNjZXB0cyBhIHRhcmdldCBhbmQgcm9vdCByZWN0IGNvbXB1dGVzIHRoZSBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0aGVuXG4gKiBmb2xsb3dpbmcgdGhlIGFsZ29yaXRobSBpbiB0aGUgc3BlYy5cbiAqIFRPRE8ocGhpbGlwd2FsdG9uKTogYXQgdGhpcyB0aW1lIGNsaXAtcGF0aCBpcyBub3QgY29uc2lkZXJlZC5cbiAqIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9JbnRlcnNlY3Rpb25PYnNlcnZlci8jY2FsY3VsYXRlLWludGVyc2VjdGlvbi1yZWN0LWFsZ29cbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSB0YXJnZXQgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByb290UmVjdCBUaGUgYm91bmRpbmcgcmVjdCBvZiB0aGUgcm9vdCBhZnRlciBiZWluZ1xuICogICAgIGV4cGFuZGVkIGJ5IHRoZSByb290TWFyZ2luIHZhbHVlLlxuICogQHJldHVybiB7P09iamVjdH0gVGhlIGZpbmFsIGludGVyc2VjdGlvbiByZWN0IG9iamVjdCBvciB1bmRlZmluZWQgaWYgbm9cbiAqICAgICBpbnRlcnNlY3Rpb24gaXMgZm91bmQuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX2NvbXB1dGVUYXJnZXRBbmRSb290SW50ZXJzZWN0aW9uID1cbiAgICBmdW5jdGlvbih0YXJnZXQsIHJvb3RSZWN0KSB7XG5cbiAgLy8gSWYgdGhlIGVsZW1lbnQgaXNuJ3QgZGlzcGxheWVkLCBhbiBpbnRlcnNlY3Rpb24gY2FuJ3QgaGFwcGVuLlxuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5kaXNwbGF5ID09ICdub25lJykgcmV0dXJuO1xuXG4gIHZhciB0YXJnZXRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHRhcmdldCk7XG4gIHZhciBpbnRlcnNlY3Rpb25SZWN0ID0gdGFyZ2V0UmVjdDtcbiAgdmFyIHBhcmVudCA9IGdldFBhcmVudE5vZGUodGFyZ2V0KTtcbiAgdmFyIGF0Um9vdCA9IGZhbHNlO1xuXG4gIHdoaWxlICghYXRSb290KSB7XG4gICAgdmFyIHBhcmVudFJlY3QgPSBudWxsO1xuICAgIHZhciBwYXJlbnRDb21wdXRlZFN0eWxlID0gcGFyZW50Lm5vZGVUeXBlID09IDEgP1xuICAgICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpIDoge307XG5cbiAgICAvLyBJZiB0aGUgcGFyZW50IGlzbid0IGRpc3BsYXllZCwgYW4gaW50ZXJzZWN0aW9uIGNhbid0IGhhcHBlbi5cbiAgICBpZiAocGFyZW50Q29tcHV0ZWRTdHlsZS5kaXNwbGF5ID09ICdub25lJykgcmV0dXJuO1xuXG4gICAgaWYgKHBhcmVudCA9PSB0aGlzLnJvb3QgfHwgcGFyZW50ID09IGRvY3VtZW50KSB7XG4gICAgICBhdFJvb3QgPSB0cnVlO1xuICAgICAgcGFyZW50UmVjdCA9IHJvb3RSZWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBub24tdmlzaWJsZSBvdmVyZmxvdywgYW5kIGl0J3Mgbm90IHRoZSA8Ym9keT5cbiAgICAgIC8vIG9yIDxodG1sPiBlbGVtZW50LCB1cGRhdGUgdGhlIGludGVyc2VjdGlvbiByZWN0LlxuICAgICAgLy8gTm90ZTogPGJvZHk+IGFuZCA8aHRtbD4gY2Fubm90IGJlIGNsaXBwZWQgdG8gYSByZWN0IHRoYXQncyBub3QgYWxzb1xuICAgICAgLy8gdGhlIGRvY3VtZW50IHJlY3QsIHNvIG5vIG5lZWQgdG8gY29tcHV0ZSBhIG5ldyBpbnRlcnNlY3Rpb24uXG4gICAgICBpZiAocGFyZW50ICE9IGRvY3VtZW50LmJvZHkgJiZcbiAgICAgICAgICBwYXJlbnQgIT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICAgcGFyZW50Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyAhPSAndmlzaWJsZScpIHtcbiAgICAgICAgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIGVpdGhlciBvZiB0aGUgYWJvdmUgY29uZGl0aW9uYWxzIHNldCBhIG5ldyBwYXJlbnRSZWN0LFxuICAgIC8vIGNhbGN1bGF0ZSBuZXcgaW50ZXJzZWN0aW9uIGRhdGEuXG4gICAgaWYgKHBhcmVudFJlY3QpIHtcbiAgICAgIGludGVyc2VjdGlvblJlY3QgPSBjb21wdXRlUmVjdEludGVyc2VjdGlvbihwYXJlbnRSZWN0LCBpbnRlcnNlY3Rpb25SZWN0KTtcblxuICAgICAgaWYgKCFpbnRlcnNlY3Rpb25SZWN0KSBicmVhaztcbiAgICB9XG4gICAgcGFyZW50ID0gZ2V0UGFyZW50Tm9kZShwYXJlbnQpO1xuICB9XG4gIHJldHVybiBpbnRlcnNlY3Rpb25SZWN0O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJvb3QgcmVjdCBhZnRlciBiZWluZyBleHBhbmRlZCBieSB0aGUgcm9vdE1hcmdpbiB2YWx1ZS5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV4cGFuZGVkIHJvb3QgcmVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fZ2V0Um9vdFJlY3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3RSZWN0O1xuICBpZiAodGhpcy5yb290KSB7XG4gICAgcm9vdFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGhpcy5yb290KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBVc2UgPGh0bWw+Lzxib2R5PiBpbnN0ZWFkIG9mIHdpbmRvdyBzaW5jZSBzY3JvbGwgYmFycyBhZmZlY3Qgc2l6ZS5cbiAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgcm9vdFJlY3QgPSB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IGh0bWwuY2xpZW50V2lkdGggfHwgYm9keS5jbGllbnRXaWR0aCxcbiAgICAgIHdpZHRoOiBodG1sLmNsaWVudFdpZHRoIHx8IGJvZHkuY2xpZW50V2lkdGgsXG4gICAgICBib3R0b206IGh0bWwuY2xpZW50SGVpZ2h0IHx8IGJvZHkuY2xpZW50SGVpZ2h0LFxuICAgICAgaGVpZ2h0OiBodG1sLmNsaWVudEhlaWdodCB8fCBib2R5LmNsaWVudEhlaWdodFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2V4cGFuZFJlY3RCeVJvb3RNYXJnaW4ocm9vdFJlY3QpO1xufTtcblxuXG4vKipcbiAqIEFjY2VwdHMgYSByZWN0IGFuZCBleHBhbmRzIGl0IGJ5IHRoZSByb290TWFyZ2luIHZhbHVlLlxuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgVGhlIHJlY3Qgb2JqZWN0IHRvIGV4cGFuZC5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV4cGFuZGVkIHJlY3QuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX2V4cGFuZFJlY3RCeVJvb3RNYXJnaW4gPSBmdW5jdGlvbihyZWN0KSB7XG4gIHZhciBtYXJnaW5zID0gdGhpcy5fcm9vdE1hcmdpblZhbHVlcy5tYXAoZnVuY3Rpb24obWFyZ2luLCBpKSB7XG4gICAgcmV0dXJuIG1hcmdpbi51bml0ID09ICdweCcgPyBtYXJnaW4udmFsdWUgOlxuICAgICAgICBtYXJnaW4udmFsdWUgKiAoaSAlIDIgPyByZWN0LndpZHRoIDogcmVjdC5oZWlnaHQpIC8gMTAwO1xuICB9KTtcbiAgdmFyIG5ld1JlY3QgPSB7XG4gICAgdG9wOiByZWN0LnRvcCAtIG1hcmdpbnNbMF0sXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQgKyBtYXJnaW5zWzFdLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyBtYXJnaW5zWzJdLFxuICAgIGxlZnQ6IHJlY3QubGVmdCAtIG1hcmdpbnNbM11cbiAgfTtcbiAgbmV3UmVjdC53aWR0aCA9IG5ld1JlY3QucmlnaHQgLSBuZXdSZWN0LmxlZnQ7XG4gIG5ld1JlY3QuaGVpZ2h0ID0gbmV3UmVjdC5ib3R0b20gLSBuZXdSZWN0LnRvcDtcblxuICByZXR1cm4gbmV3UmVjdDtcbn07XG5cblxuLyoqXG4gKiBBY2NlcHRzIGFuIG9sZCBhbmQgbmV3IGVudHJ5IGFuZCByZXR1cm5zIHRydWUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZVxuICogdGhyZXNob2xkIHZhbHVlcyBoYXMgYmVlbiBjcm9zc2VkLlxuICogQHBhcmFtIHs/SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeX0gb2xkRW50cnkgVGhlIHByZXZpb3VzIGVudHJ5IGZvciBhXG4gKiAgICBwYXJ0aWN1bGFyIHRhcmdldCBlbGVtZW50IG9yIG51bGwgaWYgbm8gcHJldmlvdXMgZW50cnkgZXhpc3RzLlxuICogQHBhcmFtIHtJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5fSBuZXdFbnRyeSBUaGUgY3VycmVudCBlbnRyeSBmb3IgYVxuICogICAgcGFydGljdWxhciB0YXJnZXQgZWxlbWVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhIGFueSB0aHJlc2hvbGQgaGFzIGJlZW4gY3Jvc3NlZC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5faGFzQ3Jvc3NlZFRocmVzaG9sZCA9XG4gICAgZnVuY3Rpb24ob2xkRW50cnksIG5ld0VudHJ5KSB7XG5cbiAgLy8gVG8gbWFrZSBjb21wYXJpbmcgZWFzaWVyLCBhbiBlbnRyeSB0aGF0IGhhcyBhIHJhdGlvIG9mIDBcbiAgLy8gYnV0IGRvZXMgbm90IGFjdHVhbGx5IGludGVyc2VjdCBpcyBnaXZlbiBhIHZhbHVlIG9mIC0xXG4gIHZhciBvbGRSYXRpbyA9IG9sZEVudHJ5ICYmIG9sZEVudHJ5LmlzSW50ZXJzZWN0aW5nID9cbiAgICAgIG9sZEVudHJ5LmludGVyc2VjdGlvblJhdGlvIHx8IDAgOiAtMTtcbiAgdmFyIG5ld1JhdGlvID0gbmV3RW50cnkuaXNJbnRlcnNlY3RpbmcgP1xuICAgICAgbmV3RW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gfHwgMCA6IC0xO1xuXG4gIC8vIElnbm9yZSB1bmNoYW5nZWQgcmF0aW9zXG4gIGlmIChvbGRSYXRpbyA9PT0gbmV3UmF0aW8pIHJldHVybjtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGhyZXNob2xkcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0aHJlc2hvbGQgPSB0aGlzLnRocmVzaG9sZHNbaV07XG5cbiAgICAvLyBSZXR1cm4gdHJ1ZSBpZiBhbiBlbnRyeSBtYXRjaGVzIGEgdGhyZXNob2xkIG9yIGlmIHRoZSBuZXcgcmF0aW9cbiAgICAvLyBhbmQgdGhlIG9sZCByYXRpbyBhcmUgb24gdGhlIG9wcG9zaXRlIHNpZGVzIG9mIGEgdGhyZXNob2xkLlxuICAgIGlmICh0aHJlc2hvbGQgPT0gb2xkUmF0aW8gfHwgdGhyZXNob2xkID09IG5ld1JhdGlvIHx8XG4gICAgICAgIHRocmVzaG9sZCA8IG9sZFJhdGlvICE9PSB0aHJlc2hvbGQgPCBuZXdSYXRpbykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcm9vdCBlbGVtZW50IGlzIGFuIGVsZW1lbnQgYW5kIGlzIGluIHRoZSBET00uXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSByb290IGVsZW1lbnQgaXMgYW4gZWxlbWVudCBhbmQgaXMgaW4gdGhlIERPTS5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fcm9vdElzSW5Eb20gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLnJvb3QgfHwgY29udGFpbnNEZWVwKGRvY3VtZW50LCB0aGlzLnJvb3QpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgY2hpbGQgb2Ygcm9vdC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSB0YXJnZXQgZWxlbWVudCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgY2hpbGQgb2Ygcm9vdC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fcm9vdENvbnRhaW5zVGFyZ2V0ID0gZnVuY3Rpb24odGFyZ2V0KSB7XG4gIHJldHVybiBjb250YWluc0RlZXAodGhpcy5yb290IHx8IGRvY3VtZW50LCB0YXJnZXQpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgdGhlIGluc3RhbmNlIHRvIHRoZSBnbG9iYWwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgcmVnaXN0cnkgaWYgaXQgaXNuJ3RcbiAqIGFscmVhZHkgcHJlc2VudC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fcmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAocmVnaXN0cnkuaW5kZXhPZih0aGlzKSA8IDApIHtcbiAgICByZWdpc3RyeS5wdXNoKHRoaXMpO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgaW5zdGFuY2UgZnJvbSB0aGUgZ2xvYmFsIEludGVyc2VjdGlvbk9ic2VydmVyIHJlZ2lzdHJ5LlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl91bnJlZ2lzdGVySW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGluZGV4ID0gcmVnaXN0cnkuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9IC0xKSByZWdpc3RyeS5zcGxpY2UoaW5kZXgsIDEpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgcGVyZm9ybWFuY2Uubm93KCkgbWV0aG9kIG9yIG51bGwgaW4gYnJvd3NlcnNcbiAqIHRoYXQgZG9uJ3Qgc3VwcG9ydCB0aGUgQVBJLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgZWxhcHNlZCB0aW1lIHNpbmNlIHRoZSBwYWdlIHdhcyByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiBwZXJmb3JtYW5jZS5ub3cgJiYgcGVyZm9ybWFuY2Uubm93KCk7XG59XG5cblxuLyoqXG4gKiBUaHJvdHRsZXMgYSBmdW5jdGlvbiBhbmQgZGVsYXlzIGl0cyBleGVjdXRpb25nLCBzbyBpdCdzIG9ubHkgY2FsbGVkIGF0IG1vc3RcbiAqIG9uY2Ugd2l0aGluIGEgZ2l2ZW4gdGltZSBwZXJpb2QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCBUaGUgYW1vdW50IG9mIHRpbWUgdGhhdCBtdXN0IHBhc3MgYmVmb3JlIHRoZVxuICogICAgIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgYWdhaW4uXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIHRocm90dGxlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZm4sIHRpbWVvdXQpIHtcbiAgdmFyIHRpbWVyID0gbnVsbDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRpbWVyKSB7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZuKCk7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcbn1cblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgaGFuZGxlciB0byBhIERPTSBub2RlIGVuc3VyaW5nIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJpbGl0eS5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgRE9NIG5vZGUgdG8gYWRkIHRoZSBldmVudCBoYW5kbGVyIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGV2ZW50IGhhbmRsZXIgdG8gYWRkLlxuICogQHBhcmFtIHtib29sZWFufSBvcHRfdXNlQ2FwdHVyZSBPcHRpb25hbGx5IGFkZHMgdGhlIGV2ZW4gdG8gdGhlIGNhcHR1cmVcbiAqICAgICBwaGFzZS4gTm90ZTogdGhpcyBvbmx5IHdvcmtzIGluIG1vZGVybiBicm93c2Vycy5cbiAqL1xuZnVuY3Rpb24gYWRkRXZlbnQobm9kZSwgZXZlbnQsIGZuLCBvcHRfdXNlQ2FwdHVyZSkge1xuICBpZiAodHlwZW9mIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgb3B0X3VzZUNhcHR1cmUgfHwgZmFsc2UpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBub2RlLmF0dGFjaEV2ZW50ID09ICdmdW5jdGlvbicpIHtcbiAgICBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgZm4pO1xuICB9XG59XG5cblxuLyoqXG4gKiBSZW1vdmVzIGEgcHJldmlvdXNseSBhZGRlZCBldmVudCBoYW5kbGVyIGZyb20gYSBET00gbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgRE9NIG5vZGUgdG8gcmVtb3ZlIHRoZSBldmVudCBoYW5kbGVyIGZyb20uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZXZlbnQgaGFuZGxlciB0byByZW1vdmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdF91c2VDYXB0dXJlIElmIHRoZSBldmVudCBoYW5kbGVyIHdhcyBhZGRlZCB3aXRoIHRoaXNcbiAqICAgICBmbGFnIHNldCB0byB0cnVlLCBpdCBzaG91bGQgYmUgc2V0IHRvIHRydWUgaGVyZSBpbiBvcmRlciB0byByZW1vdmUgaXQuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50KG5vZGUsIGV2ZW50LCBmbiwgb3B0X3VzZUNhcHR1cmUpIHtcbiAgaWYgKHR5cGVvZiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sIG9wdF91c2VDYXB0dXJlIHx8IGZhbHNlKTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2Ygbm9kZS5kZXRhdGNoRXZlbnQgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5vZGUuZGV0YXRjaEV2ZW50KCdvbicgKyBldmVudCwgZm4pO1xuICB9XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0d28gcmVjdCBvYmplY3RzLlxuICogQHBhcmFtIHtPYmplY3R9IHJlY3QxIFRoZSBmaXJzdCByZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHJlY3QyIFRoZSBzZWNvbmQgcmVjdC5cbiAqIEByZXR1cm4gez9PYmplY3R9IFRoZSBpbnRlcnNlY3Rpb24gcmVjdCBvciB1bmRlZmluZWQgaWYgbm8gaW50ZXJzZWN0aW9uXG4gKiAgICAgaXMgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVSZWN0SW50ZXJzZWN0aW9uKHJlY3QxLCByZWN0Mikge1xuICB2YXIgdG9wID0gTWF0aC5tYXgocmVjdDEudG9wLCByZWN0Mi50b3ApO1xuICB2YXIgYm90dG9tID0gTWF0aC5taW4ocmVjdDEuYm90dG9tLCByZWN0Mi5ib3R0b20pO1xuICB2YXIgbGVmdCA9IE1hdGgubWF4KHJlY3QxLmxlZnQsIHJlY3QyLmxlZnQpO1xuICB2YXIgcmlnaHQgPSBNYXRoLm1pbihyZWN0MS5yaWdodCwgcmVjdDIucmlnaHQpO1xuICB2YXIgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gIHZhciBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG5cbiAgcmV0dXJuICh3aWR0aCA+PSAwICYmIGhlaWdodCA+PSAwKSAmJiB7XG4gICAgdG9wOiB0b3AsXG4gICAgYm90dG9tOiBib3R0b20sXG4gICAgbGVmdDogbGVmdCxcbiAgICByaWdodDogcmlnaHQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG5cblxuLyoqXG4gKiBTaGltcyB0aGUgbmF0aXZlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIElFLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCBUaGUgZWxlbWVudCB3aG9zZSBib3VuZGluZyByZWN0IHRvIGdldC5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIChwb3NzaWJseSBzaGltbWVkKSByZWN0IG9mIHRoZSBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWwpIHtcbiAgdmFyIHJlY3Q7XG5cbiAgdHJ5IHtcbiAgICByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElnbm9yZSBXaW5kb3dzIDcgSUUxMSBcIlVuc3BlY2lmaWVkIGVycm9yXCJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdzNjL0ludGVyc2VjdGlvbk9ic2VydmVyL3B1bGwvMjA1XG4gIH1cblxuICBpZiAoIXJlY3QpIHJldHVybiBnZXRFbXB0eVJlY3QoKTtcblxuICAvLyBPbGRlciBJRVxuICBpZiAoIShyZWN0LndpZHRoICYmIHJlY3QuaGVpZ2h0KSkge1xuICAgIHJlY3QgPSB7XG4gICAgICB0b3A6IHJlY3QudG9wLFxuICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgICB9O1xuICB9XG4gIHJldHVybiByZWN0O1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBhbiBlbXB0eSByZWN0IG9iamVjdC4gQW4gZW1wdHkgcmVjdCBpcyByZXR1cm5lZCB3aGVuIGFuIGVsZW1lbnRcbiAqIGlzIG5vdCBpbiB0aGUgRE9NLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgZW1wdHkgcmVjdC5cbiAqL1xuZnVuY3Rpb24gZ2V0RW1wdHlSZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgdG8gc2VlIGlmIGEgcGFyZW50IGVsZW1lbnQgY29udGFpbnMgYSBjaGlsZCBlbGVtbnQgKGluY2x1ZGluZyBpbnNpZGVcbiAqIHNoYWRvdyBET00pLlxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnQgVGhlIHBhcmVudCBlbGVtZW50LlxuICogQHBhcmFtIHtOb2RlfSBjaGlsZCBUaGUgY2hpbGQgZWxlbWVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBhcmVudCBub2RlIGNvbnRhaW5zIHRoZSBjaGlsZCBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc0RlZXAocGFyZW50LCBjaGlsZCkge1xuICB2YXIgbm9kZSA9IGNoaWxkO1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlID09IHBhcmVudCkgcmV0dXJuIHRydWU7XG5cbiAgICBub2RlID0gZ2V0UGFyZW50Tm9kZShub2RlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBwYXJlbnQgbm9kZSBvZiBhbiBlbGVtZW50IG9yIGl0cyBob3N0IGVsZW1lbnQgaWYgdGhlIHBhcmVudCBub2RlXG4gKiBpcyBhIHNoYWRvdyByb290LlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHdob3NlIHBhcmVudCB0byBnZXQuXG4gKiBAcmV0dXJuIHtOb2RlfG51bGx9IFRoZSBwYXJlbnQgbm9kZSBvciBudWxsIGlmIG5vIHBhcmVudCBleGlzdHMuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUobm9kZSkge1xuICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlID09IDExICYmIHBhcmVudC5ob3N0KSB7XG4gICAgLy8gSWYgdGhlIHBhcmVudCBpcyBhIHNoYWRvdyByb290LCByZXR1cm4gdGhlIGhvc3QgZWxlbWVudC5cbiAgICByZXR1cm4gcGFyZW50Lmhvc3Q7XG4gIH1cbiAgcmV0dXJuIHBhcmVudDtcbn1cblxuXG4vLyBFeHBvc2VzIHRoZSBjb25zdHJ1Y3RvcnMgZ2xvYmFsbHkuXG53aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBJbnRlcnNlY3Rpb25PYnNlcnZlcjtcbndpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5ID0gSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeTtcblxufSh3aW5kb3csIGRvY3VtZW50KSk7XG4iXSwic291cmNlUm9vdCI6IiJ9